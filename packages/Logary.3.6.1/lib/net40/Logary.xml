<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>Logary</name></assembly>
<members>
<member name="P:Logary.DP.joined">
<summary>
 Gets the data point as a single string, where each segment is joined by a
 dot &apos;.&apos;.
</summary>
</member>
<member name="T:Logary.DP">
<summary>
 A data point is the name (atom) of a measure taken by a metric. It&apos;s not
 globally unique, but specific to a metric instance.
</summary>
</member>
<member name="M:Logary.HealthCheck.GetValue">
<summary>
 Performs a check with the health check.
</summary>
</member>
<member name="T:Logary.HealthCheck">
<summary>
 You can centralise the service&apos;s health checks by registering instances
 of this interface.
</summary>
</member>
<member name="T:Logary.HealthCheckResult.HasValue">
<summary>
 The health check has a value.
</summary>
</member>
<member name="T:Logary.HealthCheckResult.NoValue">
<summary>
 This health check has no value available.
</summary>
</member>
<member name="T:Logary.HealthCheckResult">
<summary>
 A result of the health check. Either Healthy or Unhealthy
</summary>
</member>
<member name="T:Logary.LineFilter">
<summary>
 This is the accept filter that is before the log line is passed to the logger
 instance.
</summary>
</member>
<member name="T:Logary.LogLevel.Fatal">
<summary>
 The least verbose level. Will only pass through fatal
 log lines that cause the application to crash or become
 unusable.
</summary>
</member>
<member name="T:Logary.LogLevel.Error">
<summary>
 Less verbose than Warn, more verbose than Fatal
</summary>
</member>
<member name="T:Logary.LogLevel.Warn">
<summary>
 Less verbose than Info, more verbose than Error
</summary>
</member>
<member name="T:Logary.LogLevel.Info">
<summary>
 Less verbose than Debug, more verbose than Warn
</summary>
</member>
<member name="T:Logary.LogLevel.Debug">
<summary>
 Less verbose than Verbose, more verbose than Info
</summary>
</member>
<member name="T:Logary.LogLevel.Verbose">
<summary>
 The most verbose log level, more verbose than Debug.
</summary>
</member>
<member name="M:Logary.LogLevel.ToString">
<summary>
 Convert the LogLevel to a string
</summary>
</member>
<member name="M:Logary.LogLevel.ToInt">
<summary>
 Turn the LogLevel into an integer
</summary>
</member>
<member name="M:Logary.LogLevel.FromString(System.String)">
<summary>
 Converts the string passed to a Loglevel.
</summary>
</member>
<member name="M:Logary.LogLevel.FromInt(System.Int32)">
<summary>
 Turn an integer into a LogLevel
</summary>
</member>
<member name="T:Logary.LogLevel">
<summary>
 The log levels specify the severity of the message.
</summary>
</member>
<member name="P:Logary.LogLine.exception">
<summary>
 Optional exception
</summary>
</member>
<member name="P:Logary.LogLine.path">
<summary>
 Normally a URI or a hierachy: can be filled out by the logging framework.
 It denotes the location that the log or metric was sent from.
</summary>
</member>
<member name="P:Logary.LogLine.timestamp">
<summary>
 When the log line was created
</summary>
</member>
<member name="P:Logary.LogLine.tags">
<summary>
 A list of tags in the log line
</summary>
</member>
<member name="P:Logary.LogLine.level">
<summary>
 A log level
</summary>
</member>
<member name="P:Logary.LogLine.data">
<summary>
 A dictionary-alike object that keeps data to be logged
</summary>
</member>
<member name="P:Logary.LogLine.message">
<summary>
 The message for the log line
</summary>
</member>
<member name="T:Logary.LogLine">
<summary>
 The log levels specify the severity of the message.
</summary>
</member>
<member name="P:Logary.LogManager.RuntimeInfo">
<summary>
 Gets the service name that is used to filter and process the logs further
 downstream. This property is configured at initialisation of Logary.
</summary>
</member>
<member name="M:Logary.LogManager.Shutdown(NodaTime.Duration,NodaTime.Duration)">
<summary>
 Shuts Logary down after flushing, given a timeout duration to wait before
 counting the target as timed out in responding. The duration is applied
 to each actor&apos;s communication. Does an ordered shutdown.

 First duration: flush duration
 Second duration: shutdown duration
 Returns the shutdown book keeping info
</summary>
</member>
<member name="M:Logary.LogManager.GetLogger(System.String)">
<summary>
 Get a logger denoted by the name passed as the parameter. This name can either be
 a specific name that you keep for a sub-component of your application or 
 the name of the class. Also have a look at Logging.GetCurrentLogger().
</summary>
</member>
<member name="M:Logary.LogManager.FlushPending(NodaTime.Duration)">
<summary>
 Awaits that all targets finish responding to a flush message
 so that we can be certain they have processed all previous messages.
 This function is useful together with unit tests for the targets.
</summary>
</member>
<member name="T:Logary.LogManager">
<summary>
 LogManager is the public interface to Logary and takes care of getting
 loggers from names. It is also responsible for running Dispose at the
 end of the application in order to run the target shutdown logic. That said,
 the body of the software should be crash only, so even if you don&apos;t call dispose
 terminating the application, it should continue working.

 This is also a synchronous wrapper around the asynchronous actors that make
 up logary
</summary>
</member>
<member name="P:Logary.LogaryInstance.scheduler">
<summary>
 to use with Logary.SCheduling (as the actor param)
</summary>
</member>
<member name="P:Logary.LogaryInstance.registry">
<summary>
 to use with Logary.Registry
</summary>
</member>
<member name="T:Logary.LogaryInstance">
<summary>
 A type that encapsulates the moving parts of a configured Logary.
</summary>
</member>
<member name="P:Logary.Logger.Level">
<summary>
 Gets the currently set log level, aka. the granularity with which things
 are being logged
</summary>
</member>
<member name="M:Logary.Logger.Measure(Logary.Measure)">
<summary>
 Write a measure to the logger.
</summary>
</member>
<member name="M:Logary.Logger.LogVerbose(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Logary.LogLine})">
<summary>
 Write a Verbose log line
</summary>
</member>
<member name="M:Logary.Logger.LogDebug(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Logary.LogLine})">
<summary>
 Write a Debug log line
</summary>
</member>
<member name="M:Logary.Logger.Log(Logary.LogLine)">
<summary>
 Write a log line to the logger.
</summary>
</member>
<member name="T:Logary.Logger">
<summary>
 Main interface used to log LogLines and Metrics.
</summary>
</member>
<member name="P:Logary.Measure.m_tags">
<summary>
 A set of tags
</summary>
</member>
<member name="P:Logary.Measure.m_data">
<summary>
 A map of string to anything; it is up to the target in question how to
 handle extra data on the metric
</summary>
</member>
<member name="P:Logary.Measure.m_unit">
<summary>
 What unit this measure has
</summary>
</member>
<member name="P:Logary.Measure.m_level">
<summary>
 The level of the measure
</summary>
</member>
<member name="P:Logary.Measure.m_timestamp">
<summary>
 When the measurement was taken (start of capture of measure)
</summary>
</member>
<member name="P:Logary.Measure.m_path">
<summary>
 The identifier for the measure - defaults to the path of the logger
 sending it -- this is also the &apos;name&apos; of the measeure.
</summary>
</member>
<member name="P:Logary.Measure.m_value">
<summary>
 The value of the measurement
</summary>
</member>
<member name="T:Logary.Measure">
<summary>
 This is a measured event as it occurred or was at a point in time.
</summary>
</member>
<member name="T:Logary.MeasureFilter">
<summary>
 This is the accept filter that is before the measure is passed to the logger
 instance.
</summary>
</member>
<member name="T:Logary.MeasureValue">
<summary>
 A measure value is either a float of a int64 value
</summary>
</member>
<member name="P:Logary.Named.Name">
<summary>
 Gets the name of the instance
</summary>
</member>
<member name="T:Logary.Named">
<summary>
 Represents something that is named for the consumer, e.g. a timer,
 or a logger or a meter.
</summary>
</member>
<member name="P:Logary.ResultData.Measure">
<summary>
 If the health check is for a value (which it probably is) then it should
 contain the measure generated.
</summary>
</member>
<member name="P:Logary.ResultData.Exception">
<summary>
 Gets the optional exception that was thrown as a part of the evaluation
 of the health check.
</summary>
</member>
<member name="P:Logary.ResultData.Description">
<summary>
 Gets the description detailing what went badly with the evaluation of the
 health check. Useful for drilling down.
</summary>
</member>
<member name="T:Logary.ResultData">
<summary>
 The details a result
</summary>
</member>
<member name="P:Logary.Rule.measureFilter">
<summary>
 This is the accept filter that is before the measure is passed to the logger
 instance.
</summary>
</member>
<member name="P:Logary.Rule.lineFilter">
<summary>
 This is the accept filter that is before the log line is passed to the logger
 instance.
</summary>
</member>
<member name="P:Logary.Rule.level">
<summary>
 This is the level at which the target will accept log lines. It&apos;s inclusive, so
 anything below won&apos;t be accepted.
</summary>
</member>
<member name="P:Logary.Rule.target">
<summary>
 This is the name of the target that this rule applies to
</summary>
</member>
<member name="P:Logary.Rule.hiera">
<summary>
 This is the regular expression that the &apos;path&apos; must match to be loggable
</summary>
</member>
<member name="T:Logary.Rule">
<summary>
 A rule specifies what log lines and metrics a target should accept.
</summary>
</member>
<member name="T:Logary.ShutdownState">
<summary>
 A type that gives information on how the shutdown went
</summary>
</member>
<member name="T:Logary.TimeUnit.Ticks">
<summary>
 Ticks as defined by `NodaTime.NodaConstants.TicksPerSecond`.
</summary>
</member>
<member name="T:Logary.Units.Unit">
<summary>
 e.g. &apos;requests&apos; or &apos;users&apos;; you can put an arbitrary unit here
</summary>
</member>
<member name="M:Logary.Configuration.ConfBuilder.Target``1(System.String,System.Func{Logary.Target.FactoryApi.TargetConfBuild{``0},Logary.Target.FactoryApi.TargetConfBuild{``0}})">
<summary>
 Configure a target of the type with a name specified by the parameter
 name
</summary>
</member>
<member name="T:Logary.Configuration.ConfBuilder">
<summary>
 The &quot;main&quot; fluent-config-api type with extension method for configuring
 Logary rules as well as configuring specific targets.
</summary>
</member>
<member name="P:Logary.Configuration.LogaryConf.pollPeriod">
<summary>
 how often do we poll metrics
</summary>
</member>
<member name="P:Logary.Configuration.LogaryConf.metrics">
<summary>
 A map of metrics by name
</summary>
</member>
<member name="P:Logary.Configuration.LogaryConf.metadata">
<summary>
 Service metadata - what name etc.
</summary>
</member>
<member name="P:Logary.Configuration.LogaryConf.targets">
<summary>
 A map of the targets by name. Some targets may not have been initialised
 (LogaryConf describes what-is-to-be before running it, thereafter it describes
 what has been configured, and the targets instances aren&apos;t None anymore.)
</summary>
</member>
<member name="P:Logary.Configuration.LogaryConf.rules">
<summary>
 A list of rules that guide what targets are invoked for a given
 log line or measure.
</summary>
</member>
<member name="T:Logary.Configuration.LogaryConf">
<summary>
 The logary configuration structure having a memory of all configured
 targets as well as the rules that map log lines and metrics to them.
</summary>
</member>
<member name="M:Logary.Configuration.LogaryFactory.New(System.String,System.Func{Logary.Configuration.ConfBuilder,Logary.Configuration.ConfBuilder})">
<summary>
 Configure a new Logary instance. This will also give real targets to the flyweight
 targets that have been declared statically in your code. If you call this
 you get a log manager that you can later dispose, to shutdown all targets.
</summary>
</member>
<member name="T:Logary.Configuration.LogaryFactory">
<summary>
 The main entry point for object oriented languages to interface with Logary,
 to configure it.
</summary>
</member>
<member name="P:Logary.Configuration.ValidationException.InvalidTargets">
<summary>
 Gets the invalid tagets that failed validation by not having any rules
 that points to them.
</summary>
</member>
<member name="P:Logary.Configuration.ValidationException.InvalidRules">
<summary>
 Gets the invalid rules that failed validation by means of having no
 targets configured for their &apos;target&apos; properties.
</summary>
</member>
<member name="P:Logary.Configuration.ValidationException.InvalidMetrics">
<summary>
 The invalid metrics are such that there would be no loggers available to
 log their output: and loggers are created from the &apos;hieras&apos; that are
 specified in the rules. Make sure you have given adequate rules to match
 the names of the metrics. This is different from how rules/names of
 loggers are normally correlated; by means of GetLogger(name); as opposed
 to a registered component&apos;s name (the metric&apos;s).
</summary>
</member>
<member name="T:Logary.Configuration.ValidationException">
<summary>
 Thrown from `validate` if the configuration is wrong.
</summary>
</member>
<member name="M:Logary.Configuration.Config.WithLogary(System.String,Microsoft.FSharp.Core.FSharpFunc{Logary.Configuration.LogaryConf,Logary.Configuration.LogaryConf})">
<summary>
 Configure Logary completely with the given service name and a function that
 configured the configuration. This will call the `validateLogary` function
 too. The un-primed version of the function `withLogary` doesn&apos;t return a
 `LogManager` but the F#-oriented LogaryInstance.
</summary>
</member>
<member name="M:Logary.Configuration.Config.WithLogaryInstance(System.String,Microsoft.FSharp.Core.FSharpFunc{Logary.Configuration.LogaryConf,Logary.Configuration.LogaryConf})">
<summary>
 Configure Logary completely with the given service name and a function that
 configured the configuration. This will call the `validateLogary` function
 too. The un-primed version of the function `withLogary` doesn&apos;t return a
 `LogManager` but the F#-oriented LogaryInstance.
</summary>
</member>
<member name="M:Logary.Configuration.Config.Configure(System.String,System.Collections.Generic.IEnumerable{Logary.Target.TargetConf},NodaTime.Duration,System.Collections.Generic.IEnumerable{Logary.Metric.MetricConf},System.Collections.Generic.IEnumerable{Logary.Rule},Logary.LogLevel,Logary.Target.TargetConf)">
<summary>
 Configure Logary completely with the given service name and rules, targets
 and metrics. This will call the `validate` function too.
</summary>
</member>
<member name="M:Logary.Configuration.Config.AsLogManager(Logary.LogaryInstance)">
<summary>
 Wrap the LogaryInstance as a LogManager
</summary>
</member>
<member name="P:Logary.Configuration.Config.ShutdownLogary">
<summary>
 Shutdown logary, waiting maximum 30 seconds, 15s for flush and 15s for
 shutdown.
</summary>
</member>
<member name="M:Logary.Configuration.Config.ShutdownLogary(NodaTime.Duration,NodaTime.Duration,Logary.LogaryInstance)">
<summary>
 Shutdown logary, waiting maximum flushDur + shutdownDur.
</summary>
</member>
<member name="M:Logary.Configuration.Config.RunLogary(Logary.Configuration.LogaryConf)">
<summary>
 Start logary with a given configuration
</summary>
</member>
<member name="M:Logary.Configuration.Config.ValidateLogary(Logary.Configuration.LogaryConf)">
<summary>
 Validate the configuration for Logary, throwing a ValidationException if
 configuration is invalid.
</summary>
</member>
<member name="M:Logary.Configuration.Config.WithMetrics(NodaTime.Duration,System.Collections.Generic.IEnumerable{Logary.Metric.MetricConf},Logary.Configuration.LogaryConf)">
<summary>
 Adds a list of metric configurations to the configuration to run in the
 registry.
</summary>
</member>
<member name="M:Logary.Configuration.Config.WithMetric(Logary.Metric.MetricConf,Logary.Configuration.LogaryConf)">
<summary>
 Adds a metric configuration to the configuration to run in the registry.
</summary>
</member>
<member name="M:Logary.Configuration.Config.WithRules(System.Collections.Generic.IEnumerable{Logary.Rule},Logary.Configuration.LogaryConf)">
<summary>
 Specify the rules to use for filtering what should be logged to what
 targets - appends list to existing rules.
</summary>
</member>
<member name="M:Logary.Configuration.Config.WithRule(Logary.Rule,Logary.Configuration.LogaryConf)">
<summary>
 Add a rule to the configuration - adds to existing rules.
</summary>
</member>
<member name="M:Logary.Configuration.Config.WithTargets(System.Collections.Generic.IEnumerable{Logary.Target.TargetConf},Logary.Configuration.LogaryConf)">
<summary>
 Add a list of targets to the configuration. You also need to supply a rule
 for each of the target names.
</summary>
</member>
<member name="M:Logary.Configuration.Config.WithTarget(Logary.Target.TargetConf,Logary.Configuration.LogaryConf)">
<summary>
 Add a new target to the configuration. You also need to supple a rule for
 the target.
</summary>
</member>
<member name="M:Logary.Configuration.Config.ConfigureLogary(System.String)">
<summary>
 Start logary configuration given a name of the service that is being configured.
 The name of the service is the foundation for a lot of the sorting that goes
 on with the logs after they have been sent. By default the internal logging
 level will be Info, but you can use `withInternalTarget` to re-initialise
 the internal logging if you wish, with a different level.
</summary>
</member>
<member name="M:Logary.Configuration.Config.WithInternalTarget(Logary.LogLevel,Logary.Target.TargetConf)">
<summary>
 Set the internal target for logary
</summary>
</member>
<member name="M:Logary.Configuration.Config.WithInternalTargets(Logary.LogLevel,Microsoft.FSharp.Collections.FSharpList{Logary.Target.TargetConf},Logary.Configuration.LogaryConf)">
<summary>
 Configure internal logging from a targets (these targets will get
 everything, without the metrics and/or log lines going through Rules).
</summary>
</member>
<member name="M:Logary.Configuration.Config.WithInternalLogger(Logary.Logger,Logary.Configuration.LogaryConf)">
<summary>
 Configure an internal logger (disposing anything already there); make sure
 the logger you give is ready to use directly. This function is different from
 `createInternalLogger` in that it doesn&apos;t re-initialise the internal logger
 for you, but leaves it up to you to give a proper logger for internal
 logging, instead. `withInternalTarget` uses this function itself after
 initialising empty metadata and a target.
</summary>
</member>
<member name="M:Logary.Configuration.Config.createInternalLogger(Logary.LogLevel,Microsoft.FSharp.Collections.FSharpList{Logary.Target.TargetInstance})">
<summary>
 Create an internal logger from the level and targets given
</summary>
</member>
<member name="T:Logary.Configuration.Config">
<summary>
 The conf module handles interaction with the registry by building the
 required configuration for Logary.
</summary>
</member>
<member name="M:Logary.Configuration.FactoryApiExtensions.Target``1(Logary.Configuration.ConfBuilder,System.String)">
 <summary>
 Configure the target with default settings.
 </summary>
 <typeparam name="T">The <see cref="TargetConf"/> to configure
 with defaults</typeparam>
 <param name="builder"></param>
 <returns>The same as input</returns>
</member>
<member name="T:Logary.Configuration.FactoryApiExtensions">
<summary>
 Extensions to make it easier to construct Logary
</summary>
</member>
<member name="M:Logary.Configuration.LogaryConfLenses.metricActor_(System.String)">
<summary>
 rad and write a very specific metric actor
</summary>
</member>
<member name="M:Logary.Configuration.LogaryConfLenses.targetActor_(System.String)">
<summary>
 read and write a very specific target actor
</summary>
</member>
<member name="M:Logary.Configuration.LogaryConfLenses.targetActors_``2">
<summary>
 read all configuration&apos;s actors
</summary>
</member>
<member name="T:Logary.Configuration.MetricsDefaults">
<summary>
 This module provides a good set of defaults for metrics
</summary>
</member>
<member name="M:Logary.Configuration.TargetsDefaults.RunWithGoodDefaultsAndLogstash(System.String,System.String,System.UInt16)">
<summary>
 Run with console and debugger targets with sane configurations as well
 as a logstash configuration, and start logary.
</summary>
</member>
<member name="M:Logary.Configuration.TargetsDefaults.RunWithGoodDefaults(System.String)">
<summary>
 Start logary with sane SOA/service-defaults, remember to call
 shutdownLogary at the end of the program. Pass the name of the
 service you are configuring.
</summary>
</member>
<member name="M:Logary.Configuration.TargetsDefaults.GoodDefaultsAndLogstash(System.String,System.String,System.UInt16)">
<summary>
 Run with console and debugger targets with sane configurations as well
 as a logstash configuration.
</summary>
</member>
<member name="M:Logary.Configuration.TargetsDefaults.GoodDefaults(System.String)">
<summary>
 Run with console and debugger targets with sane configurations.
</summary>
</member>
<member name="T:Logary.Configuration.TargetsDefaults">
<summary>
 A module the ties together Logstash, Riemann, Console/Debug, Graphite and
 some health checks into a nicely configured Logary instance.

 TODO: graphite, riemann, health checks
</summary>
</member>
<member name="M:Logary.DPModule.joined(Logary.DP)">
<summary>
 Gets the data point as a single string, where each segment is joined by a
 dot &apos;.&apos;.
</summary>
</member>
<member name="M:Logary.Formatting.JsonFormatter.Settings(Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{Newtonsoft.Json.JsonSerializerSettings,Newtonsoft.Json.JsonSerializerSettings}})">
<summary>
 Construct some JSON.Net JsonSerializerSettings, with all the
 types that are relevant to serialize in a custom way in Logary.
</summary>
</member>
<member name="M:Logary.Formatting.JsonFormatter.Default(Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{Newtonsoft.Json.JsonSerializerSettings,Newtonsoft.Json.JsonSerializerSettings}})">
<summary>
 Create a new JSON formatter with optional function that can modify the serialiser
 settings before any other alteration is done.
</summary>
</member>
<member name="T:Logary.Formatting.JsonFormatter">
<summary>
 Wrapper that constructs a Json.Net JSON formatter.
</summary>
</member>
<member name="T:Logary.Formatting.LogLevelStringConverter">
<summary>
 A LogLevel to/from string converter for Json.Net.
</summary>
</member>
<member name="P:Logary.Formatting.StringFormatter.VerbatimNewline">
<summary>
 VerbatimNewline simply outputs the message and no other information
 and does append a newline to the string.
</summary>
</member>
<member name="P:Logary.Formatting.StringFormatter.Verbatim">
<summary>
 Verbatim simply outputs the message and no other information
 and doesn&apos;t append a newline to the string.
</summary>
</member>
<member name="P:Logary.Formatting.StringFormatter.LevelDatetimeMessagePathNl">
<summary>
 LevelDatetimePathMessageNl outputs the most information of the log line
 in text format, starting with the level as a single character,
 then the ISO8601 format of a DateTime (with +00:00 to show UTC time),
 then the path in square brackets: [Path.Here], the message and a newline.
 Exceptions are called ToString() on and prints each line of the stack trace
 newline separated.
</summary>
</member>
<member name="P:Logary.Formatting.StringFormatter.LevelDatetimeMessagePath">
 <see cref="StringFormatter.LevelDatetimePathMessageNl" />
</member>
<member name="M:Logary.Formatting.StringFormatter.Create(System.Func{Logary.LogLine,System.String})">
<summary>
 Takes a c# Func delegate to initialise a StringFormatter with the default Measure -&gt; string
</summary>
</member>
<member name="M:Logary.Formatting.StringFormatter.Create(System.Func{Logary.LogLine,System.String},System.Func{Logary.Measure,System.String})">
<summary>
 Takes c# Func delegates to initialise a StringFormatter
</summary>
</member>
<member name="T:Logary.Formatting.StringFormatter">
<summary>
 A StringFormatter is the thing that takes a log line and returns it as a string
 that can be printed, sent or otherwise dealt with in a manner that suits the target.
</summary>
</member>
<member name="M:Logary.Formatting.formatData(System.String,Microsoft.FSharp.Collections.FSharpMap{System.String,System.Object})">
<summary>
 Formats the data in a nice fashion for printing to e.g. the Debugger or Console.
</summary>
</member>
<member name="M:Logary.Formatting.caseNameOf``1(``0)">
<summary>
 Returns the case name of the object with union type &apos;ty.
</summary>
</member>
<member name="T:Logary.Formatting">
<summary>
 A module for converting log lines to text/strings.
</summary>
</member>
<member name="T:Logary.HealthCheckModule.MeasureWrapper">
<summary>
 An implementation of the ResultData interface that wraps a Measure and
 uses its &apos;data&apos; Map to read.
</summary>
</member>
<member name="M:Logary.HealthCheckModule.mkDead(System.String)">
<summary>
 Create a health check that will never yield a value
</summary>
</member>
<member name="M:Logary.HealthCheckModule.fromFn(System.String,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Control.FSharpAsync{Logary.HealthCheckResult}})">
<summary>
 Create a new health check from a checking function. This will create an
 actor but it needs to be registered in the registry for it to work on its
 own.
</summary>
</member>
<member name="M:Logary.HealthCheckModule.TryGetException(Logary.Measure)">
<summary>
 Tries to get an exception from the measure
</summary>
</member>
<member name="M:Logary.HealthCheckModule.TryGetDescription(Logary.Measure)">
<summary>
 Tries to get the description value from the measure.
</summary>
</member>
<member name="M:Logary.HealthCheckModule.SetException``1(``0,Logary.Measure)">
<summary>
 Sets the exception property of the measurement&apos;s data map
</summary>
</member>
<member name="M:Logary.HealthCheckModule.SetDescription``1(``0,Logary.Measure)">
<summary>
 Sets the description property of the measurement&apos;s data map
</summary>
</member>
<member name="P:Logary.HealthCheckModule.Exception">
<summary>
 A key in the `data` map inside the `Measure` type.
</summary>
</member>
<member name="P:Logary.HealthCheckModule.Description">
<summary>
 A key in the `data` map inside the `Measure` type.
</summary>
</member>
<member name="M:Logary.HealthCheckModule.WinPerfCounter.hasResources``1(System.Collections.Generic.IEnumerable{``0},Logary.HealthCheck)">
<summary>
 Takes a list of IDisposable things (performance counters, perhaps?) and
 wraps the call to Dispose() of the inner health check with calls to
 Dispose for each of the resources
</summary>
</member>
<member name="M:Logary.HealthCheckModule.WinPerfCounter.toHealthCheckNamed(Logary.DP,Logary.WinPerfCounter.PerfCounter,Microsoft.FSharp.Core.FSharpFunc{System.Double,Logary.Measure})">
<summary>
 Create a new HealthCheck from a WindowsPerfCounter record and a transformation
 function `measureTransform`.

 String.empty means no value as e.g. `instance`. Also takes a
 `measureTransform` function that allows the caller to customize the value
 in a Measure before returning. Suggested is to use `HealthChecks.setDesc`
 to give the measure a nice description with detailed data.
</summary>
</member>
<member name="M:Logary.HealthCheckModule.Measure.toResult(Logary.Measure)">
<summary>
 Transform the measure to a HealthCheck.ResultData.
</summary>
</member>
<member name="T:Logary.HealthCheckModule">
<summary>
 A module that makes it smooth to interact with running/starting/configuration of
 health checks.
</summary>
</member>
<member name="T:Logary.Internals.Acks.Nack">
<summary>
 It didn&apos;t go well.
</summary>
</member>
<member name="T:Logary.Internals.Acks.Ack">
<summary>
 It went well.
</summary>
</member>
<member name="T:Logary.Internals.Acks">
<summary>
 A discriminated union specifying Ack | Nack; a method for
 specifying the success of an asynchronous call.
</summary>
</member>
<member name="M:Logary.Internals.FlyweightLogger.Configured(Logary.LogaryInstance)">
<summary>
 Call when the logging framework was configured to set the correct impl
 of the logger
</summary>
</member>
<member name="T:Logary.Internals.FlyweightLogger">
<summary>
 A logger interface that can be updated in a mutable fashion. Useful
 for dealing with statics.
</summary>
</member>
<member name="T:Logary.Internals.InternalLogger">
<summary>
 This logger is special: in the above case the Registry takes the responsibility
 of shutting down all targets, but this is a stand-alone logger that is used
 to log everything in Logary with, so it needs to capable of handling its
 own disposal. It must not throw under any circumstances.
</summary>
</member>
<member name="T:Logary.Internals.NackDescription">
<summary>
 A description of why no Ack was received like was expected.
</summary>
</member>
<member name="T:Logary.Internals.NullLogger">
<summary>
 A logger that does absolutely nothing, useful for feeding into the target
 that is actually *the* internal logger target, to avoid recursive calls to
 itself.
</summary>
</member>
<member name="P:Logary.Internals.RuntimeInfo.logger">
<summary>
 An internal logger for logary to use
</summary>
</member>
<member name="P:Logary.Internals.RuntimeInfo.serviceName">
<summary>
 Name of the service. Will show up as &apos;service&apos; in e.g. LogStash/Kibana and
 is the basis for a lot of the sorting and health checking that Riemann
 does.
</summary>
</member>
<member name="T:Logary.Internals.RuntimeInfo">
<summary>
 A type giving more information about the service that this logary instance
 is running on.
</summary>
</member>
<member name="P:Logary.Internals.Globals.flyweights">
<summary>
 A list of all loggers yet to be configured
</summary>
</member>
<member name="P:Logary.Internals.Globals.singleton">
<summary>
 This is the &quot;Global Variable&quot; containing the last configured
 Logary instance. If you configure more than one logary instance
 this will be replaced. It is internal so that noone
 changes it from the outside. Don&apos;t use this directly if you can
 avoid it, and instead take a c&apos;tor dependency on LogaryRegistry
 or use IoC with a contextual lookup to resolve proper loggers.
</summary>
</member>
<member name="P:Logary.Internals.Globals.criticalSection">
<summary>
 This instance is the locked object for the singleton configuration.
</summary>
</member>
<member name="T:Logary.Internals.Globals">
<summary>
 Module that is the ONLY module allowed to have global variables; created so
 that consumer applications may call into Logary without having a reference
 to the LogManager first.

 The globals in this module are configured in module &quot;Logging&quot;.
</summary>
</member>
<member name="P:Logary.Internals.Logging.LoggerInstance.ilogger">
<summary>
 the internal logger for this logger instance
</summary>
</member>
<member name="T:Logary.Internals.Logging.LoggerInstance">
<summary>
 A logger instance that keeps a reference to the actor targets that it
 logs to, as well as its name.
</summary>
</member>
<member name="P:Logary.Internals.Map.fromObj">
<summary>
 This is basically an assembly-internal function; depend on at
 your own misery.
</summary>
</member>
<member name="M:Logary.Internals.Ns.create``1(System.String)">
<summary>
 Create a namespace from the subcomponent identifier
 A single place to create Actor options -- until FSharp.Actor changes again
</summary>
</member>
<member name="P:Logary.Internals.Ns.ActorRootNs">
<summary>
 The actor&apos;s root namespace
</summary>
</member>
<member name="M:Logary.Internals.Rnd.nextInt64'(System.Int64)">
<summary>
 get the next int64 within [0, max]
</summary>
</member>
<member name="M:Logary.Internals.Rnd.nextInt'(System.Int32)">
<summary>
 get the next int within [0, max]
</summary>
</member>
<member name="P:Logary.Internals.Rnd.buf">
<summary>
 buffer for random values
</summary>
</member>
<member name="M:Logary.Internals.Scheduling.schedule``1(FSharp.Actor.Types.IActor,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit},``0,NodaTime.Duration,Microsoft.FSharp.Core.FSharpOption{NodaTime.Duration})">
<summary>
 Schedules a message to be sent to the receiver after the initialDelay.
 If delayBetween is specified then the message is sent reoccuringly at the
 delay between interval.
</summary>
</member>
<member name="M:Logary.Internals.Scheduling.create">
<summary>
 Create a new scheduler actor
</summary>
</member>
<member name="T:Logary.Internals.Scheduling">
<summary>
 A scheduling actor that can call `Sample` on the metric/probe/health check.
</summary>
</member>
<member name="M:Logary.Internals.Tcp.WriteClient.GetStream">
<summary>
 Gets a stream for this write client
</summary>
</member>
<member name="M:Logary.Internals.Tcp.WriteStream.Write(System.Byte[])">
<summary>
 WriteAsync : buffer -&gt; offset? -&gt; length?
</summary>
</member>
<member name="M:Logary.Internals.Tcp.transfer(System.Int32,System.IO.Stream,System.IO.Stream)">
<summary>
 Transfer the said amount from `source` stream to `target` stream
</summary>
</member>
<member name="T:Logary.Internals.Tcp">
<summary>
 A module that wraps the .Net TcpClient types/streams in a F#-ideomatic way,
 and behind an interface.
</summary>
</member>
<member name="M:Logary.Internals.Try.safeAsyncForce``1(System.String,Logary.Logger,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Control.FSharpAsync{``0}})">
<summary>
 Safely try to execute asynchronous function f, catching any thrown exception and logging
 that exception internally.
 Returns Unit irregardless of the codomain of f, by evaluating the async synchronously
 on the calling synchronisation context.
 WARNING: do not call inside a synchronisation context that is used to run asynchronous
 workflows, or you will block all async going on.
</summary>
</member>
<member name="M:Logary.Internals.Try.safeAsync``1(System.String,Logary.Logger,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Control.FSharpAsync{``0}})">
<summary>
 Safely try to execute asynchronous function f, catching any thrown
 exception and logging exception internally. Returns async&lt;unit&gt;
 irregardless of the codomain of f.
</summary>
</member>
<member name="M:Logary.Internals.Try.safeT``1(System.String,Logary.Logger,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,System.Object})">
<summary>
 Safely try to execute f, catching a thrown the exception type specified
 by the generic type parameter and logging that exception internally.
 Other exception types are not caught. Returns unit, irregardless of the
 codomain of f.
</summary>
</member>
<member name="M:Logary.Internals.Try.safe``1(System.String,Logary.Logger,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,``0})">
<summary>
 Safely try to execute f, catching any exception thrown and logging that
 exception internally. Returns unit, irregardless of the codomain of f.
</summary>
</member>
<member name="P:Logary.Lenses.Lens`2.set">
<summary>
 Sets the value of this lens, given the new value and the object
 to create an updated copy of
</summary>
</member>
<member name="P:Logary.Lenses.Lens`2.get">
<summary>
 Get the value of this lens, given the object to read the value from
</summary>
</member>
<member name="M:Logary.Lenses.Lens`2.update(Microsoft.FSharp.Core.FSharpFunc{`1,`1},`0)">
<summary>
 first get the value of the lens, f(value), write it back.
</summary>
</member>
<member name="T:Logary.Lenses.Lens`2">
<summary>
 Basic Lens-record specifying what a lens is.
</summary>
</member>
<member name="M:Logary.Lenses.op_LessBarGreater``3(Logary.Lenses.Lens{``0,``1},Logary.Lenses.Lens{``1,``2})">
<summary>
 Combine two lenses as an even more focused lens.
</summary>
</member>
<member name="T:Logary.Lenses">
<summary>
 A most bare-bone Lens module
</summary>
</member>
<member name="M:Logary.LogLineModule.FatalTag(System.String)">
<summary>
 Create a fatal log entry with a message and a tag
</summary>
</member>
<member name="M:Logary.LogLineModule.FatalFormat``1(Microsoft.FSharp.Core.PrintfFormat{``0,Microsoft.FSharp.Core.Unit,System.String,Logary.LogLine})">
<summary>
 Write a fatal log entry, for help constructing format string, see:
 http://msdn.microsoft.com/en-us/library/vstudio/ee370560.aspx
</summary>
</member>
<member name="P:Logary.LogLineModule.Fatal">
<summary>
 Create a fatal log entry with a message
</summary>
</member>
<member name="M:Logary.LogLineModule.ErrorTag(System.String)">
<summary>
 Create an error log line with a message and a tag
</summary>
</member>
<member name="M:Logary.LogLineModule.ErrorFormat``1(Microsoft.FSharp.Core.PrintfFormat{``0,Microsoft.FSharp.Core.Unit,System.String,Logary.LogLine})">
<summary>
 Write a error log entry, for help constructing format string, see:
 http://msdn.microsoft.com/en-us/library/vstudio/ee370560.aspx
</summary>
</member>
<member name="P:Logary.LogLineModule.Error">
<summary>
 Create an error log line with a message
</summary>
</member>
<member name="M:Logary.LogLineModule.WarnTag(System.String)">
<summary>
 Create a warn log line with a message and a tag
</summary>
</member>
<member name="M:Logary.LogLineModule.WarnFormat``1(Microsoft.FSharp.Core.PrintfFormat{``0,Microsoft.FSharp.Core.Unit,System.String,Logary.LogLine})">
<summary>
 Write a warn log entry, for help constructing format string, see:
 http://msdn.microsoft.com/en-us/library/vstudio/ee370560.aspx
</summary>
</member>
<member name="P:Logary.LogLineModule.Warn">
<summary>
 Create an warn log line with a message
</summary>
</member>
<member name="M:Logary.LogLineModule.InfoTag(System.String)">
<summary>
 Create an info log line with a message and a tag
</summary>
</member>
<member name="M:Logary.LogLineModule.InfoFormat``1(Microsoft.FSharp.Core.PrintfFormat{``0,Microsoft.FSharp.Core.Unit,System.String,Logary.LogLine})">
<summary>
 Write a info log entry, for help constructing format string, see:
 http://msdn.microsoft.com/en-us/library/vstudio/ee370560.aspx
</summary>
</member>
<member name="P:Logary.LogLineModule.Info">
<summary>
 Create an info log line with a message
</summary>
</member>
<member name="M:Logary.LogLineModule.DebugTag(System.String)">
<summary>
 Create a debug log line with a message and a tag
</summary>
</member>
<member name="M:Logary.LogLineModule.DebugFormat``1(Microsoft.FSharp.Core.PrintfFormat{``0,Microsoft.FSharp.Core.Unit,System.String,Logary.LogLine})">
<summary>
 Write a debug log entry, for help constructing format string, see:
 http://msdn.microsoft.com/en-us/library/vstudio/ee370560.aspx
</summary>
</member>
<member name="P:Logary.LogLineModule.Debug">
<summary>
 Create a debug log line with a message
</summary>
</member>
<member name="M:Logary.LogLineModule.VerboseTag(System.String)">
<summary>
 Create a verbose log line with a message and a tag
</summary>
</member>
<member name="M:Logary.LogLineModule.VerboseFormat``1(Microsoft.FSharp.Core.PrintfFormat{``0,Microsoft.FSharp.Core.Unit,System.String,Logary.LogLine})">
<summary>
 Create a verbose log line, for help constructing format string, see:
 http://msdn.microsoft.com/en-us/library/vstudio/ee370560.aspx
</summary>
</member>
<member name="P:Logary.LogLineModule.Verbose">
<summary>
 Create a verbose log line with a message
</summary>
</member>
<member name="M:Logary.LogLineModule.createf``1(System.String,Logary.LogLevel)">
<summary>
 Create a LogLine given:

  - `path`: the path of the log line; best curried at stop of function/module.
  - `level`: the level of the log line
  - `Printf.StringFormat&lt;&apos;a, LogLine&gt; -&gt; &apos;a`: the sprintf-like data to

 Example usage, at top of module/function:
 
 ```
 let log, logLine = Logger.log logger,
                    LogLine.createf &quot;MyCompany.Module.fn&quot;
 ```

 then in the body:

 ```
 logLine Info &quot;successfully authenticated user&quot; |&gt; LogLine.setDatas [
   &quot;email&quot;, box user_email
   &quot;id&quot;, box id
 ] |&gt; log)
 ```

</summary>
</member>
<member name="M:Logary.LogLineModule.Create(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},Logary.LogLevel,System.String[],System.String,System.Exception,NodaTime.Instant)">
<summary>
 C# interop: BCL friendly parameters!
 Create a new log line with the given values.
</summary>
</member>
<member name="M:Logary.LogLineModule.Create(System.String,System.String)">
<summary>
 Create a new log line at the specified path for the given message.
</summary>
</member>
<member name="M:Logary.LogLineModule.Create(Logary.LogLevel,System.String)">
<summary>
 Create a new log line at the specified level for the given message.
</summary>
</member>
<member name="M:Logary.LogLineModule.Create(System.String,Microsoft.FSharp.Collections.FSharpMap{System.String,System.Object},Logary.LogLevel,Microsoft.FSharp.Collections.FSharpList{System.String},System.String,Microsoft.FSharp.Core.FSharpOption{System.Exception})">
<summary>
 Create a new log line with the given values.
</summary>
</member>
<member name="P:Logary.LogLineModule.Empty">
<summary>
 An empty log line with a current (now) timestamp. Be warned: using this
 doesn&apos;t set a new timestamp.
</summary>
</member>
<member name="P:Logary.LogLineModule.ExceptionTag">
<summary>
 A suggestion for an exception tag to send with log lines that are for
 exceptions
</summary>
</member>
<member name="M:Logary.LogLineModule.SetTimestamp(NodaTime.Instant,Logary.LogLine)">
<summary>
 Set the LogLine&apos;s timestamp
</summary>
</member>
<member name="M:Logary.LogLineModule.SetExn(System.Exception,Logary.LogLine)">
<summary>
 Set the LogLine&apos;s main exception property
</summary>
</member>
<member name="M:Logary.LogLineModule.SetTag(System.String,Logary.LogLine)">
<summary>
 Add a tag &apos;t&apos; to the log line &apos;line&apos;.
</summary>
</member>
<member name="M:Logary.LogLineModule.SetPath(System.String,Logary.LogLine)">
<summary>
 Sets the path of the log line
</summary>
</member>
<member name="M:Logary.LogLineModule.SetDatas``1(System.Collections.Generic.IEnumerable{System.Tuple{System.String,``0}},Logary.LogLine)">
<summary>
 Add the key-value pairs to the data
</summary>
</member>
<member name="M:Logary.LogLineModule.SetData(System.String,System.Object,Logary.LogLine)">
<summary>
 Add a key-value pair to the data
</summary>
</member>
<member name="M:Logary.LogLineModule.SetLevel(Logary.LogLevel,Logary.LogLine)">
<summary>
 Sets the level of the log line
</summary>
</member>
<member name="M:Logary.LogLineModule.SetMsg(System.String,Logary.LogLine)">
<summary>
 Set the message of the LogLine
</summary>
</member>
<member name="M:Logary.LogLineModule.Lenses.dataItem_(System.String)">
<summary>
 Gets (KeyNotFoundException if not found) or puts the key (idempotently)
 to the data Map
</summary>
</member>
<member name="T:Logary.LogLineModule.Lenses">
<summary>
 a module with lenses for LogLine
</summary>
</member>
<member name="T:Logary.LogLineModule">
<summary>
 The main module to create and set properties for a given LogLine.
</summary>
</member>
<member name="M:Logary.LoggerExtensions.Log``1(Logary.Logger,System.String,Logary.LogLevel,``0)">
<summary>
 Log a message with some accompanying data to the log
</summary>
</member>
<member name="M:Logary.LoggerExtensions.Log``1(Logary.Logger,System.String,Logary.LogLevel,``0,System.Collections.Generic.IEnumerable{System.String},System.String,System.Exception,System.Nullable{NodaTime.Instant})">
<summary>
 Log a log line to the log
</summary>
</member>
<member name="T:Logary.LoggerExtensions">
<summary>
 Extensions for logging to a Logger
</summary>
</member>
<member name="M:Logary.LoggerModule.Fatal(Logary.Logger)">
<summary>
 Write a fatal log entry
</summary>
</member>
<member name="M:Logary.LoggerModule.Error(Logary.Logger)">
<summary>
 Write an error log entry
</summary>
</member>
<member name="M:Logary.LoggerModule.Warn(Logary.Logger)">
<summary>
 Write a warn log entry
</summary>
</member>
<member name="M:Logary.LoggerModule.Info(Logary.Logger)">
<summary>
 Write an info log entry to the logger
</summary>
</member>
<member name="M:Logary.LoggerModule.Debug(Logary.Logger)">
<summary>
 Write a debug log entry to the logger
</summary>
</member>
<member name="M:Logary.LoggerModule.Verbose(Logary.Logger)">
<summary>
 Write a verbose log entry to the logger
</summary>
</member>
<member name="M:Logary.LoggerModule.Measure(Logary.Logger,Logary.Measure)">
<summary>
 Write a measure
</summary>
</member>
<member name="M:Logary.LoggerModule.LogDebug(Logary.Logger,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Logary.LogLine})">
<summary>
 Write a debug log line, given from the fLine callback, if the logger
 accepts line with Debug level.
</summary>
</member>
<member name="M:Logary.LoggerModule.LogVerbose(Logary.Logger,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Logary.LogLine})">
<summary>
 Write a debug log line, given from the fLine callback, if the logger
 accepts line with Verbose level.
</summary>
</member>
<member name="M:Logary.LoggerModule.Log(Logary.Logger,Logary.LogLine)">
<summary>
 Write a log entry from a log line.
</summary>
</member>
<member name="T:Logary.LoggerModule">
<summary>
 API for writing logs and measures.
 For gauges that run continuously based on a timer, have a look at
 the Registry module. To get a logger, have a look at the Logger module.

 If you are using I recommend doing:
 `Install-Package Logary.CSharp` instead of dealing with the
 interop problems that you will get from using this module directly.
</summary>
</member>
<member name="M:Logary.Logging.GetCurrentLogger">
<summary>
 Gets the current logger from the context that this method was called
 in.
</summary>
</member>
<member name="M:Logary.Logging.GetLoggerByName(System.String)">
<summary>
 Gets a logger by a given name.
</summary>
</member>
<member name="M:Logary.Logging.GetCurrentLoggerName">
<summary>
 Gets the current name, as defined by the class-name + namespace that the logger is in.
</summary>
</member>
<member name="T:Logary.Logging">
<summary>
 Use this to get a logger for your class/type/path
 that you want to send metrics for or send log lines from. For information
 on what F# StringFormat&lt;&apos;T&gt; takes as arguments see http://msdn.microsoft.com/en-us/library/vstudio/ee370560.aspx
</summary>
</member>
<member name="M:Logary.MeasureModule.FromFloat(Logary.DP,Logary.Units,System.Double)">
<summary>
 Make a new measure value from the type of measure it is, the value and the
 path it is taken at or represents
</summary>
</member>
<member name="M:Logary.MeasureModule.Create(System.String,System.Double)">
<summary>
 Make a new measure value from the type of measure it is, the value and the
 path it is taken at or represents. This overload splits on dot &apos;.&apos;
</summary>
</member>
<member name="M:Logary.MeasureModule.Create(Logary.DP,System.Double)">
<summary>
 Make a new measure value from the type of measure it is, the value and the
 path it is taken at or represents
</summary>
</member>
<member name="P:Logary.MeasureModule.empty">
<summary>
 An empty `measure`
</summary>
</member>
<member name="M:Logary.MeasureModule.SetUnit(Logary.Units,Logary.Measure)">
<summary>
 Sets the unit of the measure
</summary>
</member>
<member name="M:Logary.MeasureModule.SetLevel(Logary.LogLevel,Logary.Measure)">
<summary>
 Sets the level of the measure
</summary>
</member>
<member name="M:Logary.MeasureModule.SetTimestamp(NodaTime.Instant,Logary.Measure)">
<summary>
 Sets the timestamp of the measure
</summary>
</member>
<member name="P:Logary.MeasureModule.SetPath">
<summary>
 Sets the path of the measure
</summary>
</member>
<member name="M:Logary.MeasureModule.SetDatas``1(System.Collections.Generic.IEnumerable{System.Tuple{System.String,``0}},Logary.Measure)">
<summary>
 Add the key-value pairs to the data in the measure
</summary>
</member>
<member name="M:Logary.MeasureModule.SetData(System.String)">
<summary>
 Add a key-value pair to the data in the measure
</summary>
</member>
<member name="M:Logary.MeasureModule.Lenses.dataItem_(System.String)">
<summary>
 Gets (KeyNotFoundException if not found) or puts the key (idempotently)
 to the data Map
</summary>
</member>
<member name="P:Logary.MeasureModule.Lenses.value_">
<summary>
 value of measurement
</summary>
</member>
<member name="T:Logary.MeasureModule.Lenses">
<summary>
 lenses for the `measure``
</summary>
</member>
<member name="T:Logary.MeasureModule">
<summary>
 This is a calculated event with input of one or many measures and/or global
 time. f :: Measure list -&gt; Instant -&gt; SecondaryMeasure
 Module for dealing with measures
</summary>
</member>
<member name="P:Logary.Metric.MetricConf.sampling">
<summary>
 the period to sample the metric&apos;s value at
</summary>
</member>
<member name="T:Logary.Metric.MetricMsg.Reset">
<summary>
 The Reset shall reset the state of the probe to its initial state.
</summary>
</member>
<member name="T:Logary.Metric.MetricMsg.Shutdown">
<summary>
 The custom probe shall release any resources associated with the given
 state and return ok.
</summary>
</member>
<member name="T:Logary.Metric.MetricMsg.Sample">
<summary>
 The Sample implementation shall sample data from the subsystem the probe
 is integrated with.
</summary>
</member>
<member name="T:Logary.Metric.MetricMsg.Update">
<summary>
 Incorporate a new value into the metric maintained by the metric.
</summary>
</member>
<member name="T:Logary.Metric.MetricMsg.GetDataPoints">
<summary>
 The GetDataPoints shall return a list with all data points supported by
 the probe
</summary>
</member>
<member name="T:Logary.Metric.MetricMsg.GetValue">
<summary>
 The GetValue implementation shall retrieve the value of one or more data
 points from the probe.
</summary>
</member>
<member name="T:Logary.Metric.MetricMsg">
<summary>
 The main protocol to talk to metric instances with
</summary>
</member>
<member name="T:Logary.Metric.MetricType">
<summary>
 The metric types available, which specify how logary polls/gets the metric.
</summary>
</member>
<member name="M:Logary.Metric.shutdown``1(``0)">
<summary>
 The custom probe shall release any resources associated with the given
 state and return ok.
</summary>
</member>
<member name="M:Logary.Metric.sample(FSharp.Actor.Types.IActor)">
<summary>
 The Sample implementation shall sample data from the subsystem the probe
 is integrated with.
</summary>
</member>
<member name="M:Logary.Metric.update``1(Logary.Measure,``0)">
<summary>
 Incorporate a new value into the metric maintained by the metric.
</summary>
</member>
<member name="M:Logary.Metric.getDataPoints``1(``0)">
<summary>
 The GetDataPoints shall return a list with all data points supported by
 the probe
</summary>
</member>
<member name="M:Logary.Metric.getValue(Microsoft.FSharp.Collections.FSharpList{Logary.DP})">
<summary>
 The GetValue implementation shall retrieve the value of one or more data
 points from the probe.
</summary>
</member>
<member name="M:Logary.Metric.init(Logary.Internals.RuntimeInfo,Logary.Metric.MetricConf)">
<summary>
 initialises the configuration with the metadata to create a new metric-actor
</summary>
</member>
<member name="M:Logary.Metric.confMetric(System.String,NodaTime.Duration,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{NodaTime.Duration,Logary.Metric.MetricConf}})">
<summary>
 Start configuring a metric with a metric factory
</summary>
</member>
<member name="P:Logary.Metric.Reservoir.ExpWeightedMovAvg.EWMAState.interval">
<summary>
 interval in ticks
</summary>
</member>
<member name="P:Logary.Metric.Reservoir.ExpWeightedMovAvg.fifteenMinuteEWMA">
<summary>
 duration: SamplePeriod
</summary>
</member>
<member name="P:Logary.Metric.Reservoir.ExpWeightedMovAvg.fiveMinutesEWMA">
<summary>
 duration: SamplePeriod
</summary>
</member>
<member name="P:Logary.Metric.Reservoir.ExpWeightedMovAvg.oneMinuteEWMA">
<summary>
 duration: SamplePeriod
</summary>
</member>
<member name="M:Logary.Metric.Reservoir.ExpWeightedMovAvg.create(System.Double,NodaTime.Duration)">
<summary>
 Create a new EWMA state that you can do `update` and `tick` on.

 Alpha is dependent on the duration between sampling events (&quot;how long
 time is it between the data points&quot;) so they are given as a pair.
</summary>
</member>
<member name="P:Logary.Metric.Reservoir.ExpWeightedMovAvg.M15Alpha">
<summary>
 alpha coefficient for the `SamplePeriod` tick period, with fifteen minutes
 EWMA
</summary>
</member>
<member name="P:Logary.Metric.Reservoir.ExpWeightedMovAvg.M5Alpha">
<summary>
 alpha coefficient for the `SamplePeriod` tick period, with five minutes
 EWMA
</summary>
</member>
<member name="P:Logary.Metric.Reservoir.ExpWeightedMovAvg.M1Alpha">
<summary>
 alpha coefficient for the `SamplePeriod` tick period, with one minute
 EWMA
</summary>
</member>
<member name="M:Logary.Metric.Reservoir.ExpWeightedMovAvg.xMinuteAlpha(NodaTime.Duration,System.Double)">
<summary>
 calculate the alpha coefficient from a number of minutes

 - `duration` is how long is between each tick
 - `mins` is the number of minutes the EWMA should be calculated over
</summary>
</member>
<member name="P:Logary.Metric.Reservoir.ExpWeightedMovAvg.SamplePeriod">
<summary>
 The period in between ticks; it&apos;s a duration of time between two data
 points.
</summary>
</member>
<member name="T:Logary.Metric.Reservoir.ExpWeightedMovAvg">
<summary>
 The an exponentially weighted moving average that gets ticks every
 period (a period is a duration between events), but can get
 `update`s at any point between the ticks.
</summary>
</member>
<member name="T:Logary.Metric.Reservoir.Uniform.UniformState">
<summary>
 Mutable uniform distribution
</summary>
</member>
<member name="T:Logary.Metric.Reservoir.SnapshotModule">
<summary>
 TODO: this is really a specific set of calculation functions; can I present
 it ore like such?

 TODO: what about working on floats and other value types?
</summary>
</member>
<member name="M:Logary.Metric.MetricUtils.stdNamedMetric``1(Logary.Metric.MetricType,Microsoft.FSharp.Core.FSharpFunc{Logary.Internals.RuntimeInfo,Microsoft.FSharp.Core.FSharpFunc{FSharp.Actor.Types.IActor{``0},Microsoft.FSharp.Control.FSharpAsync{Microsoft.FSharp.Core.Unit}}},System.String,NodaTime.Duration)">
<summary>
 Called by metric implementations; each metric implementation has as its
 own responsibility to configure itself, so that is not done through this
 function. Not to be called directly, only called from inside Logary;
 each module: `Probe`, `Metric` and `HealthCheck` is responsible for having
 a function that can create standard named metrics which is usable from
 outside Logary.
</summary>
</member>
<member name="M:Logary.Metrics.Noop.Create(Logary.Metrics.Noop.NoopConf,System.String)">
<summary>
 C# interop: Create a new Noop metric that doesn&apos;t do very much
</summary>
</member>
<member name="M:Logary.Metrics.Noop.create(Logary.Metrics.Noop.NoopConf)">
<summary>
 Create a new Noop metric that doesn&apos;t do very much
</summary>
</member>
<member name="T:Logary.Metrics.Noop">
<summary>
 A metric that just ignores all calls best it can
</summary>
</member>
<member name="T:Logary.Metrics.WinPerfCounters.WinPerfCounterConf">
<summary>
 Configuration for the WinPerfCounters probe
</summary>
</member>
<member name="T:Logary.Metrics.WinPerfCounters.Impl.Naming">
<summary>
 A unified naming scheme for the names of performance counters
</summary>
</member>
<member name="M:Logary.Metrics.WinPerfCounters.Common.aspNetRecommended(Logary.WinPerfCounter.Instance)">
<summary>
 Useful ASP.Net counters, from
 http://technet.microsoft.com/en-us/library/cc778343%28v=ws.10%29.aspx

 You can either pass the app domain instance process name, or you could use
 WinPerfCounter.pidInstance () to get your own instance name. If you have
 multiple processes with the same name executing, you will need to
 discriminate by name.

 TODO: test this further; in two ways; as a ASP.Net metric, and as a server
 health check that runs globally and uses the KnownInstances._Total
 instance.
</summary>
</member>
<member name="M:Logary.Metrics.WinPerfCounters.Common.aspNet(Logary.WinPerfCounter.Instance)">
<summary>
 see aspNetRecommended
</summary>
</member>
<member name="P:Logary.Metrics.WinPerfCounters.Common.aspNetGlobal">
<summary>
 see aspNetRecommended
</summary>
</member>
<member name="T:Logary.Registry.RegistryMessage.ShutdownLogary">
<summary>
 shutdown the registry in full
</summary>
</member>
<member name="T:Logary.Registry.RegistryMessage.FlushPending">
<summary>
 flush all pending messages from the registry to await shutdown
</summary>
</member>
<member name="T:Logary.Registry.RegistryMessage">
<summary>
 The messages that can be sent to the registry to interact with it and its
 running targets.
</summary>
</member>
<member name="M:Logary.Registry.getLogger(FSharp.Actor.Types.IActor,System.String)">
<summary>
 Given the registry actor, and a name for the logger, get the logger from the registry.
</summary>
</member>
<member name="M:Logary.Registry.Advanced.create(Logary.Configuration.LogaryConf)">
<summary>
 Start a new registry with the given configuration. Will also launch/start
 all targets that are to run inside the registry. Returns a newly
 configured LogaryInstance.

 It is not until runRegistry is called, that each target gets its service
 metadata, so it&apos;s no need to pass the metadata to the target before this.
</summary>
</member>
<member name="M:Logary.Registry.Advanced.flushAndShutdown(NodaTime.Duration,NodaTime.Duration,FSharp.Actor.Types.IActor)">
<summary>
 Timeout=Infinite below is for THIS call, internally registry has a timeout per target.
 Flush all registry targets, then shut it down -- the registry internals
 take care of timeouts, not these methods
</summary>
</member>
<member name="M:Logary.Registry.Advanced.shutdown(NodaTime.Duration,FSharp.Actor.Types.IActor)">
<summary>
 Timeout=Infinite below is for THIS call, internally registry has a timeout per target.
 Shutdown the registry. This will first flush all pending entries for all targets inside the
 registry, and then proceed to sending ShutdownTarget to all of them. If this doesn&apos;t
 complete within the allotted timeout, (200 ms for flush, 200 ms for shutdown), it will
 return Nack to the caller (of shutdown).
</summary>
</member>
<member name="M:Logary.Registry.Advanced.flushPending(NodaTime.Duration,FSharp.Actor.Types.IActor)">
<summary>
 Flush all pending log lines for all targets. Returns a Nack/Ack structure describing
 how that went. E.g. if there&apos;s a target is has a backlog, it might not be able to
 flush all its pending entries within the allotted timeout (200 ms at the time of writing)
 but will then instead return Nack/failed RPC.
</summary>
</member>
<member name="M:Logary.Registry.Advanced.getTargets(Logary.Configuration.LogaryConf,System.String)">
<summary>
 Given a configuration and name to find all targets for, looks up all targets
 from the configuration matching the passed name and create a composite
 acceptor/filter (any matching acceptor).
</summary>
</member>
<member name="P:Logary.Registry.Advanced.Impl.RegistryState.supervisor">
<summary>
 the supervisor, not of the registry actor, but of the targets and probes and health checks.
</summary>
</member>
<member name="T:Logary.Registry.Advanced.Impl.RegistryState">
<summary>
 The state for the Registry
</summary>
</member>
<member name="M:Logary.Registry.Advanced.Impl.registry(Logary.Configuration.LogaryConf,FSharp.Actor.Types.IActor,FSharp.Actor.Types.IActor,FSharp.Actor.Types.IActor{Logary.Registry.RegistryMessage})">
<summary>
 The registry function that works as an actor.
</summary>
</member>
<member name="M:Logary.Registry.Advanced.Impl.FromTargets(System.String,Logary.Logger,Microsoft.FSharp.Collections.FSharpList{System.Tuple{Microsoft.FSharp.Core.FSharpFunc{Logary.LogLine,System.Boolean},Microsoft.FSharp.Core.FSharpFunc{Logary.Measure,System.Boolean},Logary.Target.TargetInstance,Logary.LogLevel}})">
<summary>
 Create a new Logger from the targets passed, with a given name.
</summary>
</member>
<member name="T:Logary.Registry.Logging.FWL">
<summary>
 Flyweight logger impl - reconfigures to work when it is configured, and until then
 throws away all log lines.
</summary>
</member>
<member name="M:Logary.Registry.Logging.shutdownFlyweights``1(``0)">
<summary>
 Singleton configuration exit point: call from shutdownLogary code
</summary>
</member>
<member name="M:Logary.Registry.Logging.startFlyweights(Logary.LogaryInstance)">
<summary>
 Singleton configuration entry point: call from the runLogary code.
</summary>
</member>
<member name="T:Logary.Registry.Logging">
<summary>
 handling flyweights
</summary>
</member>
<member name="T:Logary.Registry">
<summary>
 The registry is the composition root of Logary
</summary>
</member>
<member name="M:Logary.RuleModule.create(System.Text.RegularExpressions.Regex,System.String,Microsoft.FSharp.Core.FSharpFunc{Logary.LogLine,System.Boolean},Microsoft.FSharp.Core.FSharpFunc{Logary.Measure,System.Boolean},Logary.LogLevel)">
<summary>
 Create a new rule with the given hiera, target, accept function and min level
 acceptable.
</summary>
</member>
<member name="M:Logary.RuleModule.createForTarget(System.String)">
<summary>
 Create a rule that accepts any input for a specified target (that&apos;s the
 name param).
</summary>
</member>
<member name="P:Logary.RuleModule.empty">
<summary>
 An empty rule; don&apos;t forget to give it a proper name or the configuration
 won&apos;t work, e.g. using the `createForTarget` method.
</summary>
</member>
<member name="M:Logary.RuleModule.matching(System.String,Microsoft.FSharp.Collections.FSharpList{Logary.Rule})">
<summary>
 Find all rules matching the name, from the list of rules passed.
</summary>
</member>
<member name="M:Logary.RuleModule.allowFilter``1(``0)">
<summary>
 A filter that accepts any input given
</summary>
</member>
<member name="T:Logary.RuleModule">
<summary>
 Module for dealing with rules. Rules take care of filtering too verbose
 log lines and measures before they are sent to the targets.
</summary>
</member>
<member name="T:Logary.Target.TargetConf">
<summary>
 A target configuration is the &apos;reference&apos; to the to-be-run target while it
 is being configured, and before Logary fully starts up.
</summary>
</member>
<member name="P:Logary.Target.TargetInstance.name">
<summary>
 The human readable name of the target.
</summary>
</member>
<member name="P:Logary.Target.TargetInstance.actor">
<summary>
 The backing actor instance of the target.
</summary>
</member>
<member name="T:Logary.Target.TargetInstance">
<summary>
 A target instance is a spawned actor instance together with
 the name of this target instance.
</summary>
</member>
<member name="T:Logary.Target.TargetMessage.Shutdown">
<summary>
 Shut down! Also, reply when you&apos;re done shutting down!
</summary>
</member>
<member name="T:Logary.Target.TargetMessage.Flush">
<summary>
 Flush log lines/metrics! Also, reply when you&apos;re done flushing
 your queue.
</summary>
</member>
<member name="T:Logary.Target.TargetMessage.Measure">
<summary>
 Log this metric!
</summary>
</member>
<member name="T:Logary.Target.TargetMessage.Log">
<summary>
 Log this log line!
</summary>
</member>
<member name="T:Logary.Target.TargetMessage">
<summary>
 The protocol that a target can speak
</summary>
</member>
<member name="M:Logary.Target.shutdown(Logary.Target.TargetInstance)">
<summary>
 Shutdown the target, waiting indefinitely for it to stop
</summary>
</member>
<member name="M:Logary.Target.flush(Logary.Target.TargetInstance)">
<summary>
 Send a flush RPC to the target and return the async with the ACKs
</summary>
</member>
<member name="M:Logary.Target.sendMeasure(Logary.Target.TargetInstance,Logary.Measure)">
<summary>
 Send the metric to the target and return unit
</summary>
</member>
<member name="M:Logary.Target.sendLogLine(Logary.Target.TargetInstance,Logary.LogLine)">
<summary>
 Log to the target and just return unit
</summary>
</member>
<member name="M:Logary.Target.send(Logary.LogLine,Logary.Target.TargetInstance)">
<summary>
 Send the target a log line, returning the same instance
 as was passed in.
</summary>
</member>
<member name="M:Logary.Target.init(Logary.Internals.RuntimeInfo,Logary.Target.TargetConf)">
<summary>
 Initialises the target with metadata and a target configuration,
 yielding a TargetInstance in return which contains the running target.
</summary>
</member>
<member name="M:Logary.Target.validate(Logary.Target.TargetConf)">
<summary>
 Validates the target according to its validation rules.
</summary>
</member>
<member name="M:Logary.Target.confTarget(System.String,Microsoft.FSharp.Core.FSharpFunc{System.String,Logary.Target.TargetConf})">
<summary>
 &apos;API helper&apos; method for flowing the target through
 a configurator factory that is then used to change the
 TargetConf value that is returned.
</summary>
</member>
<member name="T:Logary.Target.FactoryApi.ParentCallback`1">
<summary>
 All SpecificTargetConf implementors should take this as their single argument
 ctor, to go back into the parent context
</summary>
</member>
<member name="P:Logary.Target.FactoryApi.TargetConfBuild`1.Target">
<summary>
 Target-specific configuration, varies by T
</summary>
</member>
<member name="M:Logary.Target.FactoryApi.TargetConfBuild`1.SourceMatching(System.Text.RegularExpressions.Regex)">
<summary>
 Only log with the target if the source path matches the regex.
 You can use (new Regex(&quot;.*&quot;)) to allow any, or simply avoid calling
 this method.
</summary>
</member>
<member name="M:Logary.Target.FactoryApi.TargetConfBuild`1.MinLevel(Logary.LogLevel)">
<summary>
 The minimum level that the target logs with. Inclusive, so it
 will configure the rule for the target to log just above this.
</summary>
</member>
<member name="M:Logary.Target.FactoryApi.TargetConfBuild`1.AcceptIf(System.Func{Logary.LogLine,System.Boolean})">
 <summary>
 Only accept log lines that match the acceptor.
 </summary>
 <param name="acceptor">
 The function to call for every log line, to verify
 whether to let it through
 </param>
</member>
<member name="T:Logary.Target.FactoryApi.TargetConfBuild`1">
<summary>
 You cannot supply your own implementation of this interface; its aim is
 not to provide Liskov substitution, but rather to guide you to use the
 API properly/easily.
</summary>
</member>
<member name="M:Logary.Target.FactoryApi.SpecificTargetConf.Build(System.String)">
<summary>
 Build the target configuration from a name (and previously called
 methods on the instance behind the interface).
</summary>
</member>
<member name="T:Logary.Target.FactoryApi.SpecificTargetConf">
<summary>
 This interface is used to construct a target specific configuration
 from the builder.
</summary>
</member>
<member name="M:Logary.Target.FactoryApi.ConfigReader`1.ReadConf">
<summary>
 an accessor for the internal state; don&apos;t use unless you know what you&apos;re
 doing! Used by the migrations to get the current configuration. Allows you
 to modify or use the configuration.
</summary>
</member>
<member name="T:Logary.Target.FactoryApi.ConfigReader`1">
<summary>
 This is useful to implement if you want add-on assemblies to be able to
 extend your builder. Then you just implement an interface that also
 inherits this interface and makes your extensions to the target configuration
 be extension methods in the extending assembly, calling this method to
 read the conf, and then returning the modified configuration to the
 builder by other means (e.g. by calling a method on the &apos;intermediate&apos;)
 interface (that is in the core target builder configuration). Since the
 builder knows its callback, it can implement this &apos;intermediate&apos; interface
 with a method taking the new configuration (that was read from and mutated
 from here).
</summary>
</member>
<member name="T:Logary.Target.FactoryApi">
<summary>
 A module that contains the required interfaces to do an &quot;object oriented&quot; DSL
 per target
</summary>
</member>
<member name="M:Logary.Target.TargetUtils.stdNamedTarget``1(Microsoft.FSharp.Core.FSharpFunc{Logary.Internals.RuntimeInfo,Microsoft.FSharp.Core.FSharpFunc{FSharp.Actor.Types.IActor{``0},Microsoft.FSharp.Control.FSharpAsync{Microsoft.FSharp.Core.Unit}}},System.String)">
<summary>
 Create a new standard named target, with no particular namespace,
 given an actor-based loop function and a name for the target.
</summary>
</member>
<member name="T:Logary.Target.TargetUtils">
<summary>
 Module with utilities for Targets to use for formatting LogLines.
 Currently only wraps a target loop function with a name and spawns a new actor from it.
</summary>
</member>
<member name="T:Logary.Target">
<summary>
 A module defining the types relevant for targets to implement
 and methods to interact with those targets.
</summary>
</member>
<member name="M:Logary.Targets.Console.Builder.WithFormatter(Logary.Formatting.StringFormatter)">
<summary>
 Specify the formatting style to use when logging to the console
</summary>
</member>
<member name="M:Logary.Targets.Console.Builder.Colourise">
<summary>
 TODO: implement!
</summary>
</member>
<member name="T:Logary.Targets.Console.Builder">
<summary>
 Use with LogaryFactory.New( s =&gt; s.Target&lt;Console.Builder&gt;() )
</summary>
</member>
<member name="T:Logary.Targets.Console.ConsoleConf">
<summary>
 Console configuration structure
</summary>
</member>
<member name="T:Logary.Targets.Console.ConsoleColours">
<summary>
 Colours in hex
</summary>
</member>
<member name="M:Logary.Targets.Console.Create(System.String,Logary.Targets.Console.ConsoleConf)">
<summary>
 Use from C# to create - uses tuple calling convention
</summary>
</member>
<member name="P:Logary.Targets.Console.empty">
<summary>
 Default console target configuration.
</summary>
</member>
<member name="T:Logary.Targets.Console">
<summary>
 The console Target for Logary
</summary>
</member>
<member name="M:Logary.Targets.Debugger.Builder.WithFormatter(Logary.Formatting.StringFormatter)">
<summary>
 Specify the formatting style to use when logging to the debugger
</summary>
</member>
<member name="T:Logary.Targets.Debugger.Builder">
<summary>
 Use with LogaryFactory.New( s =&gt; s.Target&lt;Debugger.Builder&gt;() )
</summary>
</member>
<member name="M:Logary.Targets.Debugger.DebuggerConf.Create(Microsoft.FSharp.Core.FSharpOption{Logary.Formatting.StringFormatter})">
<summary>
 Create a new Debugger configuration with a given formatter (which
 formats how the log line and metrics are printed)
</summary>
</member>
<member name="P:Logary.Targets.Debugger.empty">
<summary>
 Default debugger configuration
</summary>
</member>
<member name="T:Logary.Targets.Debugger">
<summary>
 The Debugger target is useful when running in Xamarin Studio or VS.
</summary>
</member>
<member name="M:Logary.Targets.Graphite.Builder.ConnectTo(System.String,System.UInt16)">
<summary>
 Specify where to connect
</summary>
</member>
<member name="T:Logary.Targets.Graphite.Builder">
<summary>
 Use with LogaryFactory.New( s =&gt; s.Target&lt; HERE &gt;() )
</summary>
</member>
<member name="T:Logary.Targets.Graphite.GraphiteConf">
<summary>
 Configuration for loggin to graphite.
 TODO: prefixing with hostname etc
</summary>
</member>
<member name="M:Logary.Targets.Graphite.Create(Logary.Targets.Graphite.GraphiteConf,System.String)">
<summary>
 C# interop: Create a new graphite target configuration.
</summary>
</member>
<member name="M:Logary.Targets.Graphite.create(Logary.Targets.Graphite.GraphiteConf)">
<summary>
 Create a new graphite target configuration.
</summary>
</member>
<member name="M:Logary.Targets.Graphite.createMsg``2(``0,``1,NodaTime.Instant)">
<summary>
 All graphite messages are of the following form.
 metric_path value timestamp\n
</summary>
</member>
<member name="M:Logary.Targets.Graphite.sanitizePath(Logary.DP)">
<summary>
 Sanitizes Graphite metric paths by converting / to - and replacing all other
 invalid characters with underscores.
</summary>
</member>
<member name="P:Logary.Targets.Graphite.TriggerTag">
<summary>
 Put this tag on your message (message must be a parseable value)
 if you want graphite to find it, or use the Metrics API of Logary.
</summary>
</member>
<member name="T:Logary.Targets.Graphite">
<summary>
 A Logary target for Graphite, which is a plotting/graphing
 server.
</summary>
</member>
<member name="M:Logary.Targets.Logstash.Builder.JsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings)">
<summary>
 Sets the JsonSerializerSettings to use, or uses
 &lt;see cref=&quot;Logary.Formatting.JsonFormatter.Settings&quot; /&gt; otherwise.
</summary>
</member>
<member name="T:Logary.Targets.Logstash.Builder">
<summary>
 Use with LogaryFactory.New( s =&gt; s.Target&lt; HERE &gt;() )
</summary>
</member>
<member name="T:Logary.Targets.Logstash.EventVersion">
<summary>
 What version of events to output (zero is the oldest version, one the newer)
</summary>
</member>
<member name="M:Logary.Targets.Logstash.LogstashConf.Create(System.String,Microsoft.FSharp.Core.FSharpOption{System.UInt16},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.UInt16,Logary.Internals.Tcp.WriteClient}}},Microsoft.FSharp.Core.FSharpOption{Newtonsoft.Json.JsonSerializerSettings},Microsoft.FSharp.Core.FSharpOption{Logary.Targets.Logstash.EventVersion},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Collections.FSharpList{System.String}})">
<summary>
 Create a new logstash configuration structure, optionally specifying
 overrides on port, client tcp factory, the formatter to log with
 and what event versioning scheme to use when writing to log stash
 (version 0 is for logstash version 1.1.x and version 1 is for logstash
 version 1.2.x and above)
</summary>
</member>
<member name="T:Logary.Targets.Logstash.LogstashConf">
<summary>
 Logstash configuration structure.
</summary>
</member>
<member name="P:Logary.Targets.Logstash.Impl.Event.exception">
<summary>
 an optional exception
</summary>
</member>
<member name="P:Logary.Targets.Logstash.Impl.Event.hostname">
<summary>
 the host that the log entry comes from, we&apos;re using the hostname here.
</summary>
</member>
<member name="P:Logary.Targets.Logstash.Impl.Event.level">
<summary>
 the level of the log line
</summary>
</member>
<member name="P:Logary.Targets.Logstash.Impl.Event.path">
<summary>
 path is from where in the logger structure that the event comes from,
 see LogLine.path
</summary>
</member>
<member name="P:Logary.Targets.Logstash.Impl.Event.message">
<summary>
 message is the human-readable text message of the event
</summary>
</member>
<member name="P:Logary.Targets.Logstash.Impl.Event.tags">
<summary>
 tags is the event tags (array of strings)
</summary>
</member>
<member name="P:Logary.Targets.Logstash.Impl.Event.@version">
<summary>
 @version is always 1 so far.
</summary>
</member>
<member name="P:Logary.Targets.Logstash.Impl.Event.@timestamp">
<summary>
 @timestamp is the ISO8601 high-precision timestamp for the event.
</summary>
</member>
<member name="T:Logary.Targets.Logstash.Impl.Event">
<summary>
 Logstash event v1
</summary>
</member>
<member name="M:Logary.Targets.Logstash.Impl.EventV0.FromLogLine(Microsoft.FSharp.Collections.FSharpList{System.String},Logary.LogLine)">
<summary>
 Create an EventV0 from the log line passed as a parameter.
</summary>
</member>
<member name="T:Logary.Targets.Logstash.Impl.EventV0">
<summary>
 Logstash event version v0
</summary>
</member>
<member name="M:Logary.Targets.Logstash.Impl.createMsg``1(Logary.Targets.Logstash.EventVersion,Newtonsoft.Json.JsonSerializerSettings,Microsoft.FSharp.Collections.FSharpList{System.String},``0,Logary.LogLine)">
<summary>
 All logstash messages are of the following form.
 json-event\n
</summary>
</member>
<member name="T:Logary.Targets.Logstash">
<summary>
 A Logary target for LogStash.
</summary>
</member>
<member name="T:Logary.Targets.Nimrod.NimrodConf">
<summary>
 To configure the Nimrod target, just point at some other target, and the Nimrod
 target will take care of formatting according to the correct
 Nimrod semantics.
</summary>
</member>
<member name="T:Logary.Targets.Noop.Builder">
<summary>
 Use with LogaryFactory.New( s =&gt; s.Target&lt;Noop.Builder&gt;() )
</summary>
</member>
<member name="M:Logary.Targets.Noop.Create(Logary.Targets.Noop.NoopConf,System.String)">
<summary>
 C# Interop: Create a new Noop target
</summary>
</member>
<member name="M:Logary.Targets.Noop.create(Logary.Targets.Noop.NoopConf)">
<summary>
 Create a new Noop target
</summary>
</member>
<member name="T:Logary.Targets.TextWriter.Builder">
<summary>
 Use with LogaryFactory.New( s =&gt; s.Target&lt;TextWriter.Builder&gt;() )
</summary>
</member>
<member name="P:Logary.Targets.TextWriter.TextWriterConf.isErrorAt">
<summary>
 the log level that is considered &apos;important&apos; enough to write to the
 error text writer
</summary>
</member>
<member name="P:Logary.Targets.TextWriter.TextWriterConf.flush">
<summary>
 whether to flush text writer after each line
</summary>
</member>
<member name="P:Logary.Targets.TextWriter.TextWriterConf.error">
<summary>
 the error text writer to output to
</summary>
</member>
<member name="P:Logary.Targets.TextWriter.TextWriterConf.output">
<summary>
 the non-error text writer to output to
</summary>
</member>
<member name="P:Logary.Targets.TextWriter.TextWriterConf.formatter">
<summary>
 A string formatter to specify how to write the log lines
</summary>
</member>
<member name="T:Logary.Targets.TextWriter.TextWriterConf">
<summary>
 Configuration for a text writer
</summary>
</member>
<member name="M:Logary.Targets.TextWriter.Create(Logary.Formatting.StringFormatter,System.IO.TextWriter,System.IO.TextWriter,System.Boolean,Logary.LogLevel,System.String)">
<summary>
 Use from C# to create - uses tuple calling convention
</summary>
</member>
<member name="T:Logary.Targets.TextWriter">
<summary>
 A module implementing a text writer target. Useful for writing to the
 console output, or writing to a custom text writer.
</summary>
</member>
<member name="T:Logary.WinPerfCounter.Instance.NotApplicable">
<summary>
 This PerfCounter does not have any instances
</summary>
</member>
<member name="T:Logary.WinPerfCounter.Instance.Instance">
<summary>
 This PerfCounter has a very specific instance assigned
</summary>
</member>
<member name="T:Logary.WinPerfCounter.PerfCounter">
<summary>
 There are performance counters in these configurations, always with a category:

   * No instance, just a counter
   * _Total (aka AllInstances in Logary)
   * Specific instance, which may or may not exist for long

 A record that encapsulates the known information about a Windows Performance
 Counter.

 See http://msdn.microsoft.com/en-us/library/vstudio/fxk122b4%28v=vs.100%29.aspx

 Updated every 400 ms by Windows.
</summary>
</member>
<member name="T:Logary.WinPerfCounter.PC">
<summary>
 Type alias for System.Diagnostics.PerformanceCounter
</summary>
</member>
<member name="T:Logary.WinPerfCounter.PCCT">
<summary>
 Type alias for System.Diagnostics.PerformanceCounterCategoryType
</summary>
</member>
<member name="T:Logary.WinPerfCounter.PCC">
<summary>
 Type alias System.Diagnostics.for PerformanceCounterCategory
</summary>
</member>
<member name="M:Logary.WinPerfCounter.setInstance(Logary.WinPerfCounter.Instance,Logary.WinPerfCounter.PerfCounter)">
<summary>
 Sets a specific instance on the Performance Counter.
</summary>
</member>
<member name="M:Logary.WinPerfCounter.setCurrentProcess(Logary.WinPerfCounter.PerfCounter)">
<summary>
 Sets the Performance Counter to only check metrics that are sliced to be for
 the current process.
</summary>
</member>
<member name="M:Logary.WinPerfCounter.pidInstance">
<summary>
 Gets the performance counter instance for the given category for the current
 process.
</summary>
</member>
<member name="M:Logary.WinPerfCounter.pid">
<summary>
 Gets the current process&apos; id
</summary>
</member>
<member name="M:Logary.WinPerfCounter.pidToInstance(System.Int32)">
<summary>
 try to find the instance performance counter for the pid, or return
 NotApplicable if the process e.g. does no longer run and can therefore not
 be found
</summary>
</member>
<member name="M:Logary.WinPerfCounter.toPC'(System.String,System.String,Logary.WinPerfCounter.Instance)">
<summary>
 Curried variant of `mkPc` that takes a category, counter and optional
 instance and creates an `Option&lt;PerformanceCounter&gt;` from it.
</summary>
</member>
<member name="M:Logary.WinPerfCounter.toPC(Logary.WinPerfCounter.PerfCounter)">
<summary>
 Create a new performance counter given a WindowsPerfCounter record.
</summary>
</member>
<member name="M:Logary.WinPerfCounter.nextValue(System.Diagnostics.PerformanceCounter)">
<summary>
 Gets the next value for the performance counter
</summary>
</member>
<member name="M:Logary.WinPerfCounter.getCounters(System.Diagnostics.PerformanceCounterCategory,Logary.WinPerfCounter.Instance)">
<summary>
 Gets a list of performance counters for the given instance and category.
</summary>
</member>
<member name="M:Logary.WinPerfCounter.counterExists(System.String,System.String)">
<summary>
 Checks whether the counter in the category exists
</summary>
</member>
<member name="M:Logary.WinPerfCounter.instanceExists(System.String,System.String)">
<summary>
 Checks whether the instance exists in the category
</summary>
</member>
<member name="M:Logary.WinPerfCounter.getInstances(System.Diagnostics.PerformanceCounterCategory)">
<summary>
 Gets all available instance names for the given list of performance counter
 categories
</summary>
</member>
<member name="M:Logary.WinPerfCounter.getAllPCC">
<summary>
 Gets all available performance counter categories
</summary>
</member>
<member name="M:Logary.WinPerfCounter.getPCC(System.String)">
<summary>
 Create a new performance counter category. It may not exist on the system
 that you are running the code on; hence the option-based return value
</summary>
</member>
<member name="P:Logary.WinPerfCounter.KnownInstances._Global_">
<summary>
 The instance that runs on operating system level.
</summary>
</member>
<member name="P:Logary.WinPerfCounter.KnownInstances._Total">
<summary>
 The instance that is the sum of all instances. It&apos;s the literal `_Total`.
</summary>
</member>
<member name="T:Logary.WinPerfCounter">
<summary>
 A module that helps you interact with Windows Performance Counters. Wraps
 null-based APIs and guides the programmer with sane names and documentation.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.WorkflowServiceHost 4_0_0_0.Workflows Unloaded Per Second(Logary.WinPerfCounter.Instance)">
<summary>
 Workflows Unloaded Per Second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.WorkflowServiceHost 4_0_0_0.Workflows Unloaded(Logary.WinPerfCounter.Instance)">
<summary>
 Workflows Unloaded: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.WorkflowServiceHost 4_0_0_0.Workflows Terminated Per Second(Logary.WinPerfCounter.Instance)">
<summary>
 Workflows Terminated Per Second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.WorkflowServiceHost 4_0_0_0.Workflows Terminated(Logary.WinPerfCounter.Instance)">
<summary>
 Workflows Terminated: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.WorkflowServiceHost 4_0_0_0.Workflows Suspended Per Second(Logary.WinPerfCounter.Instance)">
<summary>
 Workflows Suspended Per Second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.WorkflowServiceHost 4_0_0_0.Workflows Suspended(Logary.WinPerfCounter.Instance)">
<summary>
 Workflows Suspended: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.WorkflowServiceHost 4_0_0_0.Workflows Persisted Per Second(Logary.WinPerfCounter.Instance)">
<summary>
 Workflows Persisted Per Second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.WorkflowServiceHost 4_0_0_0.Workflows Persisted(Logary.WinPerfCounter.Instance)">
<summary>
 Workflows Persisted: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.WorkflowServiceHost 4_0_0_0.Workflows Loaded Per Second(Logary.WinPerfCounter.Instance)">
<summary>
 Workflows Loaded Per Second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.WorkflowServiceHost 4_0_0_0.Workflows Loaded(Logary.WinPerfCounter.Instance)">
<summary>
 Workflows Loaded: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.WorkflowServiceHost 4_0_0_0.Workflows In Memory(Logary.WinPerfCounter.Instance)">
<summary>
 Workflows In Memory: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.WorkflowServiceHost 4_0_0_0.Workflows Idle Per Second(Logary.WinPerfCounter.Instance)">
<summary>
 Workflows Idle Per Second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.WorkflowServiceHost 4_0_0_0.Workflows Executing(Logary.WinPerfCounter.Instance)">
<summary>
 Workflows Executing: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.WorkflowServiceHost 4_0_0_0.Workflows Created Per Second(Logary.WinPerfCounter.Instance)">
<summary>
 Workflows Created Per Second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.WorkflowServiceHost 4_0_0_0.Workflows Created(Logary.WinPerfCounter.Instance)">
<summary>
 Workflows Created: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.WorkflowServiceHost 4_0_0_0.Workflows Completed Per Second(Logary.WinPerfCounter.Instance)">
<summary>
 Workflows Completed Per Second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.WorkflowServiceHost 4_0_0_0.Workflows Completed(Logary.WinPerfCounter.Instance)">
<summary>
 Workflows Completed: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.WorkflowServiceHost 4_0_0_0.Workflows Aborted Per Second(Logary.WinPerfCounter.Instance)">
<summary>
 Workflows Aborted Per Second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.WorkflowServiceHost 4_0_0_0.Workflows Aborted(Logary.WinPerfCounter.Instance)">
<summary>
 Workflows Aborted: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.WorkflowServiceHost 4_0_0_0.Average Workflow Persist Time(Logary.WinPerfCounter.Instance)">
<summary>
 Average Workflow Persist Time: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.WorkflowServiceHost 4_0_0_0.Average Workflow Load Time(Logary.WinPerfCounter.Instance)">
<summary>
 Average Workflow Load Time: -
</summary>
</member>
<member name="T:Logary.WinPerfCounters.WorkflowServiceHost 4_0_0_0">
<summary>
 WorkflowServiceHost 4.0.0.0: WorkflowServiceHost performance counters for workflow service

 This performance counter does not have instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Windows Workflow Foundation.Workflows Unloaded/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Workflows Unloaded/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Windows Workflow Foundation.Workflows Unloaded(Logary.WinPerfCounter.Instance)">
<summary>
 Workflows Unloaded: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Windows Workflow Foundation.Workflows Terminated/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Workflows Terminated/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Windows Workflow Foundation.Workflows Terminated(Logary.WinPerfCounter.Instance)">
<summary>
 Workflows Terminated: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Windows Workflow Foundation.Workflows Suspended/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Workflows Suspended/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Windows Workflow Foundation.Workflows Suspended(Logary.WinPerfCounter.Instance)">
<summary>
 Workflows Suspended: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Windows Workflow Foundation.Workflows Runnable(Logary.WinPerfCounter.Instance)">
<summary>
 Workflows Runnable: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Windows Workflow Foundation.Workflows Persisted/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Workflows Persisted/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Windows Workflow Foundation.Workflows Persisted(Logary.WinPerfCounter.Instance)">
<summary>
 Workflows Persisted: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Windows Workflow Foundation.Workflows Pending(Logary.WinPerfCounter.Instance)">
<summary>
 Workflows Pending: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Windows Workflow Foundation.Workflows Loaded/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Workflows Loaded/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Windows Workflow Foundation.Workflows Loaded(Logary.WinPerfCounter.Instance)">
<summary>
 Workflows Loaded: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Windows Workflow Foundation.Workflows In Memory(Logary.WinPerfCounter.Instance)">
<summary>
 Workflows In Memory: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Windows Workflow Foundation.Workflows Idle/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Workflows Idle/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Windows Workflow Foundation.Workflows Executing(Logary.WinPerfCounter.Instance)">
<summary>
 Workflows Executing: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Windows Workflow Foundation.Workflows Created/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Workflows Created/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Windows Workflow Foundation.Workflows Created(Logary.WinPerfCounter.Instance)">
<summary>
 Workflows Created: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Windows Workflow Foundation.Workflows Completed/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Workflows Completed/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Windows Workflow Foundation.Workflows Completed(Logary.WinPerfCounter.Instance)">
<summary>
 Workflows Completed: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Windows Workflow Foundation.Workflows Aborted/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Workflows Aborted/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Windows Workflow Foundation.Workflows Aborted(Logary.WinPerfCounter.Instance)">
<summary>
 Workflows Aborted: -
</summary>
</member>
<member name="T:Logary.WinPerfCounters.Windows Workflow Foundation">
<summary>
 Windows Workflow Foundation: Windows Workflow Foundation Performance Counters

 This performance counter does not have instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Windows Media Player Metadata.URL Classification Time (ms)(Logary.WinPerfCounter.Instance)">
<summary>
 URL Classification Time (ms): -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Windows Media Player Metadata.Timestamp Directory Hit Count(Logary.WinPerfCounter.Instance)">
<summary>
 Timestamp Directory Hit Count: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Windows Media Player Metadata.Scanning State(Logary.WinPerfCounter.Instance)">
<summary>
 Scanning State: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Windows Media Player Metadata.Reorganize Time (ms)(Logary.WinPerfCounter.Instance)">
<summary>
 Reorganize Time (ms): -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Windows Media Player Metadata.Property Extraction Time (ms)(Logary.WinPerfCounter.Instance)">
<summary>
 Property Extraction Time (ms): -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Windows Media Player Metadata.Normalization Time (ms)(Logary.WinPerfCounter.Instance)">
<summary>
 Normalization Time (ms): -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Windows Media Player Metadata.Monitored Folder Updates/Second(Logary.WinPerfCounter.Instance)">
<summary>
 Monitored Folder Updates/Second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Windows Media Player Metadata.Library Description Updates/Second(Logary.WinPerfCounter.Instance)">
<summary>
 Library Description Updates/Second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Windows Media Player Metadata.Library Description Change Notifications/Second(Logary.WinPerfCounter.Instance)">
<summary>
 Library Description Change Notifications/Second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Windows Media Player Metadata.Groveler Service Routine Executions/Second(Logary.WinPerfCounter.Instance)">
<summary>
 Groveler Service Routine Executions/Second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Windows Media Player Metadata.Files Scanned/Minute(Logary.WinPerfCounter.Instance)">
<summary>
 Files Scanned/Minute: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Windows Media Player Metadata.File Scanning Thread Prioirty(Logary.WinPerfCounter.Instance)">
<summary>
 File Scanning Thread Prioirty: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Windows Media Player Metadata.Dirty Directory Hit Count(Logary.WinPerfCounter.Instance)">
<summary>
 Dirty Directory Hit Count: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Windows Media Player Metadata.Directory Change Queue Length(Logary.WinPerfCounter.Instance)">
<summary>
 Directory Change Queue Length: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Windows Media Player Metadata.Commit Time (ms)(Logary.WinPerfCounter.Instance)">
<summary>
 Commit Time (ms): -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Windows Media Player Metadata.Art Extraction Time (ms)(Logary.WinPerfCounter.Instance)">
<summary>
 Art Extraction Time (ms): -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Windows Media Player Metadata.AFTS Execution Time (ms)(Logary.WinPerfCounter.Instance)">
<summary>
 AFTS Execution Time (ms): -
</summary>
</member>
<member name="T:Logary.WinPerfCounters.Windows Media Player Metadata">
<summary>
 Windows Media Player Metadata: Windows Media Player Metadata

 This performance counter does not have instance based counters
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Web Service Cache.W3SVC_W3WP">
<summary>
 W3SVC_W3WP: This counter set exposes HTTP request processing related counters for the worker process.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Web Service Cache.URI Cache Misses">
<summary>
 URI Cache Misses: Total number of unsuccessful lookups in the user-mode URI cache (since service startup).
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Web Service Cache.URI Cache Hits %">
<summary>
 URI Cache Hits %: The ratio of user-mode URI Cache Hits to total cache requests (since service startup).
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Web Service Cache.URI Cache Hits">
<summary>
 URI Cache Hits: Total number of successful lookups in the user-mode URI cache (since service startup).
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Web Service Cache.URI Cache Flushes">
<summary>
 URI Cache Flushes: User-mode URI Cache flushes (since service startup).
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Web Service Cache.Total URIs Cached">
<summary>
 Total URIs Cached: Total number of URI information blocks added to the user-mode cache (since service startup).
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Web Service Cache.Total Metadata Cached">
<summary>
 Total Metadata Cached: Total number of metadata information blocks added to the user-mode cache (since service startup).
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Web Service Cache.Total Flushed URIs">
<summary>
 Total Flushed URIs: The number of URI information blocks that have been removed from the user-mode cache (since service startup).
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Web Service Cache.Total Flushed Metadata">
<summary>
 Total Flushed Metadata: Total Flushed Metadata is the number of Metadata information blocks that have been removed from the user-mode cache (since service startup).
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Web Service Cache.Total Flushed Files">
<summary>
 Total Flushed Files: Total Flushed Files is the number of file handles that have been removed from the user-mode cache (since service startup).
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Web Service Cache.Total Files Cached">
<summary>
 Total Files Cached: Total number of files whose content was ever added to the user-mode cache (since service startup).
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Web Service Cache.Output Cache Total Misses">
<summary>
 Output Cache Total Misses: Total number of misses in output cache.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Web Service Cache.Output Cache Total Hits">
<summary>
 Output Cache Total Hits: Total number of hits in output cache.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Web Service Cache.Output Cache Total Flushes">
<summary>
 Output Cache Total Flushes: Total number of flushes in output cache.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Web Service Cache.Output Cache Total Flushed Items">
<summary>
 Output Cache Total Flushed Items: Total number of items flushed by cache.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Web Service Cache.Output Cache Current Memory Usage">
<summary>
 Output Cache Current Memory Usage: Current memory usage by output cache.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Web Service Cache.Output Cache Current Items">
<summary>
 Output Cache Current Items: Number of items currently in output cache.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Web Service Cache.Output Cache Current Hits %">
<summary>
 Output Cache Current Hits %: Output Cache current hit ratio. Calculated as (H)/(H+M) where H and M represent Hits and Misses in previous sample interval respectively.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Web Service Cache.Output Cache Current Flushed Items">
<summary>
 Output Cache Current Flushed Items: Number of items that have been flushed, but are still being used by outgoing responses so are still taking up memory.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Web Service Cache.Metadata Cache Misses">
<summary>
 Metadata Cache Misses: Total number of unsuccessful lookups in the user-mode metadata cache (since service startup).
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Web Service Cache.Metadata Cache Hits %">
<summary>
 Metadata Cache Hits %: The ratio of user-mode metadata cache hits to total cache requests (since service startup).
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Web Service Cache.Metadata Cache Hits">
<summary>
 Metadata Cache Hits: Total number of successful lookups in the user-mode metadata cache (since service startup).
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Web Service Cache.Metadata Cache Flushes">
<summary>
 Metadata Cache Flushes: The number of user-mode metadata cache flushes (since service startup).
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Web Service Cache.Maximum File Cache Memory Usage">
<summary>
 Maximum File Cache Memory Usage: Maximum number of bytes used for user-mode file cache (since service startup).
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Web Service Cache.Kernel: Uri Cache Hits/sec">
<summary>
 Kernel: Uri Cache Hits/sec: The rate of kernel URI Cache hits.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Web Service Cache.Kernel: URI Cache Misses">
<summary>
 Kernel: URI Cache Misses: Total number of unsuccessful lookups in the kernel URI cache (since service startup).
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Web Service Cache.Kernel: URI Cache Hits %">
<summary>
 Kernel: URI Cache Hits %: The ratio of kernel URI cache hits to total cache requests (since service startup).
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Web Service Cache.Kernel: URI Cache Hits">
<summary>
 Kernel: URI Cache Hits: Total number of successful lookups in the kernel URI cache (since service startup).
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Web Service Cache.Kernel: URI Cache Flushes">
<summary>
 Kernel: URI Cache Flushes: Kernel URI Cache Flushes (since server startup).
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Web Service Cache.Kernel: Total URIs Cached">
<summary>
 Kernel: Total URIs Cached: Total number of URI information blocks added to the kernel cache (since service startup).
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Web Service Cache.Kernel: Total Flushed URIs">
<summary>
 Kernel: Total Flushed URIs: The number of URI information blocks that have been removed from the kernel cache (since service startup).
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Web Service Cache.Kernel: Current URIs Cached">
<summary>
 Kernel: Current URIs Cached: URI information blocks currently cached by the kernel.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Web Service Cache.File Cache Misses">
<summary>
 File Cache Misses: Total number of unsuccessful lookups in the user-mode file cache (since service startup).
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Web Service Cache.File Cache Hits %">
<summary>
 File Cache Hits %: The ratio of user-mode file cache hits to total cache requests (since service startup).
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Web Service Cache.File Cache Hits">
<summary>
 File Cache Hits: Total number of successful lookups in the user-mode file cache (since service startup).
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Web Service Cache.File Cache Flushes">
<summary>
 File Cache Flushes: The number of files removed from the user-mode cache (since service startup).
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Web Service Cache.Current URIs Cached">
<summary>
 Current URIs Cached: URI information blocks currently in the user-mode cache.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Web Service Cache.Current Metadata Cached">
<summary>
 Current Metadata Cached: Current number of metadata information blocks currently in the user-mode cache.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Web Service Cache.Current Files Cached">
<summary>
 Current Files Cached: Current number of files whose content is in the user-mode cache.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Web Service Cache.Current File Cache Memory Usage">
<summary>
 Current File Cache Memory Usage: Current number of bytes used for the user-mode file cache.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Web Service Cache.Active Flushed Entries">
<summary>
 Active Flushed Entries: Active Flushed Entries are file handles cached in user-mode that will be closed when all current transfers complete.
</summary>
</member>
<member name="T:Logary.WinPerfCounters.Web Service Cache">
<summary>
 Web Service Cache: The Web Service Cache Counters object includes cache counters specific to the World Wide Web Publishing Service.

 This performance counter does not have instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Web Service.Unlock Requests/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Unlock Requests/sec: The rate HTTP requests using the UNLOCK method are made.  Unlock requests are used to remove locks from files.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Web Service.Trace Requests/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Trace Requests/sec: The rate HTTP requests using the TRACE method are made.  Trace requests allow the client to see what is being received at the end of the request chain and use the information for diagnostic purposes.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Web Service.Total count of failed CAL requests for authenticated users(Logary.WinPerfCounter.Instance)">
<summary>
 Total count of failed CAL requests for authenticated users: This counter is no longer valid. Value will always be zero.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Web Service.Total count of failed CAL requests for SSL connections(Logary.WinPerfCounter.Instance)">
<summary>
 Total count of failed CAL requests for SSL connections: This counter is no longer valid. Value will always be zero.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Web Service.Total blocked bandwidth bytes.(Logary.WinPerfCounter.Instance)">
<summary>
 Total blocked bandwidth bytes.: Total bytes blocked due to bandwidth throttling settings (since service startup).
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Web Service.Total Unlock Requests(Logary.WinPerfCounter.Instance)">
<summary>
 Total Unlock Requests: Total Unlock Requests is the number of HTTP requests using the UNLOCK method (since service startup).  Unlock requests are used to remove locks from files.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Web Service.Total Trace Requests(Logary.WinPerfCounter.Instance)">
<summary>
 Total Trace Requests: Total Trace Requests is the number of HTTP requests using the TRACE method (since service startup).  Trace requests allow the client to see what is being received at the end of the request chain and use the information for diagnostic purposes.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Web Service.Total Search Requests(Logary.WinPerfCounter.Instance)">
<summary>
 Total Search Requests: Total Search Requests is the number of HTTP requests using the SEARCH method (since service startup).  Search requests are used to query the server to find resources that match a set of conditions provided by the client.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Web Service.Total Rejected Async I/O Requests(Logary.WinPerfCounter.Instance)">
<summary>
 Total Rejected Async I/O Requests: Total requests rejected due to bandwidth throttling settings (since service startup).
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Web Service.Total Put Requests(Logary.WinPerfCounter.Instance)">
<summary>
 Total Put Requests: Total Put Requests is the number of HTTP requests using the PUT method (since service startup).
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Web Service.Total Proppatch Requests(Logary.WinPerfCounter.Instance)">
<summary>
 Total Proppatch Requests: Total Proppatch Requests is the number of HTTP requests using the PROPPATCH method (since service startup).  Proppatch requests set property values on files and directories.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Web Service.Total Propfind Requests(Logary.WinPerfCounter.Instance)">
<summary>
 Total Propfind Requests: Total Propfind Requests is the number of HTTP requests using the PROPFIND method (since service startup).  Propfind requests retrieve property values on files and directories.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Web Service.Total Post Requests(Logary.WinPerfCounter.Instance)">
<summary>
 Total Post Requests: Total Post Requests is the number of HTTP requests using the POST method (since service startup).
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Web Service.Total Other Request Methods(Logary.WinPerfCounter.Instance)">
<summary>
 Total Other Request Methods: Total Other Request Methods is the number of HTTP requests that are not OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, MOVE, COPY, MKCOL, PROPFIND, PROPPATCH, SEARCH, LOCK or UNLOCK methods (since service startup).
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Web Service.Total Options Requests(Logary.WinPerfCounter.Instance)">
<summary>
 Total Options Requests: Total Options Requests is the number of HTTP requests using the OPTIONS method (since service startup).
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Web Service.Total Not Found Errors(Logary.WinPerfCounter.Instance)">
<summary>
 Total Not Found Errors: Total Not Found Errors is the number of requests that couldn&apos;t be satisfied by the server because the requested document could not be found (since service startup).  These are generally reported as an HTTP 404 error code to the client.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Web Service.Total NonAnonymous Users(Logary.WinPerfCounter.Instance)">
<summary>
 Total NonAnonymous Users: Total NonAnonymous Users is the total number of users who established a non-anonymous connection with the Web service (since service startup).
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Web Service.Total Move Requests(Logary.WinPerfCounter.Instance)">
<summary>
 Total Move Requests: Total Move Requests is the number of HTTP requests using the MOVE method (since service startup).  Move requests are used for moving files and directories.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Web Service.Total Mkcol Requests(Logary.WinPerfCounter.Instance)">
<summary>
 Total Mkcol Requests: Total Mkcol Requests is the number of HTTP requests using the MKCOL method (since service startup).  Mkcol requests are used to create directories on the server.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Web Service.Total Method Requests/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Total Method Requests/sec: The rate HTTP requests are received.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Web Service.Total Method Requests(Logary.WinPerfCounter.Instance)">
<summary>
 Total Method Requests: Total Method Requests is the number of all HTTP requests (since service startup).
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Web Service.Total Logon Attempts(Logary.WinPerfCounter.Instance)">
<summary>
 Total Logon Attempts: Total Logon Attempts is the number of logons attempts to the Web Service (since service startup).
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Web Service.Total Locked Errors(Logary.WinPerfCounter.Instance)">
<summary>
 Total Locked Errors: Total Locked Errors is the number of requests that couldn&apos;t be satisfied by the server because the requested was locked (since service startup).  These are generally reported as an HTTP 423 error code to the client.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Web Service.Total Lock Requests(Logary.WinPerfCounter.Instance)">
<summary>
 Total Lock Requests: Total Lock Requests is the number of HTTP requests using the LOCK method (since service startup).  Lock requests are used to lock a file for one user so that only that user can modify the file.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Web Service.Total ISAPI Extension Requests(Logary.WinPerfCounter.Instance)">
<summary>
 Total ISAPI Extension Requests: Total ISAPI Extension Requests received (since service startup).
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Web Service.Total Head Requests(Logary.WinPerfCounter.Instance)">
<summary>
 Total Head Requests: Total Head Requests is the number of HTTP requests using the HEAD method (since service startup).  Head requests generally indicate a client is querying the state of a document they already have to see if it needs to be refreshed.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Web Service.Total Get Requests(Logary.WinPerfCounter.Instance)">
<summary>
 Total Get Requests: Total Get Requests is the number of HTTP requests using the GET method (since service startup).  Get requests are the most common HTTP request.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Web Service.Total Files Transferred(Logary.WinPerfCounter.Instance)">
<summary>
 Total Files Transferred: Total Files Transferred is the sum of Files Sent and Files Received (since service startup).
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Web Service.Total Files Sent(Logary.WinPerfCounter.Instance)">
<summary>
 Total Files Sent: Total Files Sent is the total number of files sent by the Web service (since service startup).
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Web Service.Total Files Received(Logary.WinPerfCounter.Instance)">
<summary>
 Total Files Received: Total Files Received is the total number of files received by the Web service (since service startup).
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Web Service.Total Delete Requests(Logary.WinPerfCounter.Instance)">
<summary>
 Total Delete Requests: Total Delete Requests is the number of HTTP requests using the DELETE method (since service startup).  Delete requests are generally used for file removals.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Web Service.Total Copy Requests(Logary.WinPerfCounter.Instance)">
<summary>
 Total Copy Requests: Total Copy Requests is the number of HTTP requests using the COPY method (since service startup).  Copy requests are used for copying files and directories.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Web Service.Total Connection Attempts (all instances)(Logary.WinPerfCounter.Instance)">
<summary>
 Total Connection Attempts (all instances): Total Connection Attempts is the number of connections that have been attempted using the Web service (since service startup).  This counter is for all instances listed.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Web Service.Total CGI Requests(Logary.WinPerfCounter.Instance)">
<summary>
 Total CGI Requests: Total CGI requests is the total number of CGI requests (since service startup).
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Web Service.Total Bytes Transferred(Logary.WinPerfCounter.Instance)">
<summary>
 Total Bytes Transferred: Total bytes either received or sent by the Web service (since service startup).
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Web Service.Total Bytes Sent(Logary.WinPerfCounter.Instance)">
<summary>
 Total Bytes Sent: Total Bytes Sent is the number of data bytes that have been sent by the Web service (since service startup).
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Web Service.Total Bytes Received(Logary.WinPerfCounter.Instance)">
<summary>
 Total Bytes Received: Total Bytes Received is the number of data bytes that have been received by the Web service (since service startup).
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Web Service.Total Blocked Async I/O Requests(Logary.WinPerfCounter.Instance)">
<summary>
 Total Blocked Async I/O Requests: Total requests temporarily blocked due to bandwidth throttling settings (since service startup).
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Web Service.Total Anonymous Users(Logary.WinPerfCounter.Instance)">
<summary>
 Total Anonymous Users: Total Anonymous Users is the total number of users who established an anonymous connection with the Web service (since service startup).
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Web Service.Total Allowed Async I/O Requests(Logary.WinPerfCounter.Instance)">
<summary>
 Total Allowed Async I/O Requests: Total requests allowed by bandwidth throttling settings (since service startup).
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Web Service.Service Uptime(Logary.WinPerfCounter.Instance)">
<summary>
 Service Uptime: The length of time the Web Service has been running.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Web Service.Search Requests/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Search Requests/sec: The rate HTTP requests using the SEARCH method are made.  Search requests are used to query the server to find resources that match a set of conditions provided by the client.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Web Service.Put Requests/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Put Requests/sec: The rate HTTP requests using the PUT method are made.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Web Service.Proppatch Requests/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Proppatch Requests/sec: The rate HTTP requests using the PROPPATCH method are made.  Proppatch requests set property values on files and directories.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Web Service.Propfind Requests/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Propfind Requests/sec: The rate HTTP requests using the PROPFIND method are made.  Propfind requests retrieve property values on files and directories.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Web Service.Post Requests/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Post Requests/sec: The rate HTTP requests using the POST method are made.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Web Service.Other Request Methods/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Other Request Methods/sec: The rate HTTP requests are made that do not use the OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, MOVE, COPY, MKCOL, PROPFIND, PROPPATCH, SEARCH, LOCK or UNLOCK methods.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Web Service.Options Requests/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Options Requests/sec: The rate HTTP requests using the OPTIONS method are made.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Web Service.Not Found Errors/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Not Found Errors/sec: The rate of errors due to requests that couldn&apos;t be satisfied by the server because the requested document could not be found.  These are generally reported as an HTTP 404 error code to the client.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Web Service.NonAnonymous Users/sec(Logary.WinPerfCounter.Instance)">
<summary>
 NonAnonymous Users/sec: The rate users are making non-anonymous connections to the Web service.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Web Service.Move Requests/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Move Requests/sec: The rate HTTP requests using the MOVE method are made.  Move requests are used for moving files and directories.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Web Service.Mkcol Requests/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Mkcol Requests/sec: The rate HTTP requests using the MKCOL method are made.  Mkcol requests are used to create directories on the server.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Web Service.Measured Async I/O Bandwidth Usage(Logary.WinPerfCounter.Instance)">
<summary>
 Measured Async I/O Bandwidth Usage: Measured bandwidth of asynchronous I/O averaged over a minute.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Web Service.Maximum NonAnonymous Users(Logary.WinPerfCounter.Instance)">
<summary>
 Maximum NonAnonymous Users: Maximum NonAnonymous Users is the maximum number of concurrent non-anonymous connections to the Web service (since service startup).
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Web Service.Maximum ISAPI Extension Requests(Logary.WinPerfCounter.Instance)">
<summary>
 Maximum ISAPI Extension Requests: Maximum ISAPI Extension Requests is the maximum number of ISAPI requests simultaneously processed by the Web service (since service startup).
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Web Service.Maximum Connections(Logary.WinPerfCounter.Instance)">
<summary>
 Maximum Connections: Maximum Connections is the maximum number of concurrent connections established with the Web service (since service startup).
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Web Service.Maximum CGI Requests(Logary.WinPerfCounter.Instance)">
<summary>
 Maximum CGI Requests: Maximum CGI Requests is the maximum number of CGI requests simultaneously processed by the Web service (since service startup).
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Web Service.Maximum CAL count for authenticated users(Logary.WinPerfCounter.Instance)">
<summary>
 Maximum CAL count for authenticated users: This counter is no longer valid. Value will always be zero.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Web Service.Maximum CAL count for SSL connections(Logary.WinPerfCounter.Instance)">
<summary>
 Maximum CAL count for SSL connections: This counter is no longer valid. Value will always be zero.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Web Service.Maximum Anonymous Users(Logary.WinPerfCounter.Instance)">
<summary>
 Maximum Anonymous Users: Maximum Anonymous Users is the maximum number of users who established concurrent anonymous connections using the Web service (since service startup).
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Web Service.Logon Attempts/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Logon Attempts/sec: The rate that logons to the Web service are being attempted.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Web Service.Locked Errors/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Locked Errors/sec: The rate of errors due to requests that couldn&apos;t be satisfied by the server because the requested document was locked.  These are generally reported as an HTTP 423 error code to the client.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Web Service.Lock Requests/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Lock Requests/sec: The rate HTTP requests using the LOCK method are made.  Lock requests are used to lock a file for one user so that only that user can modify the file.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Web Service.ISAPI Extension Requests/sec(Logary.WinPerfCounter.Instance)">
<summary>
 ISAPI Extension Requests/sec: The rate that ISAPI Extension requests are received by the Web service.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Web Service.Head Requests/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Head Requests/sec: The rate HTTP requests using the HEAD method are made.  Head requests generally indicate a client is querying the state of a document they already have to see if it needs to be refreshed.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Web Service.Get Requests/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Get Requests/sec: The rate HTTP requests using the GET method are made.  Get requests are the most common HTTP request.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Web Service.Files/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Files/sec: The rate files are transferred, that is, sent and received by the Web service.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Web Service.Files Sent/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Files Sent/sec: The rate files are sent by the Web service.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Web Service.Files Received/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Files Received/sec: The rate files are received by the Web service.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Web Service.Delete Requests/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Delete Requests/sec: The rate HTTP requests using the DELETE method are made.  Delete requests are generally used for file removals.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Web Service.Current blocked bandwidth bytes.(Logary.WinPerfCounter.Instance)">
<summary>
 Current blocked bandwidth bytes.: Current bytes temporarily blocked due to bandwidth throttling settings.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Web Service.Current NonAnonymous Users(Logary.WinPerfCounter.Instance)">
<summary>
 Current NonAnonymous Users: Current NonAnonymous Users is the number of users who currently have a non-anonymous connection using the Web service.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Web Service.Current ISAPI Extension Requests(Logary.WinPerfCounter.Instance)">
<summary>
 Current ISAPI Extension Requests: Current ISAPI Extension Requests is the current number of ISAPI requests being simultaneously processed by the Web service.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Web Service.Current Connections(Logary.WinPerfCounter.Instance)">
<summary>
 Current Connections: Current Connections is the current number of connections established with the Web service.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Web Service.Current CGI Requests(Logary.WinPerfCounter.Instance)">
<summary>
 Current CGI Requests: Current CGI Requests is the current number of CGI requests being simultaneously processed by the Web service.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Web Service.Current CAL count for authenticated users(Logary.WinPerfCounter.Instance)">
<summary>
 Current CAL count for authenticated users: This counter is no longer valid. Value will always be zero.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Web Service.Current CAL count for SSL connections(Logary.WinPerfCounter.Instance)">
<summary>
 Current CAL count for SSL connections: This counter is no longer valid. Value will always be zero.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Web Service.Current Blocked Async I/O Requests(Logary.WinPerfCounter.Instance)">
<summary>
 Current Blocked Async I/O Requests: Current requests temporarily blocked due to bandwidth throttling settings.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Web Service.Current Anonymous Users(Logary.WinPerfCounter.Instance)">
<summary>
 Current Anonymous Users: Current Anonymous Users is the number of users who currently have an anonymous connection using the Web service.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Web Service.Copy Requests/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Copy Requests/sec: The rate HTTP requests using the COPY method are made.  Copy requests are used for copying files and directories.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Web Service.Connection Attempts/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Connection Attempts/sec: The rate that connections to the Web service are being attempted.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Web Service.CGI Requests/sec(Logary.WinPerfCounter.Instance)">
<summary>
 CGI Requests/sec: The rate CGI requests are received by the Web service.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Web Service.Bytes Total/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Bytes Total/sec: Bytes Total/sec is the sum of Bytes Sent/sec and Bytes Received/sec.  This is the total rate of bytes transferred by the Web service.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Web Service.Bytes Sent/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Bytes Sent/sec: Bytes Sent/sec is the rate data bytes are being sent by the Web service.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Web Service.Bytes Received/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Bytes Received/sec: Bytes Received/sec is the rate that data bytes are received by the Web service.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Web Service.Anonymous Users/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Anonymous Users/sec: The rate users are making anonymous connections to the Web service.
</summary>
</member>
<member name="T:Logary.WinPerfCounters.Web Service">
<summary>
 Web Service: The Web Service object includes counters specific to the World Wide Web Publishing Service.

 This performance counter does not have non-instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.WSMan Quota Statistics.User Quota Violations/Second(Logary.WinPerfCounter.Instance)">
<summary>
 User Quota Violations/Second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.WSMan Quota Statistics.Total Requests/Second(Logary.WinPerfCounter.Instance)">
<summary>
 Total Requests/Second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.WSMan Quota Statistics.System Quota Violations/Second(Logary.WinPerfCounter.Instance)">
<summary>
 System Quota Violations/Second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.WSMan Quota Statistics.Process ID(Logary.WinPerfCounter.Instance)">
<summary>
 Process ID: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.WSMan Quota Statistics.Active Users(Logary.WinPerfCounter.Instance)">
<summary>
 Active Users: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.WSMan Quota Statistics.Active Shells(Logary.WinPerfCounter.Instance)">
<summary>
 Active Shells: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.WSMan Quota Statistics.Active Operations(Logary.WinPerfCounter.Instance)">
<summary>
 Active Operations: -
</summary>
</member>
<member name="T:Logary.WinPerfCounters.WSMan Quota Statistics">
<summary>
 WSMan Quota Statistics: Displays quota usage and violation information for WS-Management processes.

 This performance counter does not have instance based counters
</summary>
</member>
<member name="P:Logary.WinPerfCounters.WFPv6.Packets Discarded/sec">
<summary>
 Packets Discarded/sec: Packets Discarded per Second is the rate at which the total of inbound and outbound packets are discarded by the Windows Filtering Platform.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.WFPv6.Outbound Packets Discarded/sec">
<summary>
 Outbound Packets Discarded/sec: Outbound Packets Discarded per Second is the rate at which outbound packets are discarded by the Windows Filtering Platform.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.WFPv6.Outbound Connections Blocked/sec">
<summary>
 Outbound Connections Blocked/sec: Outbound Connections Blocked per Second is the rate at which outbound connections are being blocked by the Windows Filtering Platform.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.WFPv6.Outbound Connections Allowed/sec">
<summary>
 Outbound Connections Allowed/sec: Outbound Connections Allowed per Second is the rate at which outbound connections are being allowed by the Windows Filtering Platform.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.WFPv6.Outbound Connections">
<summary>
 Outbound Connections: Outbound Connections is the number of outbound connections allowed by the Windows Filtering Platform since the computer was last started.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.WFPv6.Inbound Packets Discarded/sec">
<summary>
 Inbound Packets Discarded/sec: Inbound Packets Discarded per Second is the rate at which inbound packets are discarded by the Windows Filtering Platform.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.WFPv6.Inbound Connections Blocked/sec">
<summary>
 Inbound Connections Blocked/sec: Inbound Connections Blocked per Second is the rate at which inbound connections are being blocked by the Windows Filtering Platform.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.WFPv6.Inbound Connections Allowed/sec">
<summary>
 Inbound Connections Allowed/sec: Inbound Connections Allowed per Second is the rate at which inbound connections are being allowed by the Windows Filtering Platform.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.WFPv6.Inbound Connections">
<summary>
 Inbound Connections: Inbound Connections is the number of inbound connections allowed by the Windows Filtering Platform since the computer was last started.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.WFPv6.Blocked Binds">
<summary>
 Blocked Binds: Blocked Binds is the number of network resource assignment requests blocked by the Windows Filtering Platform since the computer was last started.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.WFPv6.Allowed Classifies/sec">
<summary>
 Allowed Classifies/sec: Allowed Classifies per Second is the rate of Windows Filtering Platform security rule evaluations which allow network activity.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.WFPv6.Active Outbound Connections">
<summary>
 Active Outbound Connections: Active Outbound Connections is the number of current outbound connections allowed by the Windows Filtering Platform.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.WFPv6.Active Inbound Connections">
<summary>
 Active Inbound Connections: Active Inbound Connections is the number of current inbound connections allowed by the Windows Filtering Platform.
</summary>
</member>
<member name="T:Logary.WinPerfCounters.WFPv6">
<summary>
 WFPv6: WFPv6 is the set of Windows Filtering Platform counters that apply to traffic and connections over Internet Protocol version 6.

 This performance counter does not have instance based counters
</summary>
</member>
<member name="P:Logary.WinPerfCounters.WFPv4.Packets Discarded/sec">
<summary>
 Packets Discarded/sec: Packets Discarded per Second is the rate at which the total of inbound and outbound packets are discarded by the Windows Filtering Platform.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.WFPv4.Outbound Packets Discarded/sec">
<summary>
 Outbound Packets Discarded/sec: Outbound Packets Discarded per Second is the rate at which outbound packets are discarded by the Windows Filtering Platform.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.WFPv4.Outbound Connections Blocked/sec">
<summary>
 Outbound Connections Blocked/sec: Outbound Connections Blocked per Second is the rate at which outbound connections are being blocked by the Windows Filtering Platform.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.WFPv4.Outbound Connections Allowed/sec">
<summary>
 Outbound Connections Allowed/sec: Outbound Connections Allowed per Second is the rate at which outbound connections are being allowed by the Windows Filtering Platform.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.WFPv4.Outbound Connections">
<summary>
 Outbound Connections: Outbound Connections is the number of outbound connections allowed by the Windows Filtering Platform since the computer was last started.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.WFPv4.Inbound Packets Discarded/sec">
<summary>
 Inbound Packets Discarded/sec: Inbound Packets Discarded per Second is the rate at which inbound packets are discarded by the Windows Filtering Platform.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.WFPv4.Inbound Connections Blocked/sec">
<summary>
 Inbound Connections Blocked/sec: Inbound Connections Blocked per Second is the rate at which inbound connections are being blocked by the Windows Filtering Platform.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.WFPv4.Inbound Connections Allowed/sec">
<summary>
 Inbound Connections Allowed/sec: Inbound Connections Allowed per Second is the rate at which inbound connections are being allowed by the Windows Filtering Platform.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.WFPv4.Inbound Connections">
<summary>
 Inbound Connections: Inbound Connections is the number of inbound connections allowed by the Windows Filtering Platform since the computer was last started.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.WFPv4.Blocked Binds">
<summary>
 Blocked Binds: Blocked Binds is the number of network resource assignment requests blocked by the Windows Filtering Platform since the computer was last started.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.WFPv4.Allowed Classifies/sec">
<summary>
 Allowed Classifies/sec: Allowed Classifies per Second is the rate of Windows Filtering Platform security rule evaluations which allow network activity.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.WFPv4.Active Outbound Connections">
<summary>
 Active Outbound Connections: Active Outbound Connections is the number of current outbound connections allowed by the Windows Filtering Platform.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.WFPv4.Active Inbound Connections">
<summary>
 Active Inbound Connections: Active Inbound Connections is the number of current inbound connections allowed by the Windows Filtering Platform.
</summary>
</member>
<member name="T:Logary.WinPerfCounters.WFPv4">
<summary>
 WFPv4: WFPv4 is the set of Windows Filtering Platform counters that apply to traffic and connections over Internet Protocol version 4.

 This performance counter does not have instance based counters
</summary>
</member>
<member name="P:Logary.WinPerfCounters.WFP.Provider Count">
<summary>
 Provider Count: Provider Count is the number of providers registered with the Windows Filtering Platform.
</summary>
</member>
<member name="T:Logary.WinPerfCounters.WFP">
<summary>
 WFP: WFP is the set of Windows Filtering Platform counters that do not apply to any specific Internet Protocol version.

 This performance counter does not have instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.WF (System_Workflow) 4_0_0_0.Workflows Unloaded/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Workflows Unloaded/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.WF (System_Workflow) 4_0_0_0.Workflows Unloaded(Logary.WinPerfCounter.Instance)">
<summary>
 Workflows Unloaded: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.WF (System_Workflow) 4_0_0_0.Workflows Terminated/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Workflows Terminated/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.WF (System_Workflow) 4_0_0_0.Workflows Terminated(Logary.WinPerfCounter.Instance)">
<summary>
 Workflows Terminated: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.WF (System_Workflow) 4_0_0_0.Workflows Suspended/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Workflows Suspended/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.WF (System_Workflow) 4_0_0_0.Workflows Suspended(Logary.WinPerfCounter.Instance)">
<summary>
 Workflows Suspended: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.WF (System_Workflow) 4_0_0_0.Workflows Runnable(Logary.WinPerfCounter.Instance)">
<summary>
 Workflows Runnable: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.WF (System_Workflow) 4_0_0_0.Workflows Persisted/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Workflows Persisted/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.WF (System_Workflow) 4_0_0_0.Workflows Persisted(Logary.WinPerfCounter.Instance)">
<summary>
 Workflows Persisted: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.WF (System_Workflow) 4_0_0_0.Workflows Pending(Logary.WinPerfCounter.Instance)">
<summary>
 Workflows Pending: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.WF (System_Workflow) 4_0_0_0.Workflows Loaded/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Workflows Loaded/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.WF (System_Workflow) 4_0_0_0.Workflows Loaded(Logary.WinPerfCounter.Instance)">
<summary>
 Workflows Loaded: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.WF (System_Workflow) 4_0_0_0.Workflows In Memory(Logary.WinPerfCounter.Instance)">
<summary>
 Workflows In Memory: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.WF (System_Workflow) 4_0_0_0.Workflows Idle/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Workflows Idle/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.WF (System_Workflow) 4_0_0_0.Workflows Executing(Logary.WinPerfCounter.Instance)">
<summary>
 Workflows Executing: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.WF (System_Workflow) 4_0_0_0.Workflows Created/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Workflows Created/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.WF (System_Workflow) 4_0_0_0.Workflows Created(Logary.WinPerfCounter.Instance)">
<summary>
 Workflows Created: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.WF (System_Workflow) 4_0_0_0.Workflows Completed/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Workflows Completed/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.WF (System_Workflow) 4_0_0_0.Workflows Completed(Logary.WinPerfCounter.Instance)">
<summary>
 Workflows Completed: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.WF (System_Workflow) 4_0_0_0.Workflows Aborted/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Workflows Aborted/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.WF (System_Workflow) 4_0_0_0.Workflows Aborted(Logary.WinPerfCounter.Instance)">
<summary>
 Workflows Aborted: -
</summary>
</member>
<member name="T:Logary.WinPerfCounters.WF (System_Workflow) 4_0_0_0">
<summary>
 WF (System.Workflow) 4.0.0.0: Windows Workflow Foundation Performance Counters

 This performance counter does not have instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.WAS_W3WP.Total WAS Messages Received(Logary.WinPerfCounter.Instance)">
<summary>
 Total WAS Messages Received: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.WAS_W3WP.Total Runtime Status Queries(Logary.WinPerfCounter.Instance)">
<summary>
 Total Runtime Status Queries: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.WAS_W3WP.Total Requests Served(Logary.WinPerfCounter.Instance)">
<summary>
 Total Requests Served: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.WAS_W3WP.Total Messages Sent to WAS(Logary.WinPerfCounter.Instance)">
<summary>
 Total Messages Sent to WAS: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.WAS_W3WP.Total Health Pings.(Logary.WinPerfCounter.Instance)">
<summary>
 Total Health Pings.: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.WAS_W3WP.Health Ping Reply Latency(Logary.WinPerfCounter.Instance)">
<summary>
 Health Ping Reply Latency: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.WAS_W3WP.Active Protocol Handlers(Logary.WinPerfCounter.Instance)">
<summary>
 Active Protocol Handlers: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.WAS_W3WP.Active Listener Channels(Logary.WinPerfCounter.Instance)">
<summary>
 Active Listener Channels: -
</summary>
</member>
<member name="T:Logary.WinPerfCounters.WAS_W3WP">
<summary>
 WAS_W3WP: This counter set exposes Windows Process Activation Service (WAS) related counters for the worker process.

 This performance counter does not have instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.W3SVC_W3WP.WebSocket Connections Rejected / Sec(Logary.WinPerfCounter.Instance)">
<summary>
 WebSocket Connections Rejected / Sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.W3SVC_W3WP.WebSocket Connections Accepted / Sec(Logary.WinPerfCounter.Instance)">
<summary>
 WebSocket Connections Accepted / Sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.W3SVC_W3WP.WebSocket Connection Attempts / Sec(Logary.WinPerfCounter.Instance)">
<summary>
 WebSocket Connection Attempts / Sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.W3SVC_W3WP.WebSocket Active Requests(Logary.WinPerfCounter.Instance)">
<summary>
 WebSocket Active Requests: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.W3SVC_W3WP.Uri Cache Misses / sec(Logary.WinPerfCounter.Instance)">
<summary>
 Uri Cache Misses / sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.W3SVC_W3WP.Uri Cache Hits / sec(Logary.WinPerfCounter.Instance)">
<summary>
 Uri Cache Hits / sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.W3SVC_W3WP.URI Cache Misses(Logary.WinPerfCounter.Instance)">
<summary>
 URI Cache Misses: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.W3SVC_W3WP.URI Cache Hits(Logary.WinPerfCounter.Instance)">
<summary>
 URI Cache Hits: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.W3SVC_W3WP.URI Cache Flushes(Logary.WinPerfCounter.Instance)">
<summary>
 URI Cache Flushes: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.W3SVC_W3WP.Total URIs Cached(Logary.WinPerfCounter.Instance)">
<summary>
 Total URIs Cached: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.W3SVC_W3WP.Total Threads(Logary.WinPerfCounter.Instance)">
<summary>
 Total Threads: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.W3SVC_W3WP.Total Metadata Cached(Logary.WinPerfCounter.Instance)">
<summary>
 Total Metadata Cached: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.W3SVC_W3WP.Total HTTP Requests Served(Logary.WinPerfCounter.Instance)">
<summary>
 Total HTTP Requests Served: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.W3SVC_W3WP.Total Flushed URIs(Logary.WinPerfCounter.Instance)">
<summary>
 Total Flushed URIs: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.W3SVC_W3WP.Total Flushed Metadata(Logary.WinPerfCounter.Instance)">
<summary>
 Total Flushed Metadata: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.W3SVC_W3WP.Total Flushed Files(Logary.WinPerfCounter.Instance)">
<summary>
 Total Flushed Files: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.W3SVC_W3WP.Total Files Cached(Logary.WinPerfCounter.Instance)">
<summary>
 Total Files Cached: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.W3SVC_W3WP.Requests / Sec(Logary.WinPerfCounter.Instance)">
<summary>
 Requests / Sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.W3SVC_W3WP.Output Cache Total Misses(Logary.WinPerfCounter.Instance)">
<summary>
 Output Cache Total Misses: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.W3SVC_W3WP.Output Cache Total Hits(Logary.WinPerfCounter.Instance)">
<summary>
 Output Cache Total Hits: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.W3SVC_W3WP.Output Cache Total Flushes(Logary.WinPerfCounter.Instance)">
<summary>
 Output Cache Total Flushes: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.W3SVC_W3WP.Output Cache Total Flushed Items(Logary.WinPerfCounter.Instance)">
<summary>
 Output Cache Total Flushed Items: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.W3SVC_W3WP.Output Cache Misses / sec(Logary.WinPerfCounter.Instance)">
<summary>
 Output Cache Misses / sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.W3SVC_W3WP.Output Cache Hits / sec(Logary.WinPerfCounter.Instance)">
<summary>
 Output Cache Hits / sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.W3SVC_W3WP.Output Cache Current Memory Usage(Logary.WinPerfCounter.Instance)">
<summary>
 Output Cache Current Memory Usage: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.W3SVC_W3WP.Output Cache Current Items(Logary.WinPerfCounter.Instance)">
<summary>
 Output Cache Current Items: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.W3SVC_W3WP.Output Cache Current Flushed Items(Logary.WinPerfCounter.Instance)">
<summary>
 Output Cache Current Flushed Items: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.W3SVC_W3WP.Metadata Cache Misses / sec(Logary.WinPerfCounter.Instance)">
<summary>
 Metadata Cache Misses / sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.W3SVC_W3WP.Metadata Cache Misses(Logary.WinPerfCounter.Instance)">
<summary>
 Metadata Cache Misses: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.W3SVC_W3WP.Metadata Cache Hits / sec(Logary.WinPerfCounter.Instance)">
<summary>
 Metadata Cache Hits / sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.W3SVC_W3WP.Metadata Cache Hits(Logary.WinPerfCounter.Instance)">
<summary>
 Metadata Cache Hits: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.W3SVC_W3WP.Metadata Cache Flushes(Logary.WinPerfCounter.Instance)">
<summary>
 Metadata Cache Flushes: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.W3SVC_W3WP.Maximum Threads Count(Logary.WinPerfCounter.Instance)">
<summary>
 Maximum Threads Count: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.W3SVC_W3WP.Maximum File Cache Memory Usage(Logary.WinPerfCounter.Instance)">
<summary>
 Maximum File Cache Memory Usage: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.W3SVC_W3WP.File Cache Misses / sec(Logary.WinPerfCounter.Instance)">
<summary>
 File Cache Misses / sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.W3SVC_W3WP.File Cache Misses(Logary.WinPerfCounter.Instance)">
<summary>
 File Cache Misses: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.W3SVC_W3WP.File Cache Hits / sec(Logary.WinPerfCounter.Instance)">
<summary>
 File Cache Hits / sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.W3SVC_W3WP.File Cache Hits(Logary.WinPerfCounter.Instance)">
<summary>
 File Cache Hits: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.W3SVC_W3WP.File Cache Flushes(Logary.WinPerfCounter.Instance)">
<summary>
 File Cache Flushes: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.W3SVC_W3WP.Current URIs Cached(Logary.WinPerfCounter.Instance)">
<summary>
 Current URIs Cached: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.W3SVC_W3WP.Current Metadata Cached(Logary.WinPerfCounter.Instance)">
<summary>
 Current Metadata Cached: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.W3SVC_W3WP.Current Files Cached(Logary.WinPerfCounter.Instance)">
<summary>
 Current Files Cached: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.W3SVC_W3WP.Current File Cache Memory Usage(Logary.WinPerfCounter.Instance)">
<summary>
 Current File Cache Memory Usage: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.W3SVC_W3WP.Active Threads Count(Logary.WinPerfCounter.Instance)">
<summary>
 Active Threads Count: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.W3SVC_W3WP.Active Requests(Logary.WinPerfCounter.Instance)">
<summary>
 Active Requests: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.W3SVC_W3WP.Active Flushed Entries(Logary.WinPerfCounter.Instance)">
<summary>
 Active Flushed Entries: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.W3SVC_W3WP.% 500 HTTP Response Sent(Logary.WinPerfCounter.Instance)">
<summary>
 % 500 HTTP Response Sent: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.W3SVC_W3WP.% 404 HTTP Response Sent(Logary.WinPerfCounter.Instance)">
<summary>
 % 404 HTTP Response Sent: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.W3SVC_W3WP.% 403 HTTP Response Sent(Logary.WinPerfCounter.Instance)">
<summary>
 % 403 HTTP Response Sent: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.W3SVC_W3WP.% 401 HTTP Response Sent(Logary.WinPerfCounter.Instance)">
<summary>
 % 401 HTTP Response Sent: -
</summary>
</member>
<member name="T:Logary.WinPerfCounters.W3SVC_W3WP">
<summary>
 W3SVC_W3WP: This counter set exposes HTTP request processing related counters for the worker process.

 This performance counter does not have instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.USB.Transfer Errors/Sec(Logary.WinPerfCounter.Instance)">
<summary>
 Transfer Errors/Sec: Number of Transfer URBs completing with an error status. For device instances only.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.USB.Isochronous Bytes/Sec(Logary.WinPerfCounter.Instance)">
<summary>
 Isochronous Bytes/Sec: Displays the current isochronous transfer rate in bytes/sec.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.USB.Iso Packet Errors/Sec(Logary.WinPerfCounter.Instance)">
<summary>
 Iso Packet Errors/Sec: Number of ISO packets that are NOT late, but complete with an error. For device instances only.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.USB.Interrupt Bytes/Sec(Logary.WinPerfCounter.Instance)">
<summary>
 Interrupt Bytes/Sec: Displays the current interrupt transfer rate in bytes/sec.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.USB.Host Controller Periodic Idle(Logary.WinPerfCounter.Instance)">
<summary>
 Host Controller Periodic Idle: Non-Zero if the periodic schedule is not running(idle).
</summary>
</member>
<member name="M:Logary.WinPerfCounters.USB.Host Controller Periodic Cache Flush Count(Logary.WinPerfCounter.Instance)">
<summary>
 Host Controller Periodic Cache Flush Count: Incremented each time the controller periodic cache is flushed.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.USB.Host Controller Idle(Logary.WinPerfCounter.Instance)">
<summary>
 Host Controller Idle: Non-zero value if the host controller is not running(idle).
</summary>
</member>
<member name="M:Logary.WinPerfCounters.USB.Host Controller Async Idle(Logary.WinPerfCounter.Instance)">
<summary>
 Host Controller Async Idle: Non-Zero value if the host controller async schedule is not running(idle).
</summary>
</member>
<member name="M:Logary.WinPerfCounters.USB.Host Controller Async Cache Flush Count(Logary.WinPerfCounter.Instance)">
<summary>
 Host Controller Async Cache Flush Count: Incremented each time the controller async cache is flushed.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.USB.Controller WorkSignals/Sec(Logary.WinPerfCounter.Instance)">
<summary>
 Controller WorkSignals/Sec: Displays the current rate Work Signals generated per second by the usbport driver.  For controller instances only.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.USB.Controller PCI Interrupts/Sec(Logary.WinPerfCounter.Instance)">
<summary>
 Controller PCI Interrupts/Sec: Displays the rate of PCI interrupt generation by the USB controller. For controller instances only.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.USB.Control Data Bytes/Sec(Logary.WinPerfCounter.Instance)">
<summary>
 Control Data Bytes/Sec: Displays the current control transfer rate in bytes/sec.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.USB.Bulk Bytes/Sec(Logary.WinPerfCounter.Instance)">
<summary>
 Bulk Bytes/Sec: Displays the current bulk transfer rate in bytes/sec.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.USB.Avg. Bytes/Transfer(Logary.WinPerfCounter.Instance)">
<summary>
 Avg. Bytes/Transfer: Displays the average size of all transfer URBs. For device instances only.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.USB.Avg ms latency for ISO transfers(Logary.WinPerfCounter.Instance)">
<summary>
 Avg ms latency for ISO transfers: Avg number of ms between the current frame and the start frame of an ISO transfer when scheduled.  For device instances only.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.USB.% Total Bandwidth Used for Iso(Logary.WinPerfCounter.Instance)">
<summary>
 % Total Bandwidth Used for Iso: Displays the percentage of BW reserved for ISO transfers
</summary>
</member>
<member name="M:Logary.WinPerfCounters.USB.% Total Bandwidth Used for Interrupt(Logary.WinPerfCounter.Instance)">
<summary>
 % Total Bandwidth Used for Interrupt: Displays the percentage of BW reserved for interrupt transfers
</summary>
</member>
<member name="T:Logary.WinPerfCounters.USB">
<summary>
 USB: USB I/O Counters

 This performance counter does not have non-instance based counters
</summary>
</member>
<member name="P:Logary.WinPerfCounters.UDPv6.Datagrams/sec">
<summary>
 Datagrams/sec: Datagrams/sec is the rate at which UDP datagrams are sent or received by the entity.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.UDPv6.Datagrams Sent/sec">
<summary>
 Datagrams Sent/sec: Datagrams Sent/sec is the rate at which UDP datagrams are sent from the entity.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.UDPv6.Datagrams Received/sec">
<summary>
 Datagrams Received/sec: Datagrams Received/sec is the rate at which UDP datagrams are delivered to UDP users.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.UDPv6.Datagrams Received Errors">
<summary>
 Datagrams Received Errors: Datagrams Received Errors is the number of received UDP datagrams that could not be delivered for reasons other than the lack of an application at the destination port.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.UDPv6.Datagrams No Port/sec">
<summary>
 Datagrams No Port/sec: Datagrams No Port/sec is the rate of received UDP datagrams for which there was no application at the destination port.
</summary>
</member>
<member name="T:Logary.WinPerfCounters.UDPv6">
<summary>
 UDPv6: The UDP performance object consists of counters that measure the rates at which UDP datagrams are sent and received by using the UDP protocol.  It includes counters that monitor UDP protocol errors.

 This performance counter does not have instance based counters
</summary>
</member>
<member name="P:Logary.WinPerfCounters.UDPv4.Datagrams/sec">
<summary>
 Datagrams/sec: Datagrams/sec is the rate at which UDP datagrams are sent or received by the entity.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.UDPv4.Datagrams Sent/sec">
<summary>
 Datagrams Sent/sec: Datagrams Sent/sec is the rate at which UDP datagrams are sent from the entity.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.UDPv4.Datagrams Received/sec">
<summary>
 Datagrams Received/sec: Datagrams Received/sec is the rate at which UDP datagrams are delivered to UDP users.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.UDPv4.Datagrams Received Errors">
<summary>
 Datagrams Received Errors: Datagrams Received Errors is the number of received UDP datagrams that could not be delivered for reasons other than the lack of an application at the destination port.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.UDPv4.Datagrams No Port/sec">
<summary>
 Datagrams No Port/sec: Datagrams No Port/sec is the rate of received UDP datagrams for which there was no application at the destination port.
</summary>
</member>
<member name="T:Logary.WinPerfCounters.UDPv4">
<summary>
 UDPv4: The UDP performance object consists of counters that measure the rates at which UDP datagrams are sent and received by using the UDP protocol.  It includes counters that monitor UDP protocol errors.

 This performance counter does not have instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Thread.Thread Wait Reason(Logary.WinPerfCounter.Instance)">
<summary>
 Thread Wait Reason: Thread Wait Reason is only applicable when the thread is in the Wait state (see Thread State).  It is 0 or 7 when the thread is waiting for the Executive, 1 or 8 for a Free Page, 2 or 9 for a Page In, 3 or 10 for a Pool Allocation, 4 or 11 for an Execution Delay, 5 or 12 for a Suspended condition, 6 or 13 for a User Request, 14 for an Event Pair High, 15 for an Event Pair Low, 16 for an LPC Receive, 17 for an LPC Reply, 18 for Virtual Memory, 19 for a Page Out; 20 and higher are not assigned at the time of this writing.  Event Pairs are used to communicate with protected subsystems (see Context Switches).
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Thread.Thread State(Logary.WinPerfCounter.Instance)">
<summary>
 Thread State: Thread State is the current state of the thread.  It is 0 for Initialized, 1 for Ready, 2 for Running, 3 for Standby, 4 for Terminated, 5 for Wait, 6 for Transition, 7 for Unknown.  A Running thread is using a processor; a Standby thread is about to use one.  A Ready thread wants to use a processor, but is waiting for a processor because none are free.  A thread in Transition is waiting for a resource in order to execute, such as waiting for its execution stack to be paged in from disk.  A Waiting thread has no use for the processor because it is waiting for a peripheral operation to complete or a resource to become free.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Thread.Start Address(Logary.WinPerfCounter.Instance)">
<summary>
 Start Address: Starting virtual address for this thread.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Thread.Priority Current(Logary.WinPerfCounter.Instance)">
<summary>
 Priority Current: The current dynamic priority of this thread.  The system can raise the thread&apos;s dynamic priority above the base priority if the thread is handling user input, or lower it towards the base priority if the thread becomes compute bound.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Thread.Priority Base(Logary.WinPerfCounter.Instance)">
<summary>
 Priority Base: The current base priority of this thread.  The system can raise the thread&apos;s dynamic priority above the base priority if the thread is handling user input, or lower it towards the base priority if the thread becomes compute bound.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Thread.ID Thread(Logary.WinPerfCounter.Instance)">
<summary>
 ID Thread: ID Thread is the unique identifier of this thread.  ID Thread numbers are reused, so they only identify a thread for the lifetime of that thread.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Thread.ID Process(Logary.WinPerfCounter.Instance)">
<summary>
 ID Process: ID Process is the unique identifier of this process. ID Process numbers are reused, so they only identify a process for the lifetime of that process.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Thread.Elapsed Time(Logary.WinPerfCounter.Instance)">
<summary>
 Elapsed Time: The total elapsed time (in seconds) this thread has been running.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Thread.Context Switches/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Context Switches/sec: Context Switches/sec is the rate of switches from one thread to another.  Thread switches can occur either inside of a single process or across processes.  A thread switch can be caused either by one thread asking another for information, or by a thread being preempted by another, higher priority thread becoming ready to run.  Unlike some early operating systems, Windows NT uses process boundaries for subsystem protection in addition to the traditional protection of user and privileged modes.  These subsystem processes provide additional protection.  Therefore, some work done by Windows NT on behalf of an application  appear in other subsystem processes in addition to the privileged time in the application.  Switching to the subsystem process causes one Context Switch in the application thread.  Switching back causes another Context Switch in the subsystem thread.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Thread.% User Time(Logary.WinPerfCounter.Instance)">
<summary>
 % User Time: % User Time is the percentage of elapsed time that this thread has spent executing code in user mode.  Applications, environment subsystems, and integral subsystems execute in user mode.  Code executing in user mode cannot damage the integrity of the Windows NT Executive, Kernel, and device drivers.  Unlike some early operating systems, Windows NT uses process boundaries for subsystem protection in addition to the traditional protection of user and privileged modes.  These subsystem processes provide additional protection.  Therefore, some work done by Windows NT on behalf of your application might appear in other subsystem processes in addition to the privileged time in your process.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Thread.% Processor Time(Logary.WinPerfCounter.Instance)">
<summary>
 % Processor Time: % Processor Time is the percentage of elapsed time that all of process threads used the processor to execution instructions. An instruction is the basic unit of execution in a computer, a thread is the object that executes instructions, and a process is the object created when a program is run. Code executed to handle some hardware interrupts and trap conditions are included in this count.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Thread.% Privileged Time(Logary.WinPerfCounter.Instance)">
<summary>
 % Privileged Time: % Privileged Time is the percentage of elapsed time that the process threads spent executing code in privileged mode.  When a Windows system service in called, the service will often run in privileged mode to gain access to system-private data. Such data is protected from access by threads executing in user mode. Calls to the system can be explicit or implicit, such as page faults or interrupts. Unlike some early operating systems, Windows uses process boundaries for subsystem protection in addition to the traditional protection of user and privileged modes. Some work done by Windows on behalf of the application might appear in other subsystem processes in addition to the privileged time in the process.
</summary>
</member>
<member name="T:Logary.WinPerfCounters.Thread">
<summary>
 Thread: The Thread performance object consists of counters that measure aspects of thread behavior.  A thread is the basic object that executes instructions on a processor.  All running processes have at least one thread.

 This performance counter does not have non-instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Terminal Services Session.Working Set Peak(Logary.WinPerfCounter.Instance)">
<summary>
 Working Set Peak: Working Set Peak is the maximum size, in bytes, of the Working Set of this process at any point in time. The Working Set is the set of memory pages touched recently by the threads in the process. If free memory in the computer is above a threshold, pages are left in the Working Set of a process even if they are not in use. When free memory falls below a threshold, pages are trimmed from Working Sets. If they are needed they will then be soft-faulted back into the Working Set before they leave main memory.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Terminal Services Session.Working Set(Logary.WinPerfCounter.Instance)">
<summary>
 Working Set: Working Set is the current size, in bytes, of the Working Set of this process. The Working Set is the set of memory pages touched recently by the threads in the process. If free memory in the computer is above a threshold, pages are left in the Working Set of a process even if they are not in use.  When free memory falls below a threshold, pages are trimmed from Working Sets. If they are needed they will then be soft-faulted back into the Working Set before leaving main memory.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Terminal Services Session.Virtual Bytes Peak(Logary.WinPerfCounter.Instance)">
<summary>
 Virtual Bytes Peak: Virtual Bytes Peak is the maximum size, in bytes, of virtual address space the process has used at any one time. Use of virtual address space does not necessarily imply corresponding use of either disk or main memory pages. However, virtual space is finite, and the process might limit its ability to load libraries.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Terminal Services Session.Virtual Bytes(Logary.WinPerfCounter.Instance)">
<summary>
 Virtual Bytes: Virtual Bytes is the current size, in bytes, of the virtual address space the process is using. Use of virtual address space does not necessarily imply corresponding use of either disk or main memory pages. Virtual space is finite, and the process can limit its ability to load libraries.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Terminal Services Session.Thread Count(Logary.WinPerfCounter.Instance)">
<summary>
 Thread Count: The number of threads currently active in this process. An instruction is the basic unit of execution in a processor, and a thread is the object that executes instructions. Every running process has at least one thread.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Terminal Services Session.Private Bytes(Logary.WinPerfCounter.Instance)">
<summary>
 Private Bytes: Private Bytes is the current size, in bytes, of memory that this process has allocated that cannot be shared with other processes.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Terminal Services Session.Pool Paged Bytes(Logary.WinPerfCounter.Instance)">
<summary>
 Pool Paged Bytes: Pool Paged Bytes is the size, in bytes, of the paged pool, an area of the system virtual memory that is used for objects that can be written to disk when they are not being used.  Memory\\Pool Paged Bytes is calculated differently than Process\\Pool Paged Bytes, so it might not equal Process(_Total)\\Pool Paged Bytes. This counter displays the last observed value only; it is not an average.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Terminal Services Session.Pool Nonpaged Bytes(Logary.WinPerfCounter.Instance)">
<summary>
 Pool Nonpaged Bytes: Pool Nonpaged Bytes is the size, in bytes, of the nonpaged pool, an area of the system virtual memory that is used for objects that cannot be written to disk, but must remain in physical memory as long as they are allocated.  Memory\\Pool Nonpaged Bytes is calculated differently than Process\\Pool Nonpaged Bytes, so it might not equal Process(_Total)\\Pool Nonpaged Bytes.  This counter displays the last observed value only; it is not an average.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Terminal Services Session.Page File Bytes Peak(Logary.WinPerfCounter.Instance)">
<summary>
 Page File Bytes Peak: Page File Bytes Peak is the maximum amount of virtual memory, in bytes, that this process has reserved for use in the paging file(s). Paging files are used to store pages of memory used by the process that are not contained in other files.  Paging files are shared by all processes, and the lack of space in paging files can prevent other processes from allocating memory. If there is no paging file, this counter reflects the maximum amount of virtual memory that the process has reserved for use in physical memory.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Terminal Services Session.Page File Bytes(Logary.WinPerfCounter.Instance)">
<summary>
 Page File Bytes: Page File Bytes is the current amount of virtual memory, in bytes, that this process has reserved for use in the paging file(s). Paging files are used to store pages of memory used by the process that are not contained in other files. Paging files are shared by all processes, and the lack of space in paging files can prevent other processes from allocating memory. If there is no paging file, this counter reflects the current amount of virtual memory that the process has reserved for use in physical memory.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Terminal Services Session.Page Faults/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Page Faults/sec: Page Faults/sec is the rate at which page faults by the threads executing in this process are occurring.  A page fault occurs when a thread refers to a virtual memory page that is not in its working set in main memory. This may not cause the page to be fetched from disk if it is on the standby list and hence already in main memory, or if it is in use by another process with whom the page is shared.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Terminal Services Session.Handle Count(Logary.WinPerfCounter.Instance)">
<summary>
 Handle Count: The total number of handles currently open by this process. This number is equal to the sum of the handles currently open by each thread in this process.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Terminal Services Session.% User Time(Logary.WinPerfCounter.Instance)">
<summary>
 % User Time: % User Time is the percentage of elapsed time that the process threads spent executing code in user mode. Applications, environment subsystems, and integral subsystems execute in user mode. Code executing in user mode cannot damage the integrity of the Windows executive, kernel, and device drivers. Unlike some early operating systems, Windows uses process boundaries for subsystem protection in addition to the traditional protection of user and privileged modes. Some work done by Windows on behalf of the application might appear in other subsystem processes in addition to the privileged time in the process.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Terminal Services Session.% Processor Time(Logary.WinPerfCounter.Instance)">
<summary>
 % Processor Time: % Processor Time is the percentage of elapsed time that all of process threads used the processor to execution instructions. An instruction is the basic unit of execution in a computer, a thread is the object that executes instructions, and a process is the object created when a program is run. Code executed to handle some hardware interrupts and trap conditions are included in this count.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Terminal Services Session.% Privileged Time(Logary.WinPerfCounter.Instance)">
<summary>
 % Privileged Time: % Privileged Time is the percentage of elapsed time that the process threads spent executing code in privileged mode. When a Windows system service is called, the service will often run in privileged mode to gain access to system-private data. Such data is protected from access by threads executing in user mode. Calls to the system can be explicit or implicit, such as page faults or interrupts. Unlike some early operating systems, Windows uses process boundaries for subsystem protection in addition to the traditional protection of user and privileged modes. Some work done by Windows on behalf of the application might appear in other subsystem processes in addition to the privileged time in the process.
</summary>
</member>
<member name="T:Logary.WinPerfCounters.Terminal Services Session">
<summary>
 Terminal Services Session: Terminal Services per-session resource monitoring.

 This performance counter does not have non-instance based counters
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Terminal Services.Total Sessions">
<summary>
 Total Sessions: Total number Terminal services sessions
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Terminal Services.Inactive Sessions">
<summary>
 Inactive Sessions: Number of inactive Terminal Services sessions
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Terminal Services.Active Sessions">
<summary>
 Active Sessions: Number of active Terminal Services sessions
</summary>
</member>
<member name="T:Logary.WinPerfCounters.Terminal Services">
<summary>
 Terminal Services: Terminal Services Summary Information

 This performance counter does not have instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Teredo Server.Out - Teredo Server: RA-Secondary (Logary.WinPerfCounter.Instance)">
<summary>
 Out - Teredo Server: RA-Secondary : Total Router Advertisements sent by the secondary server.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Teredo Server.Out - Teredo Server: RA-Primary(Logary.WinPerfCounter.Instance)">
<summary>
 Out - Teredo Server: RA-Primary: Total Router Advertisements sent by the primary server.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Teredo Server.In - Teredo Server Total Packets: Success + Error / sec(Logary.WinPerfCounter.Instance)">
<summary>
 In - Teredo Server Total Packets: Success + Error / sec: Rate of total packets received by the Teredo server.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Teredo Server.In - Teredo Server Total Packets: Success + Error(Logary.WinPerfCounter.Instance)">
<summary>
 In - Teredo Server Total Packets: Success + Error: Total packets received by the Teredo server.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Teredo Server.In - Teredo Server Success Packets: Total(Logary.WinPerfCounter.Instance)">
<summary>
 In - Teredo Server Success Packets: Total: Total valid packets received by the Teredo server.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Teredo Server.In - Teredo Server Success Packets: RS-Secondary(Logary.WinPerfCounter.Instance)">
<summary>
 In - Teredo Server Success Packets: RS-Secondary: Total Router Solicitations received by the secondary server
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Teredo Server.In - Teredo Server Success Packets: RS-Primary(Logary.WinPerfCounter.Instance)">
<summary>
 In - Teredo Server Success Packets: RS-Primary: Total Router Solicitations received by the primary server.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Teredo Server.In - Teredo Server Success Packets: Echo(Logary.WinPerfCounter.Instance)">
<summary>
 In - Teredo Server Success Packets: Echo: Total echo packets received by the Teredo server.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Teredo Server.In - Teredo Server Success Packets: Bubbles(Logary.WinPerfCounter.Instance)">
<summary>
 In - Teredo Server Success Packets: Bubbles: Total bubbles received by the Teredo server.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Teredo Server.In - Teredo Server Error Packets: Total(Logary.WinPerfCounter.Instance)">
<summary>
 In - Teredo Server Error Packets: Total: Total error packets received by the Teredo server.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Teredo Server.In - Teredo Server Error Packets: Source Error(Logary.WinPerfCounter.Instance)">
<summary>
 In - Teredo Server Error Packets: Source Error: Total error packets( source error) received by the Teredo server.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Teredo Server.In - Teredo Server Error Packets: Header Error(Logary.WinPerfCounter.Instance)">
<summary>
 In - Teredo Server Error Packets: Header Error: Total error packets( header error) received by the Teredo server.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Teredo Server.In - Teredo Server Error Packets: Destination Error(Logary.WinPerfCounter.Instance)">
<summary>
 In - Teredo Server Error Packets: Destination Error: Total error packets( destination error) received by the Teredo server.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Teredo Server.In - Teredo Server Error Packets: Authentication Error(Logary.WinPerfCounter.Instance)">
<summary>
 In - Teredo Server Error Packets: Authentication Error: Total error packets( authentication error) received by the Teredo server.
</summary>
</member>
<member name="T:Logary.WinPerfCounters.Teredo Server">
<summary>
 Teredo Server: Statistics of Teredo server hosted on this machine.

 This performance counter does not have non-instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Teredo Relay.Out - Teredo Relay Total Packets: Success + Error / sec(Logary.WinPerfCounter.Instance)">
<summary>
 Out - Teredo Relay Total Packets: Success + Error / sec: Rate of total packets sent by the Teredo relay.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Teredo Relay.Out - Teredo Relay Total Packets: Success + Error(Logary.WinPerfCounter.Instance)">
<summary>
 Out - Teredo Relay Total Packets: Success + Error: Total packets sent by the Teredo relay.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Teredo Relay.Out - Teredo Relay Success Packets: Data Packets User Mode(Logary.WinPerfCounter.Instance)">
<summary>
 Out - Teredo Relay Success Packets: Data Packets User Mode: Total data packets sent by the Teredo relay in user mode.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Teredo Relay.Out - Teredo Relay Success Packets: Data Packets Kernel Mode(Logary.WinPerfCounter.Instance)">
<summary>
 Out - Teredo Relay Success Packets: Data Packets Kernel Mode: Total data packets sent by the Teredo relay in kernel mode.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Teredo Relay.Out - Teredo Relay Success Packets: Data Packets(Logary.WinPerfCounter.Instance)">
<summary>
 Out - Teredo Relay Success Packets: Data Packets: Total data packets sent by the Teredo relay.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Teredo Relay.Out - Teredo Relay Success Packets: Bubbles(Logary.WinPerfCounter.Instance)">
<summary>
 Out - Teredo Relay Success Packets: Bubbles: Total bubbles sent by the Teredo relay.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Teredo Relay.Out - Teredo Relay Success Packets(Logary.WinPerfCounter.Instance)">
<summary>
 Out - Teredo Relay Success Packets: Total packets successfully sent by the Teredo relay.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Teredo Relay.Out - Teredo Relay Error Packets: Source Error(Logary.WinPerfCounter.Instance)">
<summary>
 Out - Teredo Relay Error Packets: Source Error: Total packets failed( source error) to be sent by the Teredo relay.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Teredo Relay.Out - Teredo Relay Error Packets: Header Error(Logary.WinPerfCounter.Instance)">
<summary>
 Out - Teredo Relay Error Packets: Header Error: Total packets failed( header error) to be sent by the Teredo relay.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Teredo Relay.Out - Teredo Relay Error Packets: Destination Error(Logary.WinPerfCounter.Instance)">
<summary>
 Out - Teredo Relay Error Packets: Destination Error: Total packets failed( destination error) to be sent by the Teredo relay.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Teredo Relay.Out - Teredo Relay Error Packets(Logary.WinPerfCounter.Instance)">
<summary>
 Out - Teredo Relay Error Packets: Total packets failed to be sent by the Teredo relay.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Teredo Relay.In - Teredo Relay Total Packets: Success + Error / sec(Logary.WinPerfCounter.Instance)">
<summary>
 In - Teredo Relay Total Packets: Success + Error / sec: Rate of total packets received by the Teredo relay.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Teredo Relay.In - Teredo Relay Total Packets: Success + Error(Logary.WinPerfCounter.Instance)">
<summary>
 In - Teredo Relay Total Packets: Success + Error: Total packets received by the Teredo relay.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Teredo Relay.In - Teredo Relay Success Packets: Total(Logary.WinPerfCounter.Instance)">
<summary>
 In - Teredo Relay Success Packets: Total: Total valid packets received by the Teredo relay.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Teredo Relay.In - Teredo Relay Success Packets: Data Packets User Mode(Logary.WinPerfCounter.Instance)">
<summary>
 In - Teredo Relay Success Packets: Data Packets User Mode: Total data packets received by the Teredo relay in user mode.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Teredo Relay.In - Teredo Relay Success Packets: Data Packets Kernel Mode(Logary.WinPerfCounter.Instance)">
<summary>
 In - Teredo Relay Success Packets: Data Packets Kernel Mode: Total data packets received by the Teredo relay in kernel mode.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Teredo Relay.In - Teredo Relay Success Packets: Data Packets(Logary.WinPerfCounter.Instance)">
<summary>
 In - Teredo Relay Success Packets: Data Packets: Total data packets received by the Teredo relay.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Teredo Relay.In - Teredo Relay Success Packets: Bubbles(Logary.WinPerfCounter.Instance)">
<summary>
 In - Teredo Relay Success Packets: Bubbles: Total bubbles received by the Teredo relay.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Teredo Relay.In - Teredo Relay Error Packets: Total(Logary.WinPerfCounter.Instance)">
<summary>
 In - Teredo Relay Error Packets: Total: Total error packets received by the Teredo relay.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Teredo Relay.In - Teredo Relay Error Packets: Source Error(Logary.WinPerfCounter.Instance)">
<summary>
 In - Teredo Relay Error Packets: Source Error: Total error packets( source error) received by the Teredo relay.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Teredo Relay.In - Teredo Relay Error Packets: Header Error(Logary.WinPerfCounter.Instance)">
<summary>
 In - Teredo Relay Error Packets: Header Error: Total error packets( header error) received by the Teredo relay.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Teredo Relay.In - Teredo Relay Error Packets: Destination Error(Logary.WinPerfCounter.Instance)">
<summary>
 In - Teredo Relay Error Packets: Destination Error: Total error packets( destination error) received by the Teredo relay.
</summary>
</member>
<member name="T:Logary.WinPerfCounters.Teredo Relay">
<summary>
 Teredo Relay: Statistics of Teredo relay hosted on this machine.

 This performance counter does not have non-instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Teredo Client.Out - Teredo Router Solicitation(Logary.WinPerfCounter.Instance)">
<summary>
 Out - Teredo Router Solicitation: Total Router Solicitation packets sent by the Teredo client.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Teredo Client.Out - Teredo Data User Mode(Logary.WinPerfCounter.Instance)">
<summary>
 Out - Teredo Data User Mode: Total data packets sent by the Teredo client in user mode.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Teredo Client.Out - Teredo Data Kernel Mode(Logary.WinPerfCounter.Instance)">
<summary>
 Out - Teredo Data Kernel Mode: Total data packets sent by the Teredo client in kernel mode.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Teredo Client.Out - Teredo Data(Logary.WinPerfCounter.Instance)">
<summary>
 Out - Teredo Data: Total data packets sent by the Teredo client.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Teredo Client.Out - Teredo Bubble(Logary.WinPerfCounter.Instance)">
<summary>
 Out - Teredo Bubble: Total bubble packets sent by the Teredo client.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Teredo Client.In - Teredo Router Advertisement(Logary.WinPerfCounter.Instance)">
<summary>
 In - Teredo Router Advertisement: Total Router Advertisement packets received by the Teredo client.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Teredo Client.In - Teredo Invalid(Logary.WinPerfCounter.Instance)">
<summary>
 In - Teredo Invalid: Total error packets received by the Teredo client.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Teredo Client.In - Teredo Data User Mode(Logary.WinPerfCounter.Instance)">
<summary>
 In - Teredo Data User Mode: Total data packets received by the Teredo client in user mode.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Teredo Client.In - Teredo Data Kernel Mode(Logary.WinPerfCounter.Instance)">
<summary>
 In - Teredo Data Kernel Mode: Total data packets received by the Teredo client in kernel mode.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Teredo Client.In - Teredo Data(Logary.WinPerfCounter.Instance)">
<summary>
 In - Teredo Data: Total data packets received by the Teredo client.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Teredo Client.In - Teredo Bubble(Logary.WinPerfCounter.Instance)">
<summary>
 In - Teredo Bubble: Total bubble packets received by the Teredo client.
</summary>
</member>
<member name="T:Logary.WinPerfCounters.Teredo Client">
<summary>
 Teredo Client: Statistics of Teredo client.

 This performance counter does not have non-instance based counters
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Telephony.Telephone Devices">
<summary>
 Telephone Devices: The number of telephone devices serviced by this computer.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Telephony.Outgoing Calls/sec">
<summary>
 Outgoing Calls/sec: The rate of outgoing calls made by this computer.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Telephony.Lines">
<summary>
 Lines: The number of telephone lines serviced by this computer.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Telephony.Incoming Calls/sec">
<summary>
 Incoming Calls/sec: The rate of incoming calls answered by this computer.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Telephony.Current Outgoing Calls">
<summary>
 Current Outgoing Calls: Current outgoing calls being serviced by this computer.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Telephony.Current Incoming Calls">
<summary>
 Current Incoming Calls: Current incoming calls being serviced by this computer.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Telephony.Client Apps">
<summary>
 Client Apps: The number of applications that are currently using telephony services.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Telephony.Active Telephones">
<summary>
 Active Telephones: The number of telephone devices that are currently being monitored.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Telephony.Active Lines">
<summary>
 Active Lines: The number of telephone lines serviced by this computer that are currently active.
</summary>
</member>
<member name="T:Logary.WinPerfCounters.Telephony">
<summary>
 Telephony: The Telephony System

 This performance counter does not have instance based counters
</summary>
</member>
<member name="P:Logary.WinPerfCounters.TCPv6.Segments/sec">
<summary>
 Segments/sec: Segments/sec is the rate at which TCP segments are sent or received using the TCP protocol.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.TCPv6.Segments Sent/sec">
<summary>
 Segments Sent/sec: Segments Sent/sec is the rate at which segments are sent, including those on current connections, but excluding those containing only retransmitted bytes.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.TCPv6.Segments Retransmitted/sec">
<summary>
 Segments Retransmitted/sec: Segments Retransmitted/sec is the rate at which segments are retransmitted, that is, segments transmitted containing one or more previously transmitted bytes.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.TCPv6.Segments Received/sec">
<summary>
 Segments Received/sec: Segments Received/sec is the rate at which segments are received, including those received in error.  This count includes segments received on currently established connections.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.TCPv6.Connections Reset">
<summary>
 Connections Reset: Connections Reset is the number of times TCP connections have made a direct transition to the CLOSED state from either the ESTABLISHED state or the CLOSE-WAIT state.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.TCPv6.Connections Passive">
<summary>
 Connections Passive: Connections Passive is the number of times TCP connections have made a direct transition to the SYN-RCVD state from the LISTEN state. In other words, it shows a number of connections to the local computer, which are initiated by remote computers. The value is a cumulative total.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.TCPv6.Connections Established">
<summary>
 Connections Established: Connections Established is the number of TCP connections for which the current state is either ESTABLISHED or CLOSE-WAIT.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.TCPv6.Connections Active">
<summary>
 Connections Active: Connections Active is the number of times TCP connections have made a direct transition to the SYN-SENT state from the CLOSED state. In other words, it shows a number of connections which are initiated by the local computer. The value is a cumulative total.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.TCPv6.Connection Failures">
<summary>
 Connection Failures: Connection Failures is the number of times TCP connections have made a direct transition to the CLOSED state from the SYN-SENT state or the SYN-RCVD state, plus the number of times TCP connections have made a direct transition to the LISTEN state from the SYN-RCVD state.
</summary>
</member>
<member name="T:Logary.WinPerfCounters.TCPv6">
<summary>
 TCPv6: The TCP performance object consists of counters that measure the rates at which TCP Segments are sent and received by using the TCP protocol.  It includes counters that monitor the number of TCP connections in each TCP connection state.

 This performance counter does not have instance based counters
</summary>
</member>
<member name="P:Logary.WinPerfCounters.TCPv4.Segments/sec">
<summary>
 Segments/sec: Segments/sec is the rate at which TCP segments are sent or received using the TCP protocol.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.TCPv4.Segments Sent/sec">
<summary>
 Segments Sent/sec: Segments Sent/sec is the rate at which segments are sent, including those on current connections, but excluding those containing only retransmitted bytes.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.TCPv4.Segments Retransmitted/sec">
<summary>
 Segments Retransmitted/sec: Segments Retransmitted/sec is the rate at which segments are retransmitted, that is, segments transmitted containing one or more previously transmitted bytes.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.TCPv4.Segments Received/sec">
<summary>
 Segments Received/sec: Segments Received/sec is the rate at which segments are received, including those received in error.  This count includes segments received on currently established connections.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.TCPv4.Connections Reset">
<summary>
 Connections Reset: Connections Reset is the number of times TCP connections have made a direct transition to the CLOSED state from either the ESTABLISHED state or the CLOSE-WAIT state.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.TCPv4.Connections Passive">
<summary>
 Connections Passive: Connections Passive is the number of times TCP connections have made a direct transition to the SYN-RCVD state from the LISTEN state. In other words, it shows a number of connections to the local computer, which are initiated by remote computers. The value is a cumulative total.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.TCPv4.Connections Established">
<summary>
 Connections Established: Connections Established is the number of TCP connections for which the current state is either ESTABLISHED or CLOSE-WAIT.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.TCPv4.Connections Active">
<summary>
 Connections Active: Connections Active is the number of times TCP connections have made a direct transition to the SYN-SENT state from the CLOSED state. In other words, it shows a number of connections which are initiated by the local computer. The value is a cumulative total.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.TCPv4.Connection Failures">
<summary>
 Connection Failures: Connection Failures is the number of times TCP connections have made a direct transition to the CLOSED state from the SYN-SENT state or the SYN-RCVD state, plus the number of times TCP connections have made a direct transition to the LISTEN state from the SYN-RCVD state.
</summary>
</member>
<member name="T:Logary.WinPerfCounters.TCPv4">
<summary>
 TCPv4: The TCP performance object consists of counters that measure the rates at which TCP Segments are sent and received by using the TCP protocol.  It includes counters that monitor the number of TCP connections in each TCP connection state.

 This performance counter does not have instance based counters
</summary>
</member>
<member name="P:Logary.WinPerfCounters.System.Threads">
<summary>
 Threads: Threads is the number of threads in the computer at the time of data collection. This is an instantaneous count, not an average over the time interval.  A thread is the basic executable entity that can execute instructions in a processor.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.System.System Up Time">
<summary>
 System Up Time: System Up Time is the elapsed time (in seconds) that the computer has been running since it was last started.  This counter displays the difference between the start time and the current time.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.System.System Calls/sec">
<summary>
 System Calls/sec: System Calls/sec is the combined rate of calls to operating system service routines by all processes running on the computer. These routines perform all of the basic scheduling and synchronization of activities on the computer, and provide access to non-graphic devices, memory management, and name space management. This counter displays the difference between the values observed in the last two samples, divided by the duration of the sample interval.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.System.Processor Queue Length">
<summary>
 Processor Queue Length: Processor Queue Length is the number of threads in the processor queue.  Unlike the disk counters, this counter counters, this counter shows ready threads only, not threads that are running.  There is a single queue for processor time even on computers with multiple processors. Therefore, if a computer has multiple processors, you need to divide this value by the number of processors servicing the workload. A sustained processor queue of less than 10 threads per processor is normally acceptable, dependent of the workload.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.System.Processes">
<summary>
 Processes: Processes is the number of processes in the computer at the time of data collection. This is an instantaneous count, not an average over the time interval.  Each process represents the running of a program.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.System.Floating Emulations/sec">
<summary>
 Floating Emulations/sec: Floating Emulations/sec is the rate of floating emulations performed by the system.  This counter displays the difference between the values observed in the last two samples, divided by the duration of the sample interval.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.System.File Write Operations/sec">
<summary>
 File Write Operations/sec: File Write Operations/sec is the combined rate of the file system write requests to all devices on the computer, including requests to write to data in the file system cache.  It is measured in numbers of writes. This counter displays the difference between the values observed in the last two samples, divided by the duration of the sample interval.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.System.File Write Bytes/sec">
<summary>
 File Write Bytes/sec: File Write Bytes/sec is the overall rate at which bytes are written to satisfy file system write requests to all devices on the computer, including writes to the file system cache.  It is measured in number of bytes per second.  This counter displays the difference between the values observed in the last two samples, divided by the duration of the sample interval.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.System.File Read Operations/sec">
<summary>
 File Read Operations/sec: File Read Operations/sec is the combined rate of file system read requests to all devices on the computer, including requests to read from the file system cache.  It is measured in numbers of reads.  This counter displays the difference between the values observed in the last two samples, divided by the duration of the sample interval.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.System.File Read Bytes/sec">
<summary>
 File Read Bytes/sec: File Read Bytes/sec is the overall rate at which bytes are read to satisfy  file system read requests to all devices on the computer, including reads from the file system cache.  It is measured in number of bytes per second.  This counter displays the difference between the values observed in the last two samples, divided by the duration of the sample interval.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.System.File Data Operations/sec">
<summary>
 File Data Operations/sec: File Data Operations/ sec is the combined rate of read and write operations on all logical disks on the computer.  This is the inverse of System: File Control Operations/sec.  This counter displays the difference between the values observed in the last two samples, divided by the duration of the sample interval.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.System.File Control Operations/sec">
<summary>
 File Control Operations/sec: File Control Operations/sec is the combined rate of file system operations that are neither reads nor writes, such as file system control requests and requests for information about device characteristics or status.  This is the inverse of System: File Data Operations/sec and is measured in number of operations perf second.  This counter displays the difference between the values observed in the last two samples, divided by the duration of the sample interval.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.System.File Control Bytes/sec">
<summary>
 File Control Bytes/sec: File Control Bytes/sec is the overall rate at which bytes are transferred for all file system operations that are neither reads nor writes, including file system control requests and requests for information about device characteristics or status.  It is measured in numbers of bytes.  This counter displays the difference between the values observed in the last two samples, divided by the duration of the sample interval.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.System.Exception Dispatches/sec">
<summary>
 Exception Dispatches/sec: Exception Dispatches/sec is the rate, in incidents per second, at which exceptions were dispatched by the system.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.System.Context Switches/sec">
<summary>
 Context Switches/sec: Context Switches/sec is the combined rate at which all processors on the computer are switched from one thread to another.  Context switches occur when a running thread voluntarily relinquishes the processor, is preempted by a higher priority ready thread, or switches between user-mode and privileged (kernel) mode to use an Executive or subsystem service.  It is the sum of Thread\\Context Switches/sec for all threads running on all processors in the computer and is measured in numbers of switches.  There are context switch counters on the System and Thread objects. This counter displays the difference between the values observed in the last two samples, divided by the duration of the sample interval.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.System.Alignment Fixups/sec">
<summary>
 Alignment Fixups/sec: Alignment Fixups/sec is the rate, in incidents per seconds, at alignment faults were fixed by the system.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.System.% Registry Quota In Use">
<summary>
 % Registry Quota In Use: % Registry Quota In Use is the percentage of the Total Registry Quota Allowed that is currently being used by the system.  This counter displays the current percentage value only; it is not an average.
</summary>
</member>
<member name="T:Logary.WinPerfCounters.System">
<summary>
 System: The System performance object consists of counters that apply to more than one instance of a component processors on the computer.

 This performance counter does not have instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SynchronizationNuma.Spinlock Spins/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Spinlock Spins/sec: Spinlock spins/sec is the rate of spinlock spins. It includes the spins to acquire basic spinlocks, queued spinlocks, in-stack queued spinlocks, and shared spinlocks.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SynchronizationNuma.Spinlock Contentions/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Spinlock Contentions/sec: Spinlock contentions/sec is the rate of spinlock contentions. It includes the basic spinlocks, queued spinlocks, in-stack queued spinlocks, and shared spinlocks contentions.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SynchronizationNuma.Spinlock Acquires/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Spinlock Acquires/sec: Spinlock acquires/sec is the rate of spinlock acquisitions. It includes the basic spinlocks, queued spinlocks, in-stack queued spinlocks, and shared spinlocks acquisitions.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SynchronizationNuma.IPI Send Software Interrupts/sec(Logary.WinPerfCounter.Instance)">
<summary>
 IPI Send Software Interrupts/sec: IPI Send Software Interrrupts/sec is the rate of software interrupts.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SynchronizationNuma.IPI Send Routine Requests/sec(Logary.WinPerfCounter.Instance)">
<summary>
 IPI Send Routine Requests/sec: IPI Send Routine Requests/sec is the rate of IPI routine requests.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SynchronizationNuma.IPI Send Broadcast Requests/sec(Logary.WinPerfCounter.Instance)">
<summary>
 IPI Send Broadcast Requests/sec: IPI Send Broadcast Requests/sec is the rate of IPI broadcast requests.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SynchronizationNuma.Exec. Resource no-Waits AcqShrdWaitForExcl/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Exec. Resource no-Waits AcqShrdWaitForExcl/sec: Frequency of no-waits during exclusive acquire attempts from ExAcquireSharedWaitForExclusive.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SynchronizationNuma.Exec. Resource no-Waits AcqShrdStarveExcl/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Exec. Resource no-Waits AcqShrdStarveExcl/sec: Frequency of no-waits during shared acquire attempts from ExAcquireSharedStarveExclusive.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SynchronizationNuma.Exec. Resource no-Waits AcqShrdLite/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Exec. Resource no-Waits AcqShrdLite/sec: Frequency of no-waits during acquire attempts from ExAcquireResourceSharedLite.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SynchronizationNuma.Exec. Resource no-Waits AcqExclLite/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Exec. Resource no-Waits AcqExclLite/sec: Frequency of no-waits during exclusive acquire attempts from ExAcquireResourceExclusiveLite.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SynchronizationNuma.Exec. Resource Total Shared Releases/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Exec. Resource Total Shared Releases/sec: Frequency of Shared releases on Executive Resources.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SynchronizationNuma.Exec. Resource Total Re-Initialize/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Exec. Resource Total Re-Initialize/sec: Frequency of re-initialization operations on Executive Resources.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SynchronizationNuma.Exec. Resource Total Initialize/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Exec. Resource Total Initialize/sec: Frequency of initialization operations on Executive Resources.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SynchronizationNuma.Exec. Resource Total Exclusive Releases/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Exec. Resource Total Exclusive Releases/sec: Frequency of Exclusive releases on Executive Resources.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SynchronizationNuma.Exec. Resource Total Delete/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Exec. Resource Total Delete/sec: Frequency of delete operations on Executive Resources.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SynchronizationNuma.Exec. Resource Total Conv. Exclusive To Shared/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Exec. Resource Total Conv. Exclusive To Shared/sec: Frequency of convert to shared operations on Executive Resources.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SynchronizationNuma.Exec. Resource Total Contentions/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Exec. Resource Total Contentions/sec: Contention rate on Executive Resources.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SynchronizationNuma.Exec. Resource Total Acquires/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Exec. Resource Total Acquires/sec: Frequency of acquire operations on Executive Resources.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SynchronizationNuma.Exec. Resource Set Owner Pointer Shared (New Owner)/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Exec. Resource Set Owner Pointer Shared (New Owner)/sec: Frequency of ExSetResourceOwnerPointer to a new shared owner.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SynchronizationNuma.Exec. Resource Set Owner Pointer Shared (Existing Owner)/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Exec. Resource Set Owner Pointer Shared (Existing Owner)/sec: Frequency of ExSetResourceOwnerPointer to an existing shared owner.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SynchronizationNuma.Exec. Resource Set Owner Pointer Exclusive/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Exec. Resource Set Owner Pointer Exclusive/sec: Frequency of ExSetResourceOwnerPointer to an exclusive owner.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SynchronizationNuma.Exec. Resource Recursive Sh. Acquires AcqShrdWaitForExcl/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Exec. Resource Recursive Sh. Acquires AcqShrdWaitForExcl/sec: Frequency of recursive shared acquires from ExAcquireSharedWaitForExclusive.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SynchronizationNuma.Exec. Resource Recursive Sh. Acquires AcqShrdStarveExcl/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Exec. Resource Recursive Sh. Acquires AcqShrdStarveExcl/sec: Frequency of recursive shared acquires from ExAcquireSharedStarveExclusive.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SynchronizationNuma.Exec. Resource Recursive Sh. Acquires AcqShrdLite/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Exec. Resource Recursive Sh. Acquires AcqShrdLite/sec: Frequency of recursive shared acquires from ExAcquireResourceSharedLite.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SynchronizationNuma.Exec. Resource Recursive Excl. Acquires AcqShrdWaitForExcl/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Exec. Resource Recursive Excl. Acquires AcqShrdWaitForExcl/sec: Frequency of recursive exclusive acquires from ExAcquireSharedWaitForExclusive.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SynchronizationNuma.Exec. Resource Recursive Excl. Acquires AcqShrdStarveExcl/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Exec. Resource Recursive Excl. Acquires AcqShrdStarveExcl/sec: Frequency of recursive exclusive acquires from ExAcquireSharedStarveExclusive.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SynchronizationNuma.Exec. Resource Recursive Excl. Acquires AcqShrdLite/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Exec. Resource Recursive Excl. Acquires AcqShrdLite/sec: Frequency of recursive exclusive acquires from ExAcquireResourceSharedLite.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SynchronizationNuma.Exec. Resource Recursive Excl. Acquires AcqExclLite/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Exec. Resource Recursive Excl. Acquires AcqExclLite/sec: Frequency of recursive exclusive acquires from ExAcquireResourceExclusiveLite.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SynchronizationNuma.Exec. Resource Contention AcqShrdWaitForExcl/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Exec. Resource Contention AcqShrdWaitForExcl/sec: Frequency of waits during shared acquire attempts from ExAcquireSharedWaitForExclusive.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SynchronizationNuma.Exec. Resource Contention AcqShrdStarveExcl/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Exec. Resource Contention AcqShrdStarveExcl/sec: Frequency of waits during shared acquire attempts from ExAcquireSharedStarveExclusive.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SynchronizationNuma.Exec. Resource Contention AcqShrdLite/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Exec. Resource Contention AcqShrdLite/sec: Frequency of waits during acquire attempts from ExAcquireResourceSharedLite.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SynchronizationNuma.Exec. Resource Contention AcqExclLite/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Exec. Resource Contention AcqExclLite/sec: Frequency of waits during exclusive acquire attempts from ExAcquireResourceExclusiveLite.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SynchronizationNuma.Exec. Resource Boost Shared Owners/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Exec. Resource Boost Shared Owners/sec: Frequency of boosting shared ownwer(s) when waiting for this Executive Resource.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SynchronizationNuma.Exec. Resource Boost Excl. Owner/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Exec. Resource Boost Excl. Owner/sec: Frequency of boosting exclusive ownwer when waiting for this Executive Resource.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SynchronizationNuma.Exec. Resource Attempts AcqShrdWaitForExcl/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Exec. Resource Attempts AcqShrdWaitForExcl/sec: Frequency of acquire shared attempts on Executive Resources from ExAcquireSharedWaitForExclusive.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SynchronizationNuma.Exec. Resource Attempts AcqShrdStarveExcl/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Exec. Resource Attempts AcqShrdStarveExcl/sec: Frequency of acquire shared attempts on Executive Resources from ExAcquireSharedStarveExclusive.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SynchronizationNuma.Exec. Resource Attempts AcqShrdLite/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Exec. Resource Attempts AcqShrdLite/sec: Frequency of acquire shared attempts on Executive Resources from ExAcquireResourceSharedLite.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SynchronizationNuma.Exec. Resource Attempts AcqExclLite/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Exec. Resource Attempts AcqExclLite/sec: Frequency of acquire exclusive attempts on Executive Resources from ExAcquireResourceExclusiveLite.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SynchronizationNuma.Exec. Resource Acquires AcqShrdWaitForExcl/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Exec. Resource Acquires AcqShrdWaitForExcl/sec: Frequency of first shared acquires from ExAcquireSharedWaitForExclusive.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SynchronizationNuma.Exec. Resource Acquires AcqShrdStarveExcl/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Exec. Resource Acquires AcqShrdStarveExcl/sec: Frequency of first shared acquires from ExAcquireSharedStarveExclusive.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SynchronizationNuma.Exec. Resource Acquires AcqShrdLite/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Exec. Resource Acquires AcqShrdLite/sec: Frequency of first shared acquires from ExAcquireResourceSharedLite.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SynchronizationNuma.Exec. Resource Acquires AcqExclLite/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Exec. Resource Acquires AcqExclLite/sec: Frequency of first exclusive acquires from ExAcquireResourceExclusiveLite.
</summary>
</member>
<member name="T:Logary.WinPerfCounters.SynchronizationNuma">
<summary>
 SynchronizationNuma: The Synchronization performance object consists of counters for kernel synchronization. The synchronization object represents each processor as an instance of the object. The counters are aggregated based on the system NUMA topology.

 This performance counter does not have non-instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Synchronization.Spinlock Spins/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Spinlock Spins/sec: Spinlock spins/sec is the rate of spinlock spins. It includes the spins to acquire basic spinlocks, queued spinlocks, in-stack queued spinlocks, and shared spinlocks.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Synchronization.Spinlock Contentions/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Spinlock Contentions/sec: Spinlock contentions/sec is the rate of spinlock contentions. It includes the basic spinlocks, queued spinlocks, in-stack queued spinlocks, and shared spinlocks contentions.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Synchronization.Spinlock Acquires/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Spinlock Acquires/sec: Spinlock acquires/sec is the rate of spinlock acquisitions. It includes the basic spinlocks, queued spinlocks, in-stack queued spinlocks, and shared spinlocks acquisitions.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Synchronization.IPI Send Software Interrupts/sec(Logary.WinPerfCounter.Instance)">
<summary>
 IPI Send Software Interrupts/sec: IPI Send Software Interrrupts/sec is the rate of software interrupts.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Synchronization.IPI Send Routine Requests/sec(Logary.WinPerfCounter.Instance)">
<summary>
 IPI Send Routine Requests/sec: IPI Send Routine Requests/sec is the rate of IPI routine requests.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Synchronization.IPI Send Broadcast Requests/sec(Logary.WinPerfCounter.Instance)">
<summary>
 IPI Send Broadcast Requests/sec: IPI Send Broadcast Requests/sec is the rate of IPI broadcast requests.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Synchronization.Exec. Resource no-Waits AcqShrdWaitForExcl/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Exec. Resource no-Waits AcqShrdWaitForExcl/sec: Frequency of no-waits during exclusive acquire attempts from ExAcquireSharedWaitForExclusive.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Synchronization.Exec. Resource no-Waits AcqShrdStarveExcl/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Exec. Resource no-Waits AcqShrdStarveExcl/sec: Frequency of no-waits during shared acquire attempts from ExAcquireSharedStarveExclusive.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Synchronization.Exec. Resource no-Waits AcqShrdLite/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Exec. Resource no-Waits AcqShrdLite/sec: Frequency of no-waits during acquire attempts from ExAcquireResourceSharedLite.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Synchronization.Exec. Resource no-Waits AcqExclLite/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Exec. Resource no-Waits AcqExclLite/sec: Frequency of no-waits during exclusive acquire attempts from ExAcquireResourceExclusiveLite.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Synchronization.Exec. Resource Total Shared Releases/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Exec. Resource Total Shared Releases/sec: Frequency of Shared releases on Executive Resources.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Synchronization.Exec. Resource Total Re-Initialize/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Exec. Resource Total Re-Initialize/sec: Frequency of re-initialization operations on Executive Resources.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Synchronization.Exec. Resource Total Initialize/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Exec. Resource Total Initialize/sec: Frequency of initialization operations on Executive Resources.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Synchronization.Exec. Resource Total Exclusive Releases/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Exec. Resource Total Exclusive Releases/sec: Frequency of Exclusive releases on Executive Resources.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Synchronization.Exec. Resource Total Delete/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Exec. Resource Total Delete/sec: Frequency of delete operations on Executive Resources.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Synchronization.Exec. Resource Total Conv. Exclusive To Shared/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Exec. Resource Total Conv. Exclusive To Shared/sec: Frequency of convert to shared operations on Executive Resources.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Synchronization.Exec. Resource Total Contentions/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Exec. Resource Total Contentions/sec: Contention rate on Executive Resources.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Synchronization.Exec. Resource Total Acquires/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Exec. Resource Total Acquires/sec: Frequency of acquire operations on Executive Resources.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Synchronization.Exec. Resource Set Owner Pointer Shared (New Owner)/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Exec. Resource Set Owner Pointer Shared (New Owner)/sec: Frequency of ExSetResourceOwnerPointer to a new shared owner.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Synchronization.Exec. Resource Set Owner Pointer Shared (Existing Owner)/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Exec. Resource Set Owner Pointer Shared (Existing Owner)/sec: Frequency of ExSetResourceOwnerPointer to an existing shared owner.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Synchronization.Exec. Resource Set Owner Pointer Exclusive/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Exec. Resource Set Owner Pointer Exclusive/sec: Frequency of ExSetResourceOwnerPointer to an exclusive owner.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Synchronization.Exec. Resource Recursive Sh. Acquires AcqShrdWaitForExcl/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Exec. Resource Recursive Sh. Acquires AcqShrdWaitForExcl/sec: Frequency of recursive shared acquires from ExAcquireSharedWaitForExclusive.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Synchronization.Exec. Resource Recursive Sh. Acquires AcqShrdStarveExcl/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Exec. Resource Recursive Sh. Acquires AcqShrdStarveExcl/sec: Frequency of recursive shared acquires from ExAcquireSharedStarveExclusive.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Synchronization.Exec. Resource Recursive Sh. Acquires AcqShrdLite/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Exec. Resource Recursive Sh. Acquires AcqShrdLite/sec: Frequency of recursive shared acquires from ExAcquireResourceSharedLite.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Synchronization.Exec. Resource Recursive Excl. Acquires AcqShrdWaitForExcl/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Exec. Resource Recursive Excl. Acquires AcqShrdWaitForExcl/sec: Frequency of recursive exclusive acquires from ExAcquireSharedWaitForExclusive.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Synchronization.Exec. Resource Recursive Excl. Acquires AcqShrdStarveExcl/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Exec. Resource Recursive Excl. Acquires AcqShrdStarveExcl/sec: Frequency of recursive exclusive acquires from ExAcquireSharedStarveExclusive.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Synchronization.Exec. Resource Recursive Excl. Acquires AcqShrdLite/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Exec. Resource Recursive Excl. Acquires AcqShrdLite/sec: Frequency of recursive exclusive acquires from ExAcquireResourceSharedLite.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Synchronization.Exec. Resource Recursive Excl. Acquires AcqExclLite/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Exec. Resource Recursive Excl. Acquires AcqExclLite/sec: Frequency of recursive exclusive acquires from ExAcquireResourceExclusiveLite.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Synchronization.Exec. Resource Contention AcqShrdWaitForExcl/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Exec. Resource Contention AcqShrdWaitForExcl/sec: Frequency of waits during shared acquire attempts from ExAcquireSharedWaitForExclusive.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Synchronization.Exec. Resource Contention AcqShrdStarveExcl/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Exec. Resource Contention AcqShrdStarveExcl/sec: Frequency of waits during shared acquire attempts from ExAcquireSharedStarveExclusive.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Synchronization.Exec. Resource Contention AcqShrdLite/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Exec. Resource Contention AcqShrdLite/sec: Frequency of waits during acquire attempts from ExAcquireResourceSharedLite.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Synchronization.Exec. Resource Contention AcqExclLite/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Exec. Resource Contention AcqExclLite/sec: Frequency of waits during exclusive acquire attempts from ExAcquireResourceExclusiveLite.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Synchronization.Exec. Resource Boost Shared Owners/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Exec. Resource Boost Shared Owners/sec: Frequency of boosting shared ownwer(s) when waiting for this Executive Resource.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Synchronization.Exec. Resource Boost Excl. Owner/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Exec. Resource Boost Excl. Owner/sec: Frequency of boosting exclusive ownwer when waiting for this Executive Resource.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Synchronization.Exec. Resource Attempts AcqShrdWaitForExcl/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Exec. Resource Attempts AcqShrdWaitForExcl/sec: Frequency of acquire shared attempts on Executive Resources from ExAcquireSharedWaitForExclusive.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Synchronization.Exec. Resource Attempts AcqShrdStarveExcl/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Exec. Resource Attempts AcqShrdStarveExcl/sec: Frequency of acquire shared attempts on Executive Resources from ExAcquireSharedStarveExclusive.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Synchronization.Exec. Resource Attempts AcqShrdLite/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Exec. Resource Attempts AcqShrdLite/sec: Frequency of acquire shared attempts on Executive Resources from ExAcquireResourceSharedLite.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Synchronization.Exec. Resource Attempts AcqExclLite/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Exec. Resource Attempts AcqExclLite/sec: Frequency of acquire exclusive attempts on Executive Resources from ExAcquireResourceExclusiveLite.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Synchronization.Exec. Resource Acquires AcqShrdWaitForExcl/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Exec. Resource Acquires AcqShrdWaitForExcl/sec: Frequency of first shared acquires from ExAcquireSharedWaitForExclusive.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Synchronization.Exec. Resource Acquires AcqShrdStarveExcl/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Exec. Resource Acquires AcqShrdStarveExcl/sec: Frequency of first shared acquires from ExAcquireSharedStarveExclusive.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Synchronization.Exec. Resource Acquires AcqShrdLite/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Exec. Resource Acquires AcqShrdLite/sec: Frequency of first shared acquires from ExAcquireResourceSharedLite.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Synchronization.Exec. Resource Acquires AcqExclLite/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Exec. Resource Acquires AcqExclLite/sec: Frequency of first exclusive acquires from ExAcquireResourceExclusiveLite.
</summary>
</member>
<member name="T:Logary.WinPerfCounters.Synchronization">
<summary>
 Synchronization: The Synchronization performance object consists of counters for kernel synchronization. The synchronization object represents each processor as an instance of the object.

 This performance counter does not have non-instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelService 4_0_0_0.Transactions Flowed Per Second(Logary.WinPerfCounter.Instance)">
<summary>
 Transactions Flowed Per Second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelService 4_0_0_0.Transactions Flowed(Logary.WinPerfCounter.Instance)">
<summary>
 Transactions Flowed: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelService 4_0_0_0.Transacted Operations In Doubt Per Second(Logary.WinPerfCounter.Instance)">
<summary>
 Transacted Operations In Doubt Per Second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelService 4_0_0_0.Transacted Operations In Doubt(Logary.WinPerfCounter.Instance)">
<summary>
 Transacted Operations In Doubt: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelService 4_0_0_0.Transacted Operations Committed Per Second(Logary.WinPerfCounter.Instance)">
<summary>
 Transacted Operations Committed Per Second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelService 4_0_0_0.Transacted Operations Committed(Logary.WinPerfCounter.Instance)">
<summary>
 Transacted Operations Committed: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelService 4_0_0_0.Transacted Operations Aborted Per Second(Logary.WinPerfCounter.Instance)">
<summary>
 Transacted Operations Aborted Per Second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelService 4_0_0_0.Transacted Operations Aborted(Logary.WinPerfCounter.Instance)">
<summary>
 Transacted Operations Aborted: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelService 4_0_0_0.Security Validation and Authentication Failures Per Second(Logary.WinPerfCounter.Instance)">
<summary>
 Security Validation and Authentication Failures Per Second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelService 4_0_0_0.Security Validation and Authentication Failures(Logary.WinPerfCounter.Instance)">
<summary>
 Security Validation and Authentication Failures: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelService 4_0_0_0.Security Calls Not Authorized Per Second(Logary.WinPerfCounter.Instance)">
<summary>
 Security Calls Not Authorized Per Second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelService 4_0_0_0.Security Calls Not Authorized(Logary.WinPerfCounter.Instance)">
<summary>
 Security Calls Not Authorized: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelService 4_0_0_0.Reliable Messaging Sessions Faulted Per Second(Logary.WinPerfCounter.Instance)">
<summary>
 Reliable Messaging Sessions Faulted Per Second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelService 4_0_0_0.Reliable Messaging Sessions Faulted(Logary.WinPerfCounter.Instance)">
<summary>
 Reliable Messaging Sessions Faulted: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelService 4_0_0_0.Reliable Messaging Messages Dropped Per Second(Logary.WinPerfCounter.Instance)">
<summary>
 Reliable Messaging Messages Dropped Per Second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelService 4_0_0_0.Reliable Messaging Messages Dropped(Logary.WinPerfCounter.Instance)">
<summary>
 Reliable Messaging Messages Dropped: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelService 4_0_0_0.Queued Poison Messages Per Second(Logary.WinPerfCounter.Instance)">
<summary>
 Queued Poison Messages Per Second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelService 4_0_0_0.Queued Poison Messages(Logary.WinPerfCounter.Instance)">
<summary>
 Queued Poison Messages: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelService 4_0_0_0.Queued Messages Rejected Per Second(Logary.WinPerfCounter.Instance)">
<summary>
 Queued Messages Rejected Per Second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelService 4_0_0_0.Queued Messages Rejected(Logary.WinPerfCounter.Instance)">
<summary>
 Queued Messages Rejected: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelService 4_0_0_0.Queued Messages Dropped Per Second(Logary.WinPerfCounter.Instance)">
<summary>
 Queued Messages Dropped Per Second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelService 4_0_0_0.Queued Messages Dropped(Logary.WinPerfCounter.Instance)">
<summary>
 Queued Messages Dropped: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelService 4_0_0_0.Percent Of Max Concurrent Sessions(Logary.WinPerfCounter.Instance)">
<summary>
 Percent Of Max Concurrent Sessions: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelService 4_0_0_0.Percent Of Max Concurrent Instances(Logary.WinPerfCounter.Instance)">
<summary>
 Percent Of Max Concurrent Instances: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelService 4_0_0_0.Percent Of Max Concurrent Calls(Logary.WinPerfCounter.Instance)">
<summary>
 Percent Of Max Concurrent Calls: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelService 4_0_0_0.Instances Created Per Second(Logary.WinPerfCounter.Instance)">
<summary>
 Instances Created Per Second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelService 4_0_0_0.Instances(Logary.WinPerfCounter.Instance)">
<summary>
 Instances: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelService 4_0_0_0.Calls Per Second(Logary.WinPerfCounter.Instance)">
<summary>
 Calls Per Second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelService 4_0_0_0.Calls Outstanding(Logary.WinPerfCounter.Instance)">
<summary>
 Calls Outstanding: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelService 4_0_0_0.Calls Faulted Per Second(Logary.WinPerfCounter.Instance)">
<summary>
 Calls Faulted Per Second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelService 4_0_0_0.Calls Faulted(Logary.WinPerfCounter.Instance)">
<summary>
 Calls Faulted: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelService 4_0_0_0.Calls Failed Per Second(Logary.WinPerfCounter.Instance)">
<summary>
 Calls Failed Per Second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelService 4_0_0_0.Calls Failed(Logary.WinPerfCounter.Instance)">
<summary>
 Calls Failed: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelService 4_0_0_0.Calls Duration(Logary.WinPerfCounter.Instance)">
<summary>
 Calls Duration: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelService 4_0_0_0.Calls(Logary.WinPerfCounter.Instance)">
<summary>
 Calls: -
</summary>
</member>
<member name="T:Logary.WinPerfCounters.ServiceModelService 4_0_0_0">
<summary>
 ServiceModelService 4.0.0.0: ServiceModel performance counters for service

 This performance counter does not have instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelService 3_0_0_0.Transactions Flowed Per Second(Logary.WinPerfCounter.Instance)">
<summary>
 Transactions Flowed Per Second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelService 3_0_0_0.Transactions Flowed(Logary.WinPerfCounter.Instance)">
<summary>
 Transactions Flowed: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelService 3_0_0_0.Transacted Operations In Doubt Per Second(Logary.WinPerfCounter.Instance)">
<summary>
 Transacted Operations In Doubt Per Second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelService 3_0_0_0.Transacted Operations In Doubt(Logary.WinPerfCounter.Instance)">
<summary>
 Transacted Operations In Doubt: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelService 3_0_0_0.Transacted Operations Committed Per Second(Logary.WinPerfCounter.Instance)">
<summary>
 Transacted Operations Committed Per Second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelService 3_0_0_0.Transacted Operations Committed(Logary.WinPerfCounter.Instance)">
<summary>
 Transacted Operations Committed: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelService 3_0_0_0.Transacted Operations Aborted Per Second(Logary.WinPerfCounter.Instance)">
<summary>
 Transacted Operations Aborted Per Second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelService 3_0_0_0.Transacted Operations Aborted(Logary.WinPerfCounter.Instance)">
<summary>
 Transacted Operations Aborted: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelService 3_0_0_0.Security Validation and Authentication Failures Per Second(Logary.WinPerfCounter.Instance)">
<summary>
 Security Validation and Authentication Failures Per Second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelService 3_0_0_0.Security Validation and Authentication Failures(Logary.WinPerfCounter.Instance)">
<summary>
 Security Validation and Authentication Failures: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelService 3_0_0_0.Security Calls Not Authorized Per Second(Logary.WinPerfCounter.Instance)">
<summary>
 Security Calls Not Authorized Per Second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelService 3_0_0_0.Security Calls Not Authorized(Logary.WinPerfCounter.Instance)">
<summary>
 Security Calls Not Authorized: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelService 3_0_0_0.Reliable Messaging Sessions Faulted Per Second(Logary.WinPerfCounter.Instance)">
<summary>
 Reliable Messaging Sessions Faulted Per Second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelService 3_0_0_0.Reliable Messaging Sessions Faulted(Logary.WinPerfCounter.Instance)">
<summary>
 Reliable Messaging Sessions Faulted: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelService 3_0_0_0.Reliable Messaging Messages Dropped Per Second(Logary.WinPerfCounter.Instance)">
<summary>
 Reliable Messaging Messages Dropped Per Second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelService 3_0_0_0.Reliable Messaging Messages Dropped(Logary.WinPerfCounter.Instance)">
<summary>
 Reliable Messaging Messages Dropped: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelService 3_0_0_0.Queued Poison Messages Per Second(Logary.WinPerfCounter.Instance)">
<summary>
 Queued Poison Messages Per Second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelService 3_0_0_0.Queued Poison Messages(Logary.WinPerfCounter.Instance)">
<summary>
 Queued Poison Messages: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelService 3_0_0_0.Queued Messages Rejected Per Second(Logary.WinPerfCounter.Instance)">
<summary>
 Queued Messages Rejected Per Second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelService 3_0_0_0.Queued Messages Rejected(Logary.WinPerfCounter.Instance)">
<summary>
 Queued Messages Rejected: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelService 3_0_0_0.Queued Messages Dropped Per Second(Logary.WinPerfCounter.Instance)">
<summary>
 Queued Messages Dropped Per Second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelService 3_0_0_0.Queued Messages Dropped(Logary.WinPerfCounter.Instance)">
<summary>
 Queued Messages Dropped: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelService 3_0_0_0.Instances Created Per Second(Logary.WinPerfCounter.Instance)">
<summary>
 Instances Created Per Second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelService 3_0_0_0.Instances(Logary.WinPerfCounter.Instance)">
<summary>
 Instances: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelService 3_0_0_0.Calls Per Second(Logary.WinPerfCounter.Instance)">
<summary>
 Calls Per Second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelService 3_0_0_0.Calls Outstanding(Logary.WinPerfCounter.Instance)">
<summary>
 Calls Outstanding: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelService 3_0_0_0.Calls Faulted Per Second(Logary.WinPerfCounter.Instance)">
<summary>
 Calls Faulted Per Second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelService 3_0_0_0.Calls Faulted(Logary.WinPerfCounter.Instance)">
<summary>
 Calls Faulted: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelService 3_0_0_0.Calls Failed Per Second(Logary.WinPerfCounter.Instance)">
<summary>
 Calls Failed Per Second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelService 3_0_0_0.Calls Failed(Logary.WinPerfCounter.Instance)">
<summary>
 Calls Failed: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelService 3_0_0_0.Calls Duration Base(Logary.WinPerfCounter.Instance)">
<summary>
 Calls Duration Base: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelService 3_0_0_0.Calls Duration(Logary.WinPerfCounter.Instance)">
<summary>
 Calls Duration: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelService 3_0_0_0.Calls(Logary.WinPerfCounter.Instance)">
<summary>
 Calls: -
</summary>
</member>
<member name="T:Logary.WinPerfCounters.ServiceModelService 3_0_0_0">
<summary>
 ServiceModelService 3.0.0.0: ServiceModelService 3.0.0.0 performance counters

 This performance counter does not have instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelOperation 4_0_0_0.Transactions Flowed Per Second(Logary.WinPerfCounter.Instance)">
<summary>
 Transactions Flowed Per Second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelOperation 4_0_0_0.Transactions Flowed(Logary.WinPerfCounter.Instance)">
<summary>
 Transactions Flowed: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelOperation 4_0_0_0.Security Validation and Authentication Failures Per Second(Logary.WinPerfCounter.Instance)">
<summary>
 Security Validation and Authentication Failures Per Second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelOperation 4_0_0_0.Security Validation and Authentication Failures(Logary.WinPerfCounter.Instance)">
<summary>
 Security Validation and Authentication Failures: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelOperation 4_0_0_0.Security Calls Not Authorized Per Second(Logary.WinPerfCounter.Instance)">
<summary>
 Security Calls Not Authorized Per Second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelOperation 4_0_0_0.Security Calls Not Authorized(Logary.WinPerfCounter.Instance)">
<summary>
 Security Calls Not Authorized: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelOperation 4_0_0_0.Calls Per Second(Logary.WinPerfCounter.Instance)">
<summary>
 Calls Per Second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelOperation 4_0_0_0.Calls Outstanding(Logary.WinPerfCounter.Instance)">
<summary>
 Calls Outstanding: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelOperation 4_0_0_0.Calls Faulted Per Second(Logary.WinPerfCounter.Instance)">
<summary>
 Calls Faulted Per Second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelOperation 4_0_0_0.Calls Faulted(Logary.WinPerfCounter.Instance)">
<summary>
 Calls Faulted: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelOperation 4_0_0_0.Calls Failed(Logary.WinPerfCounter.Instance)">
<summary>
 Calls Failed: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelOperation 4_0_0_0.Calls Duration(Logary.WinPerfCounter.Instance)">
<summary>
 Calls Duration: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelOperation 4_0_0_0.Calls(Logary.WinPerfCounter.Instance)">
<summary>
 Calls: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelOperation 4_0_0_0.Call Failed Per Second(Logary.WinPerfCounter.Instance)">
<summary>
 Call Failed Per Second: -
</summary>
</member>
<member name="T:Logary.WinPerfCounters.ServiceModelOperation 4_0_0_0">
<summary>
 ServiceModelOperation 4.0.0.0: ServiceModelOperation 4.0.0.0 performance counters

 This performance counter does not have instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelOperation 3_0_0_0.Transactions Flowed Per Second(Logary.WinPerfCounter.Instance)">
<summary>
 Transactions Flowed Per Second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelOperation 3_0_0_0.Transactions Flowed(Logary.WinPerfCounter.Instance)">
<summary>
 Transactions Flowed: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelOperation 3_0_0_0.Security Validation and Authentication Failures Per Second(Logary.WinPerfCounter.Instance)">
<summary>
 Security Validation and Authentication Failures Per Second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelOperation 3_0_0_0.Security Validation and Authentication Failures(Logary.WinPerfCounter.Instance)">
<summary>
 Security Validation and Authentication Failures: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelOperation 3_0_0_0.Security Calls Not Authorized Per Second(Logary.WinPerfCounter.Instance)">
<summary>
 Security Calls Not Authorized Per Second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelOperation 3_0_0_0.Security Calls Not Authorized(Logary.WinPerfCounter.Instance)">
<summary>
 Security Calls Not Authorized: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelOperation 3_0_0_0.Calls Per Second(Logary.WinPerfCounter.Instance)">
<summary>
 Calls Per Second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelOperation 3_0_0_0.Calls Outstanding(Logary.WinPerfCounter.Instance)">
<summary>
 Calls Outstanding: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelOperation 3_0_0_0.Calls Faulted Per Second(Logary.WinPerfCounter.Instance)">
<summary>
 Calls Faulted Per Second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelOperation 3_0_0_0.Calls Faulted(Logary.WinPerfCounter.Instance)">
<summary>
 Calls Faulted: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelOperation 3_0_0_0.Calls Failed(Logary.WinPerfCounter.Instance)">
<summary>
 Calls Failed: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelOperation 3_0_0_0.Calls Duration Base(Logary.WinPerfCounter.Instance)">
<summary>
 Calls Duration Base: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelOperation 3_0_0_0.Calls Duration(Logary.WinPerfCounter.Instance)">
<summary>
 Calls Duration: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelOperation 3_0_0_0.Calls(Logary.WinPerfCounter.Instance)">
<summary>
 Calls: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelOperation 3_0_0_0.Call Failed Per Second(Logary.WinPerfCounter.Instance)">
<summary>
 Call Failed Per Second: -
</summary>
</member>
<member name="T:Logary.WinPerfCounters.ServiceModelOperation 3_0_0_0">
<summary>
 ServiceModelOperation 3.0.0.0: ServiceModelOperation 3.0.0.0 performance counters

 This performance counter does not have instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelEndpoint 4_0_0_0.Transactions Flowed Per Second(Logary.WinPerfCounter.Instance)">
<summary>
 Transactions Flowed Per Second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelEndpoint 4_0_0_0.Transactions Flowed(Logary.WinPerfCounter.Instance)">
<summary>
 Transactions Flowed: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelEndpoint 4_0_0_0.Security Validation and Authentication Failures Per Second(Logary.WinPerfCounter.Instance)">
<summary>
 Security Validation and Authentication Failures Per Second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelEndpoint 4_0_0_0.Security Validation and Authentication Failures(Logary.WinPerfCounter.Instance)">
<summary>
 Security Validation and Authentication Failures: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelEndpoint 4_0_0_0.Security Calls Not Authorized Per Second(Logary.WinPerfCounter.Instance)">
<summary>
 Security Calls Not Authorized Per Second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelEndpoint 4_0_0_0.Security Calls Not Authorized(Logary.WinPerfCounter.Instance)">
<summary>
 Security Calls Not Authorized: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelEndpoint 4_0_0_0.Reliable Messaging Sessions Faulted Per Second(Logary.WinPerfCounter.Instance)">
<summary>
 Reliable Messaging Sessions Faulted Per Second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelEndpoint 4_0_0_0.Reliable Messaging Sessions Faulted(Logary.WinPerfCounter.Instance)">
<summary>
 Reliable Messaging Sessions Faulted: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelEndpoint 4_0_0_0.Reliable Messaging Messages Dropped Per Second(Logary.WinPerfCounter.Instance)">
<summary>
 Reliable Messaging Messages Dropped Per Second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelEndpoint 4_0_0_0.Reliable Messaging Messages Dropped(Logary.WinPerfCounter.Instance)">
<summary>
 Reliable Messaging Messages Dropped: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelEndpoint 4_0_0_0.Calls Per Second(Logary.WinPerfCounter.Instance)">
<summary>
 Calls Per Second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelEndpoint 4_0_0_0.Calls Outstanding(Logary.WinPerfCounter.Instance)">
<summary>
 Calls Outstanding: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelEndpoint 4_0_0_0.Calls Faulted Per Second(Logary.WinPerfCounter.Instance)">
<summary>
 Calls Faulted Per Second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelEndpoint 4_0_0_0.Calls Faulted(Logary.WinPerfCounter.Instance)">
<summary>
 Calls Faulted: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelEndpoint 4_0_0_0.Calls Failed Per Second(Logary.WinPerfCounter.Instance)">
<summary>
 Calls Failed Per Second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelEndpoint 4_0_0_0.Calls Failed(Logary.WinPerfCounter.Instance)">
<summary>
 Calls Failed: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelEndpoint 4_0_0_0.Calls Duration(Logary.WinPerfCounter.Instance)">
<summary>
 Calls Duration: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelEndpoint 4_0_0_0.Calls(Logary.WinPerfCounter.Instance)">
<summary>
 Calls: -
</summary>
</member>
<member name="T:Logary.WinPerfCounters.ServiceModelEndpoint 4_0_0_0">
<summary>
 ServiceModelEndpoint 4.0.0.0: ServiceModel performance counters for endpoint

 This performance counter does not have instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelEndpoint 3_0_0_0.Transactions Flowed Per Second(Logary.WinPerfCounter.Instance)">
<summary>
 Transactions Flowed Per Second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelEndpoint 3_0_0_0.Transactions Flowed(Logary.WinPerfCounter.Instance)">
<summary>
 Transactions Flowed: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelEndpoint 3_0_0_0.Security Validation and Authentication Failures Per Second(Logary.WinPerfCounter.Instance)">
<summary>
 Security Validation and Authentication Failures Per Second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelEndpoint 3_0_0_0.Security Validation and Authentication Failures(Logary.WinPerfCounter.Instance)">
<summary>
 Security Validation and Authentication Failures: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelEndpoint 3_0_0_0.Security Calls Not Authorized Per Second(Logary.WinPerfCounter.Instance)">
<summary>
 Security Calls Not Authorized Per Second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelEndpoint 3_0_0_0.Security Calls Not Authorized(Logary.WinPerfCounter.Instance)">
<summary>
 Security Calls Not Authorized: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelEndpoint 3_0_0_0.Reliable Messaging Sessions Faulted Per Second(Logary.WinPerfCounter.Instance)">
<summary>
 Reliable Messaging Sessions Faulted Per Second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelEndpoint 3_0_0_0.Reliable Messaging Sessions Faulted(Logary.WinPerfCounter.Instance)">
<summary>
 Reliable Messaging Sessions Faulted: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelEndpoint 3_0_0_0.Reliable Messaging Messages Dropped Per Second(Logary.WinPerfCounter.Instance)">
<summary>
 Reliable Messaging Messages Dropped Per Second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelEndpoint 3_0_0_0.Reliable Messaging Messages Dropped(Logary.WinPerfCounter.Instance)">
<summary>
 Reliable Messaging Messages Dropped: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelEndpoint 3_0_0_0.Calls Per Second(Logary.WinPerfCounter.Instance)">
<summary>
 Calls Per Second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelEndpoint 3_0_0_0.Calls Outstanding(Logary.WinPerfCounter.Instance)">
<summary>
 Calls Outstanding: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelEndpoint 3_0_0_0.Calls Faulted Per Second(Logary.WinPerfCounter.Instance)">
<summary>
 Calls Faulted Per Second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelEndpoint 3_0_0_0.Calls Faulted(Logary.WinPerfCounter.Instance)">
<summary>
 Calls Faulted: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelEndpoint 3_0_0_0.Calls Failed Per Second(Logary.WinPerfCounter.Instance)">
<summary>
 Calls Failed Per Second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelEndpoint 3_0_0_0.Calls Failed(Logary.WinPerfCounter.Instance)">
<summary>
 Calls Failed: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelEndpoint 3_0_0_0.Calls Duration Base(Logary.WinPerfCounter.Instance)">
<summary>
 Calls Duration Base: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelEndpoint 3_0_0_0.Calls Duration(Logary.WinPerfCounter.Instance)">
<summary>
 Calls Duration: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ServiceModelEndpoint 3_0_0_0.Calls(Logary.WinPerfCounter.Instance)">
<summary>
 Calls: -
</summary>
</member>
<member name="T:Logary.WinPerfCounters.ServiceModelEndpoint 3_0_0_0">
<summary>
 ServiceModelEndpoint 3.0.0.0: ServiceModelEndpoint 3.0.0.0 performance counters

 This performance counter does not have instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Server Work Queues.Write Operations/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Write Operations/sec: Write Operations/sec is the rate the server is performing file write operations for the clients on this CPU.  This value is a measure of how busy the Server is.  This value will always be 0 in the Blocking Queue instance.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Server Work Queues.Write Bytes/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Write Bytes/sec: Write Bytes/sec is the rate the server is writing data to files for the clients on this CPU.  This value is a measure of how busy the Server is.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Server Work Queues.Work Item Shortages(Logary.WinPerfCounter.Instance)">
<summary>
 Work Item Shortages: Every request from a client is represented in the server as a &apos;work item,&apos; and the server maintains a pool of available work items per CPU to speed processing.  A sustained value greater than zero indicates the need to increase the &apos;MaxWorkItems&apos; registry value for the Server service.  This value will always be 0 in the Blocking Queue and SMB2 Queue instances.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Server Work Queues.Total Operations/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Total Operations/sec: Total Operations/sec is the rate the Server is performing file read and file write operations for the clients on this CPU.  This value is a measure of how busy the Server is.  This value will always be 0 in the Blocking Queue instance.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Server Work Queues.Total Bytes/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Total Bytes/sec: Total Bytes/sec is the rate the Server is reading and writing data to and from the files for the clients on this CPU.  This value is a measure of how busy the Server is.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Server Work Queues.Read Operations/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Read Operations/sec: Read Operations/sec is the rate the server is performing file read operations for the clients on this CPU.  This value is a measure of how busy the Server is.  This value will always be 0 in the Blocking Queue instance.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Server Work Queues.Read Bytes/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Read Bytes/sec: Read Bytes/sec is the rate the server is reading data from files for the clients on this CPU.  This value is a measure of how busy the Server is.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Server Work Queues.Queue Length(Logary.WinPerfCounter.Instance)">
<summary>
 Queue Length: Queue length is the current number of workitem in Blocking queues and Nonblocking queues, which indicates how busy the server is to process outstanding workitems for this CPU. A sustained queue length greater than four might indicate processor congestion.  This is an instantaneous count, not an average over time.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Server Work Queues.Current Clients(Logary.WinPerfCounter.Instance)">
<summary>
 Current Clients: Current Clients is the instantaneous count of the clients being serviced by this CPU.  The server actively balances the client load across all of the CPU&apos;s in the system.  This value will always be 0 in the Blocking Queue instance.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Server Work Queues.Context Blocks Queued/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Context Blocks Queued/sec: Context Blocks Queued per second is the rate at which work context blocks had to be placed on the server&apos;s FSP queue to await server action.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Server Work Queues.Bytes Transferred/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Bytes Transferred/sec: The rate at which the Server is sending and receiving bytes with the network clients on this CPU.  This value is a measure of how busy the Server is.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Server Work Queues.Bytes Sent/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Bytes Sent/sec: The rate at which the Server is sending bytes to the network clients on this CPU.  This value is a measure of how busy the Server is.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Server Work Queues.Bytes Received/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Bytes Received/sec: The rate at which the Server is receiving bytes from the network clients on this CPU.  This value is a measure of how busy the Server is.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Server Work Queues.Borrowed Work Items(Logary.WinPerfCounter.Instance)">
<summary>
 Borrowed Work Items: Every request from a client is represented in the server as a &apos;work item,&apos; and the server maintains a pool of available work items per CPU to speed processing.  When a CPU runs out of work items, it borrows a free work item from another CPU.  An increasing value of this running counter might indicate the need to increase the &apos;MaxWorkItems&apos; or &apos;MinFreeWorkItems&apos; registry values for the Server service.  This value will always be 0 in the Blocking Queue and SMB2 Queue instances.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Server Work Queues.Available Work Items(Logary.WinPerfCounter.Instance)">
<summary>
 Available Work Items: Every request from a client is represented in the server as a &apos;work item,&apos; and the server maintains a pool of available work items per CPU to speed processing.  This is the instantaneous number of available work items for this CPU.  A sustained near-zero value indicates the need to increase the MinFreeWorkItems registry value for the Server service.  This value will always be 0 in the SMB1 Blocking Queue instance.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Server Work Queues.Available Threads(Logary.WinPerfCounter.Instance)">
<summary>
 Available Threads: Available Threads is the number of server threads on this CPU not currently working on requests from a client.  The server dynamically adjusts the number of threads to maximize server performance.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Server Work Queues.Active Threads(Logary.WinPerfCounter.Instance)">
<summary>
 Active Threads: Active Threads is the number of threads currently working on a request from the server client for this CPU.  The system keeps this number as low as possible to minimize unnecessary context switching.  This is an instantaneous count for the CPU, not an average over time.
</summary>
</member>
<member name="T:Logary.WinPerfCounters.Server Work Queues">
<summary>
 Server Work Queues: The Server Work Queues performance object consists of counters that monitor the length of the queues and objects in the queues.

 This performance counter does not have non-instance based counters
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Server.Work Item Shortages">
<summary>
 Work Item Shortages: The number of times STATUS_DATA_NOT_ACCEPTED was returned at receive indication time.  This occurs when no work item is available or can be allocated to service the incoming request.  Indicates whether the InitWorkItems or MaxWorkItems parameters might need to be adjusted.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Server.Total Resilient Handles">
<summary>
 Total Resilient Handles: The total number of resilient handle disconnect that have occurred.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Server.Total Durable Handles">
<summary>
 Total Durable Handles: The total number of durable handle disconnects that have occurred.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Server.Sessions Timed Out">
<summary>
 Sessions Timed Out: The number of sessions that have been closed due to their idle time exceeding the AutoDisconnect parameter for the server.  Shows whether the AutoDisconnect setting is helping to conserve resources.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Server.Sessions Logged Off">
<summary>
 Sessions Logged Off: The number of sessions that have terminated normally.  Useful in interpreting the Sessions Times Out and Sessions Errored Out statistics--allows percentage calculations.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Server.Sessions Forced Off">
<summary>
 Sessions Forced Off: The number of sessions that have been forced to logoff.  Can indicate how many sessions were forced to logoff due to logon time constraints.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Server.Sessions Errored Out">
<summary>
 Sessions Errored Out: The number of sessions that have been closed due to unexpected error conditions or sessions that have reached the autodisconnect timeout and have been disconnected normally. The autodisconnect timeout value represents the number of seconds that idle connections with no session attached to have before being disconnected automatically by a server. The default value is 30 seconds. This counter increments as a result of normal server operation, not as an indication of network problems or unexpected error condition.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Server.Server Sessions">
<summary>
 Server Sessions: The number of sessions currently active in the server.  Indicates current server activity.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Server.SMB BranchCache Hash V2 Responses Sent">
<summary>
 SMB BranchCache Hash V2 Responses Sent: The number of SMB BranchCache hash V2 responses that have been sent from the server.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Server.SMB BranchCache Hash V2 Requests Served From Dedup">
<summary>
 SMB BranchCache Hash V2 Requests Served From Dedup: The amount of SMB BranchCache hash V2 requests that were served from dedup store by the server.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Server.SMB BranchCache Hash V2 Requests Received">
<summary>
 SMB BranchCache Hash V2 Requests Received: The number of SMB BranchCache hash V2 requests that were received by the server.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Server.SMB BranchCache Hash V2 Header Requests">
<summary>
 SMB BranchCache Hash V2 Header Requests: The number of SMB BranchCache hash V2 requests that were for the header only received by the server. This indicates how many requests are being done to validate hashes that are already cached by the client.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Server.SMB BranchCache Hash V2 Generation Requests">
<summary>
 SMB BranchCache Hash V2 Generation Requests: The number of SMB BranchCache hash V2 generation requests that were sent by SRV2 to the SMB Hash Generation service because a client requested hashes for the file and there was either no hash content for the file or the existing hashes were out of date.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Server.SMB BranchCache Hash V2 Bytes Sent">
<summary>
 SMB BranchCache Hash V2 Bytes Sent: The amount of SMB BranchCache hash V2 data sent from the server. This includes bytes transferred for both hash header requests and full hash data requests.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Server.SMB BranchCache Hash Responses Sent">
<summary>
 SMB BranchCache Hash Responses Sent: The number of SMB BranchCache hash responses that have been sent from the server.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Server.SMB BranchCache Hash Requests Received">
<summary>
 SMB BranchCache Hash Requests Received: The number of SMB BranchCache hash requests that were received by the server.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Server.SMB BranchCache Hash Header Requests">
<summary>
 SMB BranchCache Hash Header Requests: The number of SMB BranchCache hash requests that were for the header only received by the server. This indicates how many requests are being done to validate hashes that are already cached by the client.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Server.SMB BranchCache Hash Generation Requests">
<summary>
 SMB BranchCache Hash Generation Requests: The number of SMB BranchCache hash generation requests that were sent by SRV2 to the SMB Hash Generation service because a client requested hashes for the file and there was either no hash content for the file or the existing hashes were out of date.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Server.SMB BranchCache Hash Bytes Sent">
<summary>
 SMB BranchCache Hash Bytes Sent: The amount of SMB BranchCache hash data sent from the server. This includes bytes transferred for both hash header requests and full hash data requests.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Server.Reconnected Resilient Handles">
<summary>
 Reconnected Resilient Handles: The total number of resilient handles that are successfully reconnected. The ratio of &quot;reconnected resilient handles&quot;/&quot;total resilient handles&quot; indicates the stability gain from reconnect resilient handles.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Server.Reconnected Durable Handles">
<summary>
 Reconnected Durable Handles: The total number of durable handles that are successfully reconnected. The ratio of &quot;reconnected durable handles&quot;/&quot;total durable handles&quot; indicates the stability gain from reconnect durable handles.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Server.Pool Paged Peak">
<summary>
 Pool Paged Peak: The maximum number of bytes of paged pool the server has had allocated.  Indicates the proper sizes of the Page File(s) and physical memory.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Server.Pool Paged Failures">
<summary>
 Pool Paged Failures: The number of times allocations from paged pool have failed.  Indicates that the computer&apos;s physical memory or paging file are too small.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Server.Pool Paged Bytes">
<summary>
 Pool Paged Bytes: The number of bytes of pageable computer memory the server is currently using.  Can help in determining good values for the MaxPagedMemoryUsage parameter.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Server.Pool Nonpaged Peak">
<summary>
 Pool Nonpaged Peak: The maximum number of bytes of nonpaged pool the server has had in use at any one point.  Indicates how much physical memory the computer should have.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Server.Pool Nonpaged Failures">
<summary>
 Pool Nonpaged Failures: The number of times allocations from nonpaged pool have failed.  Indicates that the computer&apos;s physical memory is too small.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Server.Pool Nonpaged Bytes">
<summary>
 Pool Nonpaged Bytes: The number of bytes of non-pageable computer memory the server is using.  This value is useful for determining the values of the MaxNonpagedMemoryUsage value entry in the Windows NT Registry.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Server.Logon/sec">
<summary>
 Logon/sec: Logon/sec is the rate of all server logons.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Server.Logon Total">
<summary>
 Logon Total: Logon Total indicates the total session setup attempts, including all successful logon and failed logons since the server service is started.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Server.Files Opened Total">
<summary>
 Files Opened Total: The number of successful open attempts performed by the server of behalf of clients.  Useful in determining the amount of file I/O, determining overhead for path-based operations, and for determining the effectiveness of open locks.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Server.Files Open">
<summary>
 Files Open: The number of files currently opened in the server.  Indicates current server activity.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Server.File Directory Searches">
<summary>
 File Directory Searches: The number of searches for files currently active in the server.  Indicates current server activity.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Server.Errors System">
<summary>
 Errors System: The number of times an internal Server Error was detected.  Unexpected errors usually indicate a problem with the Server.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Server.Errors Logon">
<summary>
 Errors Logon: The number of failed logon attempts to the server.  Can indicate whether password guessing programs are being used to crack the security on the server.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Server.Errors Granted Access">
<summary>
 Errors Granted Access: The number of times accesses to files opened successfully were denied.  Can indicate attempts to access files without proper access authorization.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Server.Errors Access Permissions">
<summary>
 Errors Access Permissions: The number of times opens on behalf of clients have failed with STATUS_ACCESS_DENIED.  Can indicate whether somebody is randomly attempting to access files in hopes of getting at something that was not properly protected.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Server.Context Blocks Queued/sec">
<summary>
 Context Blocks Queued/sec: Context Blocks Queued per second is the rate at which work context blocks had to be placed on the server&apos;s FSP queue to await server action.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Server.Bytes Transmitted/sec">
<summary>
 Bytes Transmitted/sec: The number of bytes the server has sent on the network.  Indicates how busy the server is.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Server.Bytes Total/sec">
<summary>
 Bytes Total/sec: The number of bytes the server has sent to and received from the network.  This value provides an overall indication of how busy the server is.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Server.Bytes Received/sec">
<summary>
 Bytes Received/sec: The number of bytes the server has received from the network.  Indicates how busy the server is.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Server.Blocking Requests Rejected">
<summary>
 Blocking Requests Rejected: The number of times the server has rejected blocking SMBs due to insufficient count of free work items.  Indicates whether the MaxWorkItem or MinFreeWorkItems server parameters might need to be adjusted.
</summary>
</member>
<member name="T:Logary.WinPerfCounters.Server">
<summary>
 Server: The Server performance object consists of counters that measure communication between the  local computer and the network.

 This performance counter does not have instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Search Indexer.Work Items Deleted(Logary.WinPerfCounter.Instance)">
<summary>
 Work Items Deleted: Number of invalidator work items that were deleted
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Search Indexer.Work Items Created(Logary.WinPerfCounter.Instance)">
<summary>
 Work Items Created: Number of invalidator work items that were created
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Search Indexer.Unique Keys(Logary.WinPerfCounter.Instance)">
<summary>
 Unique Keys: Number of Unique Keys
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Search Indexer.Shadow Merge Levels Threshold(Logary.WinPerfCounter.Instance)">
<summary>
 Shadow Merge Levels Threshold: Shadow Merge Levels Threshold
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Search Indexer.Shadow Merge Levels(Logary.WinPerfCounter.Instance)">
<summary>
 Shadow Merge Levels: Shadow Merge Levels
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Search Indexer.Queries Succeeded(Logary.WinPerfCounter.Instance)">
<summary>
 Queries Succeeded: Number of Queries Succeeded
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Search Indexer.Queries Failed(Logary.WinPerfCounter.Instance)">
<summary>
 Queries Failed: Number of Queries Failed
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Search Indexer.Queries(Logary.WinPerfCounter.Instance)">
<summary>
 Queries: Number of Queries
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Search Indexer.Persistent Indexes L8(Logary.WinPerfCounter.Instance)">
<summary>
 Persistent Indexes L8: The number of L8 Indexes
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Search Indexer.Persistent Indexes L7(Logary.WinPerfCounter.Instance)">
<summary>
 Persistent Indexes L7: The number of L7 Indexes
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Search Indexer.Persistent Indexes L6(Logary.WinPerfCounter.Instance)">
<summary>
 Persistent Indexes L6: The number of L6 Indexes
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Search Indexer.Persistent Indexes L5(Logary.WinPerfCounter.Instance)">
<summary>
 Persistent Indexes L5: The number of L5 Indexes
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Search Indexer.Persistent Indexes L4(Logary.WinPerfCounter.Instance)">
<summary>
 Persistent Indexes L4: The number of L4 Indexes
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Search Indexer.Persistent Indexes L3(Logary.WinPerfCounter.Instance)">
<summary>
 Persistent Indexes L3: The number of L3 Indexes
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Search Indexer.Persistent Indexes L2(Logary.WinPerfCounter.Instance)">
<summary>
 Persistent Indexes L2: The number of L2 Indexes
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Search Indexer.Persistent Indexes L1(Logary.WinPerfCounter.Instance)">
<summary>
 Persistent Indexes L1: The number of L1 Indexes
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Search Indexer.Persistent Indexes(Logary.WinPerfCounter.Instance)">
<summary>
 Persistent Indexes: Number of Persistent Indexes
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Search Indexer.Master Merges to Date(Logary.WinPerfCounter.Instance)">
<summary>
 Master Merges to Date: Number of Master Merges to Date
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Search Indexer.Master Merges Now.(Logary.WinPerfCounter.Instance)">
<summary>
 Master Merges Now.: Indicator if a master merge is going on.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Search Indexer.Master Merge Progress(Logary.WinPerfCounter.Instance)">
<summary>
 Master Merge Progress: Master Merge Progress
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Search Indexer.Master Index Level.(Logary.WinPerfCounter.Instance)">
<summary>
 Master Index Level.: The level of the master index.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Search Indexer.L8 Merges Now.(Logary.WinPerfCounter.Instance)">
<summary>
 L8 Merges Now.: The number of L8 merges in progress at any one moment.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Search Indexer.L8 Merge Speed - last(Logary.WinPerfCounter.Instance)">
<summary>
 L8 Merge Speed - last: The last value [documents/hour] computed for the speed of L8 merges.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Search Indexer.L8 Merge Speed - average(Logary.WinPerfCounter.Instance)">
<summary>
 L8 Merge Speed - average: The average value [documents/hour] computed for the speed of L8 merges since the catalog has been loaded
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Search Indexer.L8 Merge - Count(Logary.WinPerfCounter.Instance)">
<summary>
 L8 Merge - Count: The number of L8 merges since the catalog was loaded
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Search Indexer.L7 Merges Now.(Logary.WinPerfCounter.Instance)">
<summary>
 L7 Merges Now.: The number of L7 merges in progress at any one moment.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Search Indexer.L7 Merge Speed - last(Logary.WinPerfCounter.Instance)">
<summary>
 L7 Merge Speed - last: The last value [documents/hour] computed for the speed of L7 merges.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Search Indexer.L7 Merge Speed - average(Logary.WinPerfCounter.Instance)">
<summary>
 L7 Merge Speed - average: The average value [documents/hour] computed for the speed of L7 merges since the catalog has been loaded
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Search Indexer.L7 Merge - Count(Logary.WinPerfCounter.Instance)">
<summary>
 L7 Merge - Count: The number of L7 merges since the catalog was loaded
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Search Indexer.L6 Merges Now.(Logary.WinPerfCounter.Instance)">
<summary>
 L6 Merges Now.: The number of L6 merges in progress at any one moment.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Search Indexer.L6 Merge Speed - last(Logary.WinPerfCounter.Instance)">
<summary>
 L6 Merge Speed - last: The last value [documents/hour] computed for the speed of L6 merges.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Search Indexer.L6 Merge Speed - average(Logary.WinPerfCounter.Instance)">
<summary>
 L6 Merge Speed - average: The average value [documents/hour] computed for the speed of L6 merges since the catalog has been loaded
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Search Indexer.L6 Merge - Count(Logary.WinPerfCounter.Instance)">
<summary>
 L6 Merge - Count: The number of L6 merges since the catalog was loaded
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Search Indexer.L5 Merges Now.(Logary.WinPerfCounter.Instance)">
<summary>
 L5 Merges Now.: The number of L5 merges in progress at any one moment.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Search Indexer.L5 Merge Speed - last(Logary.WinPerfCounter.Instance)">
<summary>
 L5 Merge Speed - last: The last value [documents/hour] computed for the speed of L5 merges.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Search Indexer.L5 Merge Speed - average(Logary.WinPerfCounter.Instance)">
<summary>
 L5 Merge Speed - average: The average value [documents/hour] computed for the speed of L5 merges since the catalog has been loaded
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Search Indexer.L5 Merge - Count(Logary.WinPerfCounter.Instance)">
<summary>
 L5 Merge - Count: The number of L5 merges since the catalog was loaded
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Search Indexer.L4 Merges Now.(Logary.WinPerfCounter.Instance)">
<summary>
 L4 Merges Now.: The number of L4 merges in progress at any one moment.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Search Indexer.L4 Merge Speed - last(Logary.WinPerfCounter.Instance)">
<summary>
 L4 Merge Speed - last: The last value [documents/hour] computed for the speed of L4 merges.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Search Indexer.L4 Merge Speed - average(Logary.WinPerfCounter.Instance)">
<summary>
 L4 Merge Speed - average: The average value [documents/hour] computed for the speed of L4 merges since the catalog has been loaded
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Search Indexer.L4 Merge - Count(Logary.WinPerfCounter.Instance)">
<summary>
 L4 Merge - Count: The number of L4 merges since the catalog was loaded
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Search Indexer.L3 Merges Now.(Logary.WinPerfCounter.Instance)">
<summary>
 L3 Merges Now.: The number of L3 merges in progress at any one moment.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Search Indexer.L3 Merge Speed - last(Logary.WinPerfCounter.Instance)">
<summary>
 L3 Merge Speed - last: The last value [documents/hour] computed for the speed of L3 merges.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Search Indexer.L3 Merge Speed - average(Logary.WinPerfCounter.Instance)">
<summary>
 L3 Merge Speed - average: The average value [documents/hour] computed for the speed of L3 merges since the catalog has been loaded
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Search Indexer.L3 Merge - Count(Logary.WinPerfCounter.Instance)">
<summary>
 L3 Merge - Count: The number of L3 merges since the catalog was loaded
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Search Indexer.L2 Merges Now.(Logary.WinPerfCounter.Instance)">
<summary>
 L2 Merges Now.: The number of L2 merges in progress at any one moment.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Search Indexer.L2 Merge Speed - last(Logary.WinPerfCounter.Instance)">
<summary>
 L2 Merge Speed - last: The last value [documents/hour] computed for the speed of L2 merges.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Search Indexer.L2 Merge Speed - average(Logary.WinPerfCounter.Instance)">
<summary>
 L2 Merge Speed - average: The average value [documents/hour] computed for the speed of L2 merges since the catalog has been loaded
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Search Indexer.L2 Merge - Count(Logary.WinPerfCounter.Instance)">
<summary>
 L2 Merge - Count: The number of L2 merges since the catalog was loaded
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Search Indexer.L1 Merges Now.(Logary.WinPerfCounter.Instance)">
<summary>
 L1 Merges Now.: The number of L1 merges in progress at any one moment.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Search Indexer.L1 Merge Speed - last(Logary.WinPerfCounter.Instance)">
<summary>
 L1 Merge Speed - last: The last value [documents/hour] computed for the speed of L1 merges.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Search Indexer.L1 Merge Speed - average(Logary.WinPerfCounter.Instance)">
<summary>
 L1 Merge Speed - average: The average value [documents/hour] computed for the speed of L1 merges since the catalog has been loaded
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Search Indexer.L1 Merge - Count(Logary.WinPerfCounter.Instance)">
<summary>
 L1 Merge - Count: The number of L1 merges since the catalog was loaded
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Search Indexer.L0 Merges (flushes) Now.(Logary.WinPerfCounter.Instance)">
<summary>
 L0 Merges (flushes) Now.: The number of L0 merges (flushes) in progress at any one moment.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Search Indexer.L0 Merge (Flush) Speed - Last(Logary.WinPerfCounter.Instance)">
<summary>
 L0 Merge (Flush) Speed - Last: The last value [documents/hour] computed for the speed of L0 merges (flushes).
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Search Indexer.L0 Merge (Flush) Speed - Average(Logary.WinPerfCounter.Instance)">
<summary>
 L0 Merge (Flush) Speed - Average: The average value [documents/hour] computed for the speed of L0 merges (flushes) since the catalog has been loaded
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Search Indexer.L0 Merge (Flush) - Count(Logary.WinPerfCounter.Instance)">
<summary>
 L0 Merge (Flush) - Count: The number of L0 merges (flushes) since the catalog was loaded
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Search Indexer.L0 Indexes (Wordlists)(Logary.WinPerfCounter.Instance)">
<summary>
 L0 Indexes (Wordlists): The number of L0 Indexes (Wordlists)
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Search Indexer.Index Size(Logary.WinPerfCounter.Instance)">
<summary>
 Index Size: Size of Index
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Search Indexer.Documents Filtered(Logary.WinPerfCounter.Instance)">
<summary>
 Documents Filtered: Number of Documents Filtered
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Search Indexer.Dirty WidSets(Logary.WinPerfCounter.Instance)">
<summary>
 Dirty WidSets: Number of dirty WidSets
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Search Indexer.Clean WidSets(Logary.WinPerfCounter.Instance)">
<summary>
 Clean WidSets: Number of clean WidSets
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Search Indexer.Active Connections(Logary.WinPerfCounter.Instance)">
<summary>
 Active Connections: Active Connections
</summary>
</member>
<member name="T:Logary.WinPerfCounters.Search Indexer">
<summary>
 Search Indexer: Indexer PlugIn statistics

 This performance counter does not have non-instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Workload Group Stats.Suboptimal plans/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Suboptimal plans/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Workload Group Stats.Requests completed/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Requests completed/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Workload Group Stats.Reduced memory grants/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Reduced memory grants/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Workload Group Stats.Queued requests(Logary.WinPerfCounter.Instance)">
<summary>
 Queued requests: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Workload Group Stats.Query optimizations/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Query optimizations/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Workload Group Stats.Max request memory grant (KB)(Logary.WinPerfCounter.Instance)">
<summary>
 Max request memory grant (KB): -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Workload Group Stats.Max request cpu time (ms)(Logary.WinPerfCounter.Instance)">
<summary>
 Max request cpu time (ms): -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Workload Group Stats.CPU usage % base(Logary.WinPerfCounter.Instance)">
<summary>
 CPU usage % base: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Workload Group Stats.CPU usage %(Logary.WinPerfCounter.Instance)">
<summary>
 CPU usage %: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Workload Group Stats.Blocked tasks(Logary.WinPerfCounter.Instance)">
<summary>
 Blocked tasks: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Workload Group Stats.Active requests(Logary.WinPerfCounter.Instance)">
<summary>
 Active requests: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Workload Group Stats.Active parallel threads(Logary.WinPerfCounter.Instance)">
<summary>
 Active parallel threads: -
</summary>
</member>
<member name="T:Logary.WinPerfCounters.SQLServer:Workload Group Stats">
<summary>
 SQLServer:Workload Group Stats: Statistics associated with workload groups

 This performance counter does not have instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Wait Statistics.Workspace synchronization waits(Logary.WinPerfCounter.Instance)">
<summary>
 Workspace synchronization waits: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Wait Statistics.Wait for the worker(Logary.WinPerfCounter.Instance)">
<summary>
 Wait for the worker: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Wait Statistics.Transaction ownership waits(Logary.WinPerfCounter.Instance)">
<summary>
 Transaction ownership waits: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Wait Statistics.Thread-safe memory objects waits(Logary.WinPerfCounter.Instance)">
<summary>
 Thread-safe memory objects waits: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Wait Statistics.Page latch waits(Logary.WinPerfCounter.Instance)">
<summary>
 Page latch waits: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Wait Statistics.Page IO latch waits(Logary.WinPerfCounter.Instance)">
<summary>
 Page IO latch waits: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Wait Statistics.Non-Page latch waits(Logary.WinPerfCounter.Instance)">
<summary>
 Non-Page latch waits: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Wait Statistics.Network IO waits(Logary.WinPerfCounter.Instance)">
<summary>
 Network IO waits: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Wait Statistics.Memory grant queue waits(Logary.WinPerfCounter.Instance)">
<summary>
 Memory grant queue waits: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Wait Statistics.Log write waits(Logary.WinPerfCounter.Instance)">
<summary>
 Log write waits: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Wait Statistics.Log buffer waits(Logary.WinPerfCounter.Instance)">
<summary>
 Log buffer waits: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Wait Statistics.Lock waits(Logary.WinPerfCounter.Instance)">
<summary>
 Lock waits: -
</summary>
</member>
<member name="T:Logary.WinPerfCounters.SQLServer:Wait Statistics">
<summary>
 SQLServer:Wait Statistics: Wait Statistics

 This performance counter does not have instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:User Settable.Query(Logary.WinPerfCounter.Instance)">
<summary>
 Query: -
</summary>
</member>
<member name="T:Logary.WinPerfCounters.SQLServer:User Settable">
<summary>
 SQLServer:User Settable: This defines user definable counters

 This performance counter does not have instance based counters
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Transactions.Version Store unit truncation">
<summary>
 Version Store unit truncation: Truncation of unit in Version Store.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Transactions.Version Store unit creation">
<summary>
 Version Store unit creation: Creation of new unit in Version Store.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Transactions.Version Store unit count">
<summary>
 Version Store unit count: Number of unit in Version Store.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Transactions.Version Store Size (KB)">
<summary>
 Version Store Size (KB): The size of the version store in KB.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Transactions.Version Generation rate (KB/s)">
<summary>
 Version Generation rate (KB/s): The version generation rate in KB per seconds.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Transactions.Version Cleanup rate (KB/s)">
<summary>
 Version Cleanup rate (KB/s): The version cleanup rate in KB per seconds.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Transactions.Update conflict ratio base">
<summary>
 Update conflict ratio base: The total number of update snapshot transactions.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Transactions.Update conflict ratio">
<summary>
 Update conflict ratio: The fraction of update snapshot transactions that have update conflicts to the total number of update snapshot transactions.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Transactions.Update Snapshot Transactions">
<summary>
 Update Snapshot Transactions: The total number of active snapshot transactions that do updates.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Transactions.Transactions">
<summary>
 Transactions: The total number of active transactions.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Transactions.Snapshot Transactions">
<summary>
 Snapshot Transactions: The total number of active snapshot transactions.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Transactions.NonSnapshot Version Transactions">
<summary>
 NonSnapshot Version Transactions: The total number of active non-snapshot transactions that generate version records.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Transactions.Longest Transaction Running Time">
<summary>
 Longest Transaction Running Time: The longest running time of any transcation in seconds.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Transactions.Free Space in tempdb (KB)">
<summary>
 Free Space in tempdb (KB): The free space in tempdb in KB.
</summary>
</member>
<member name="T:Logary.WinPerfCounters.SQLServer:Transactions">
<summary>
 SQLServer:Transactions: Statistics related to SQL Server transactions.

 This performance counter does not have instance based counters
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:SQL Statistics.Unsafe Auto-Params/sec">
<summary>
 Unsafe Auto-Params/sec: Number of unsafe auto-parameterizations.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:SQL Statistics.Safe Auto-Params/sec">
<summary>
 Safe Auto-Params/sec: Number of safe auto-parameterizations.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:SQL Statistics.SQL Re-Compilations/sec">
<summary>
 SQL Re-Compilations/sec: Number of SQL re-compiles.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:SQL Statistics.SQL Compilations/sec">
<summary>
 SQL Compilations/sec: Number of SQL compilations.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:SQL Statistics.SQL Attention rate">
<summary>
 SQL Attention rate: Number of attentions per second.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:SQL Statistics.Misguided plan executions/sec">
<summary>
 Misguided plan executions/sec: Number of plan executions per second in which a plan guide could not be honored during plan generation. The plan guide was disregarded and normal compilation was used to generate the executed plan.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:SQL Statistics.Guided plan executions/sec">
<summary>
 Guided plan executions/sec: Number of plan executions per second in which the query plan has been generated by using a plan guide.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:SQL Statistics.Forced Parameterizations/sec">
<summary>
 Forced Parameterizations/sec: Number of statements parameterized by forced parameterization per second.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:SQL Statistics.Failed Auto-Params/sec">
<summary>
 Failed Auto-Params/sec: Number of failed auto-parameterizations.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:SQL Statistics.Batch Requests/sec">
<summary>
 Batch Requests/sec: Number of SQL batch requests received by server.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:SQL Statistics.Auto-Param Attempts/sec">
<summary>
 Auto-Param Attempts/sec: Number of auto-parameterization attempts.
</summary>
</member>
<member name="T:Logary.WinPerfCounters.SQLServer:SQL Statistics">
<summary>
 SQLServer:SQL Statistics: Collects statistics associated with SQL requests

 This performance counter does not have instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:SQL Errors.Errors/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Errors/sec: -
</summary>
</member>
<member name="T:Logary.WinPerfCounters.SQLServer:SQL Errors">
<summary>
 SQLServer:SQL Errors: Statistics about errors in SQL Server

 This performance counter does not have instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Resource Pool Stats.Used memory (KB)(Logary.WinPerfCounter.Instance)">
<summary>
 Used memory (KB): -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Resource Pool Stats.Target memory (KB)(Logary.WinPerfCounter.Instance)">
<summary>
 Target memory (KB): -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Resource Pool Stats.Query exec memory target (KB)(Logary.WinPerfCounter.Instance)">
<summary>
 Query exec memory target (KB): -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Resource Pool Stats.Pending memory grants count(Logary.WinPerfCounter.Instance)">
<summary>
 Pending memory grants count: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Resource Pool Stats.Memory grants/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Memory grants/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Resource Pool Stats.Memory grant timeouts/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Memory grant timeouts/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Resource Pool Stats.Max memory (KB)(Logary.WinPerfCounter.Instance)">
<summary>
 Max memory (KB): -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Resource Pool Stats.Compile memory target (KB)(Logary.WinPerfCounter.Instance)">
<summary>
 Compile memory target (KB): -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Resource Pool Stats.Cache memory target (KB)(Logary.WinPerfCounter.Instance)">
<summary>
 Cache memory target (KB): -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Resource Pool Stats.CPU usage target %(Logary.WinPerfCounter.Instance)">
<summary>
 CPU usage target %: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Resource Pool Stats.CPU usage % base(Logary.WinPerfCounter.Instance)">
<summary>
 CPU usage % base: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Resource Pool Stats.CPU usage %(Logary.WinPerfCounter.Instance)">
<summary>
 CPU usage %: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Resource Pool Stats.CPU control effect %(Logary.WinPerfCounter.Instance)">
<summary>
 CPU control effect %: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Resource Pool Stats.Active memory grants count(Logary.WinPerfCounter.Instance)">
<summary>
 Active memory grants count: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Resource Pool Stats.Active memory grant amount (KB)(Logary.WinPerfCounter.Instance)">
<summary>
 Active memory grant amount (KB): -
</summary>
</member>
<member name="T:Logary.WinPerfCounters.SQLServer:Resource Pool Stats">
<summary>
 SQLServer:Resource Pool Stats: Statistics associated with resource pools

 This performance counter does not have instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Replication Snapshot.Snapshot:Delivered Trans/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Snapshot:Delivered Trans/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Replication Snapshot.Snapshot:Delivered Cmds/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Snapshot:Delivered Cmds/sec: -
</summary>
</member>
<member name="T:Logary.WinPerfCounters.SQLServer:Replication Snapshot">
<summary>
 SQLServer:Replication Snapshot: Replication Snapshot Agent Statistics

 This performance counter does not have instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Replication Merge.Uploaded Changes/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Uploaded Changes/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Replication Merge.Downloaded Changes/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Downloaded Changes/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Replication Merge.Conflicts/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Conflicts/sec: -
</summary>
</member>
<member name="T:Logary.WinPerfCounters.SQLServer:Replication Merge">
<summary>
 SQLServer:Replication Merge: Replication Merge Agent Statistics

 This performance counter does not have instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Replication Logreader.Logreader:Delivery Latency(Logary.WinPerfCounter.Instance)">
<summary>
 Logreader:Delivery Latency: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Replication Logreader.Logreader:Delivered Trans/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Logreader:Delivered Trans/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Replication Logreader.Logreader:Delivered Cmds/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Logreader:Delivered Cmds/sec: -
</summary>
</member>
<member name="T:Logary.WinPerfCounters.SQLServer:Replication Logreader">
<summary>
 SQLServer:Replication Logreader: Replication Logreader Agent Statistics

 This performance counter does not have instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Replication Dist_.Dist:Delivery Latency(Logary.WinPerfCounter.Instance)">
<summary>
 Dist:Delivery Latency: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Replication Dist_.Dist:Delivered Trans/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Dist:Delivered Trans/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Replication Dist_.Dist:Delivered Cmds/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Dist:Delivered Cmds/sec: -
</summary>
</member>
<member name="T:Logary.WinPerfCounters.SQLServer:Replication Dist_">
<summary>
 SQLServer:Replication Dist.: Replication Distribution Agent Statistics

 This performance counter does not have instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Replication Agents.Running(Logary.WinPerfCounter.Instance)">
<summary>
 Running: -
</summary>
</member>
<member name="T:Logary.WinPerfCounters.SQLServer:Replication Agents">
<summary>
 SQLServer:Replication Agents: Replication Summary

 This performance counter does not have instance based counters
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Query Execution.Remote resend requests/sec">
<summary>
 Remote resend requests/sec: Total number of remote resend request per second
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Query Execution.Remote requests/sec">
<summary>
 Remote requests/sec: Total number of remote request per second
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Query Execution.Remote activations/sec">
<summary>
 Remote activations/sec: Total number of remote activations per second
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Query Execution.Rem Req Cache Hit Ratio Base">
<summary>
 Rem Req Cache Hit Ratio Base: Base for prior entry
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Query Execution.Rem Req Cache Hit Ratio">
<summary>
 Rem Req Cache Hit Ratio: Ratio between cache hits and lookups
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Query Execution.Local data access/sec">
<summary>
 Local data access/sec: Total number of local data access per second
</summary>
</member>
<member name="T:Logary.WinPerfCounters.SQLServer:Query Execution">
<summary>
 SQLServer:Query Execution: Statistics associated with Query Execution

 This performance counter does not have instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Plan Cache.Cache Pages(Logary.WinPerfCounter.Instance)">
<summary>
 Cache Pages: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Plan Cache.Cache Objects in use(Logary.WinPerfCounter.Instance)">
<summary>
 Cache Objects in use: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Plan Cache.Cache Object Counts(Logary.WinPerfCounter.Instance)">
<summary>
 Cache Object Counts: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Plan Cache.Cache Hit Ratio Base(Logary.WinPerfCounter.Instance)">
<summary>
 Cache Hit Ratio Base: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Plan Cache.Cache Hit Ratio(Logary.WinPerfCounter.Instance)">
<summary>
 Cache Hit Ratio: -
</summary>
</member>
<member name="T:Logary.WinPerfCounters.SQLServer:Plan Cache">
<summary>
 SQLServer:Plan Cache: This defines cache counters

 This performance counter does not have instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Memory Node.Total Node Memory (KB)(Logary.WinPerfCounter.Instance)">
<summary>
 Total Node Memory (KB): -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Memory Node.Target Node Memory (KB)(Logary.WinPerfCounter.Instance)">
<summary>
 Target Node Memory (KB): -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Memory Node.Stolen Node Memory (KB)(Logary.WinPerfCounter.Instance)">
<summary>
 Stolen Node Memory (KB): -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Memory Node.Free Node Memory (KB)(Logary.WinPerfCounter.Instance)">
<summary>
 Free Node Memory (KB): -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Memory Node.Foreign Node Memory (KB)(Logary.WinPerfCounter.Instance)">
<summary>
 Foreign Node Memory (KB): -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Memory Node.Database Node Memory (KB)(Logary.WinPerfCounter.Instance)">
<summary>
 Database Node Memory (KB): -
</summary>
</member>
<member name="T:Logary.WinPerfCounters.SQLServer:Memory Node">
<summary>
 SQLServer:Memory Node: This defines memory usage per NUMA node.

 This performance counter does not have instance based counters
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Memory Manager.Total Server Memory (KB)">
<summary>
 Total Server Memory (KB): Total amount of dynamic memory the server is currently consuming
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Memory Manager.Target Server Memory (KB)">
<summary>
 Target Server Memory (KB): Ideal amount of memory the server is willing to consume
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Memory Manager.Stolen Server Memory (KB)">
<summary>
 Stolen Server Memory (KB): Amount of memory the server is currently using for the purposes other than the database pages.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Memory Manager.SQL Cache Memory (KB)">
<summary>
 SQL Cache Memory (KB): Total amount of dynamic memory the server is using for the dynamic SQL cache
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Memory Manager.Reserved Server Memory (KB)">
<summary>
 Reserved Server Memory (KB): Amount of memory the server has reserved for future usage. This counter shows current unused amount of the initial grant shown in Granted Workspace Memory (KB).
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Memory Manager.Optimizer Memory (KB)">
<summary>
 Optimizer Memory (KB): Total amount of dynamic memory the server is using for query optimization
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Memory Manager.Memory Grants Pending">
<summary>
 Memory Grants Pending: Current number of processes waiting for a workspace memory grant
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Memory Manager.Memory Grants Outstanding">
<summary>
 Memory Grants Outstanding: Current number of processes that have successfully acquired a workspace memory grant
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Memory Manager.Maximum Workspace Memory (KB)">
<summary>
 Maximum Workspace Memory (KB): Total amount of memory available for grants to executing processes. This memory is used primarily for hash, sort and create index operations.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Memory Manager.Log Pool Memory (KB)">
<summary>
 Log Pool Memory (KB): Total amount of dynamic memory the server is using for Log Pool
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Memory Manager.Lock Owner Blocks Allocated">
<summary>
 Lock Owner Blocks Allocated: The current number of allocated lock owner blocks.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Memory Manager.Lock Owner Blocks">
<summary>
 Lock Owner Blocks: The number of lock owner blocks that are currently in use on the server. Refreshed periodically.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Memory Manager.Lock Memory (KB)">
<summary>
 Lock Memory (KB): Total amount of dynamic memory the server is using for locks
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Memory Manager.Lock Blocks Allocated">
<summary>
 Lock Blocks Allocated: The current number of allocated lock blocks.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Memory Manager.Lock Blocks">
<summary>
 Lock Blocks: The current number of lock blocks that are in use on the server. Refreshed periodically.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Memory Manager.Granted Workspace Memory (KB)">
<summary>
 Granted Workspace Memory (KB): Total amount of memory granted to executing processes. This memory is used for hash, sort and create index operations.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Memory Manager.Free Memory (KB)">
<summary>
 Free Memory (KB): Amount of memory the server is currently not using.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Memory Manager.External benefit of memory">
<summary>
 External benefit of memory: The external value of memory, in ms per page per ms, multiplied by 10 billion and truncated to an integer
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Memory Manager.Database Cache Memory (KB)">
<summary>
 Database Cache Memory (KB): Amount of memory the server is currently using for the database cache.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Memory Manager.Connection Memory (KB)">
<summary>
 Connection Memory (KB): Total amount of dynamic memory the server is using for maintaining connections
</summary>
</member>
<member name="T:Logary.WinPerfCounters.SQLServer:Memory Manager">
<summary>
 SQLServer:Memory Manager: This defines memory usage.

 This performance counter does not have instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Memory Broker Clerks.Simulation size(Logary.WinPerfCounter.Instance)">
<summary>
 Simulation size: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Memory Broker Clerks.Simulation benefit(Logary.WinPerfCounter.Instance)">
<summary>
 Simulation benefit: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Memory Broker Clerks.Pressure evictions (pages/sec)(Logary.WinPerfCounter.Instance)">
<summary>
 Pressure evictions (pages/sec): -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Memory Broker Clerks.Periodic evictions (pages)(Logary.WinPerfCounter.Instance)">
<summary>
 Periodic evictions (pages): -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Memory Broker Clerks.Memory broker clerk size(Logary.WinPerfCounter.Instance)">
<summary>
 Memory broker clerk size: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Memory Broker Clerks.Internal benefit(Logary.WinPerfCounter.Instance)">
<summary>
 Internal benefit: -
</summary>
</member>
<member name="T:Logary.WinPerfCounters.SQLServer:Memory Broker Clerks">
<summary>
 SQLServer:Memory Broker Clerks: Statistics related to memory broker clerks

 This performance counter does not have instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Locks.Number of Deadlocks/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Number of Deadlocks/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Locks.Lock Waits/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Lock Waits/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Locks.Lock Wait Time (ms)(Logary.WinPerfCounter.Instance)">
<summary>
 Lock Wait Time (ms): -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Locks.Lock Timeouts/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Lock Timeouts/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Locks.Lock Timeouts (timeout > 0)/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Lock Timeouts (timeout &gt; 0)/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Locks.Lock Requests/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Lock Requests/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Locks.Average Wait Time Base(Logary.WinPerfCounter.Instance)">
<summary>
 Average Wait Time Base: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Locks.Average Wait Time (ms)(Logary.WinPerfCounter.Instance)">
<summary>
 Average Wait Time (ms): -
</summary>
</member>
<member name="T:Logary.WinPerfCounters.SQLServer:Locks">
<summary>
 SQLServer:Locks: Describes statistics for individual lock server lock requests

 This performance counter does not have instance based counters
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Latches.Total Latch Wait Time (ms)">
<summary>
 Total Latch Wait Time (ms): Total latch wait time (milliseconds) for latch requests that had to wait in the last second.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Latches.SuperLatch Promotions/sec">
<summary>
 SuperLatch Promotions/sec: Number of latches that have been promoted to SuperLatches
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Latches.SuperLatch Demotions/sec">
<summary>
 SuperLatch Demotions/sec: Number of SuperLatches that have been demoted to regular latches
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Latches.Number of SuperLatches">
<summary>
 Number of SuperLatches: Number of latches that are currently SuperLatches.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Latches.Latch Waits/sec">
<summary>
 Latch Waits/sec: Number of latch requests that could not be granted immediately and had to wait before being granted.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Latches.Average Latch Wait Time Base">
<summary>
 Average Latch Wait Time Base: Base for Average Latch Wait Time.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Latches.Average Latch Wait Time (ms)">
<summary>
 Average Latch Wait Time (ms): Average latch wait time (milliseconds) for latch requests that had to wait.
</summary>
</member>
<member name="T:Logary.WinPerfCounters.SQLServer:Latches">
<summary>
 SQLServer:Latches: Collects statistics associated with internal server latches

 This performance counter does not have instance based counters
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:General Statistics.User Connections">
<summary>
 User Connections: Number of users connected to the system.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:General Statistics.Transactions">
<summary>
 Transactions: Number of transaction enlistments (local, dtc, and bound).
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:General Statistics.Trace Event Notification Queue">
<summary>
 Trace Event Notification Queue: Number of trace event notification instances waiting in the internal queue to be sent thru Service Broker
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:General Statistics.Tempdb rowset id">
<summary>
 Tempdb rowset id: Number of duplicate tempdb rowset id generated
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:General Statistics.Tempdb recovery unit id">
<summary>
 Tempdb recovery unit id: Number of duplicate tempdb recovery unit id generated
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:General Statistics.Temp Tables For Destruction">
<summary>
 Temp Tables For Destruction: Number of temporary tables/table variables waiting to be destroyed by the cleanup system thread
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:General Statistics.Temp Tables Creation Rate">
<summary>
 Temp Tables Creation Rate: Number of temporary tables/table variables created/sec
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:General Statistics.SQL Trace IO Provider Lock Waits">
<summary>
 SQL Trace IO Provider Lock Waits: Number of waits for the File IO Provider lock per second
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:General Statistics.SOAP WSDL Requests">
<summary>
 SOAP WSDL Requests: Number of SOAP Web Service Description Language requests started per second.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:General Statistics.SOAP Session Terminate Requests">
<summary>
 SOAP Session Terminate Requests: Number of SOAP Session terminate requests started per second.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:General Statistics.SOAP Session Initiate Requests">
<summary>
 SOAP Session Initiate Requests: Number of SOAP Session initiate requests started per second.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:General Statistics.SOAP SQL Requests">
<summary>
 SOAP SQL Requests: Number of SOAP SQL requests started per second.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:General Statistics.SOAP Method Invocations">
<summary>
 SOAP Method Invocations: Number of SOAP method invocations started per second.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:General Statistics.SOAP Empty Requests">
<summary>
 SOAP Empty Requests: Number of empty SOAP requests started per second.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:General Statistics.Processes blocked">
<summary>
 Processes blocked: Number of currently blocked processes.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:General Statistics.Non-atomic yield rate">
<summary>
 Non-atomic yield rate: Number of non-atomic yields per second.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:General Statistics.Mars Deadlocks">
<summary>
 Mars Deadlocks: Number of Mars Deadlocks detected.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:General Statistics.Logouts/sec">
<summary>
 Logouts/sec: Total number of logouts started per second.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:General Statistics.Logins/sec">
<summary>
 Logins/sec: Total number of logins started per second.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:General Statistics.Logical Connections">
<summary>
 Logical Connections: Number of logical connections to the system.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:General Statistics.HTTP Authenticated Requests">
<summary>
 HTTP Authenticated Requests: Number of authenticated HTTP requests started per second.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:General Statistics.Event Notifications Delayed Drop">
<summary>
 Event Notifications Delayed Drop: Number of event notifications waiting to be dropped by a system thread
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:General Statistics.Connection Reset/sec">
<summary>
 Connection Reset/sec: Total number of connection resets per second.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:General Statistics.Active Temp Tables">
<summary>
 Active Temp Tables: Number of temporary tables/table variables in use
</summary>
</member>
<member name="T:Logary.WinPerfCounters.SQLServer:General Statistics">
<summary>
 SQLServer:General Statistics: Server General Statistics

 This performance counter does not have instance based counters
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:FileTable.Time update FileTable item BASE">
<summary>
 Time update FileTable item BASE: Average time (in milliseconds) taken to update a FileTable item (BASE).
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:FileTable.Time to get FileTable item BASE">
<summary>
 Time to get FileTable item BASE: Average time (in milliseconds) taken to retrieve a FileTable item (BASE).
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:FileTable.Time rename FileTable item BASE">
<summary>
 Time rename FileTable item BASE: Average time (in milliseconds) taken to rename a FileTable item (BASE).
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:FileTable.Time per file I/O response BASE">
<summary>
 Time per file I/O response BASE: Average time (in milliseconds) spent handling an outgoing file I/O response (BASE).
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:FileTable.Time per file I/O request BASE">
<summary>
 Time per file I/O request BASE: Average time (in milliseconds) spent handling an incoming file I/O request (BASE).
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:FileTable.Time move FileTable item BASE">
<summary>
 Time move FileTable item BASE: Average time (in milliseconds) taken to move a FileTable item (BASE).
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:FileTable.Time delete FileTable item BASE">
<summary>
 Time delete FileTable item BASE: Average time (in milliseconds) taken to delete a FileTable item (BASE).
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:FileTable.Time FileTable handle kill BASE">
<summary>
 Time FileTable handle kill BASE: Average time (in milliseconds) taken to kill a FileTable handle (BASE).
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:FileTable.Time FileTable enumeration BASE">
<summary>
 Time FileTable enumeration BASE: Average time (in milliseconds) taken for a FileTable enumeration request (BASE).
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:FileTable.FileTable table operations/sec">
<summary>
 FileTable table operations/sec: Total number of table operational events processed by the FileTable store component per second.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:FileTable.FileTable kill handle ops/sec">
<summary>
 FileTable kill handle ops/sec: Total number of FileTable handle kill operations per second.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:FileTable.FileTable item update reqs/sec">
<summary>
 FileTable item update reqs/sec: Total number of FileTable update item requests per second.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:FileTable.FileTable item rename reqs/sec">
<summary>
 FileTable item rename reqs/sec: Total number of FileTable rename item requests per second.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:FileTable.FileTable item move reqs/sec">
<summary>
 FileTable item move reqs/sec: Total number of FileTable move item requests per second.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:FileTable.FileTable item get requests/sec">
<summary>
 FileTable item get requests/sec: Total number of FileTable retrieve item requests per second.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:FileTable.FileTable item delete reqs/sec">
<summary>
 FileTable item delete reqs/sec: Total number of FileTable delete item requests per second.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:FileTable.FileTable file I/O response/sec">
<summary>
 FileTable file I/O response/sec: Total number of outgoing file I/O responses per second.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:FileTable.FileTable file I/O requests/sec">
<summary>
 FileTable file I/O requests/sec: Total number of incoming FileTable file I/O requests per second.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:FileTable.FileTable enumeration reqs/sec">
<summary>
 FileTable enumeration reqs/sec: Total number of FileTable enumeration requests per second.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:FileTable.FileTable db operations/sec">
<summary>
 FileTable db operations/sec: Total number of database operational events processed by the FileTable store component per second.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:FileTable.Avg time update FileTable item">
<summary>
 Avg time update FileTable item: Average time (in milliseconds) taken to update a FileTable item.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:FileTable.Avg time to get FileTable item">
<summary>
 Avg time to get FileTable item: Average time (in milliseconds) taken to retrieve a FileTable item.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:FileTable.Avg time rename FileTable item">
<summary>
 Avg time rename FileTable item: Average time (in milliseconds) taken to rename a FileTable item.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:FileTable.Avg time per file I/O response">
<summary>
 Avg time per file I/O response: Average time (in milliseconds) spent handling an outgoing file I/O response.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:FileTable.Avg time per file I/O request">
<summary>
 Avg time per file I/O request: Average time (in milliseconds) spent handling an incoming file I/O request.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:FileTable.Avg time move FileTable item">
<summary>
 Avg time move FileTable item: Average time (in milliseconds) taken to move a FileTable item.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:FileTable.Avg time delete FileTable item">
<summary>
 Avg time delete FileTable item: Average time (in milliseconds) taken to delete a FileTable item.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:FileTable.Avg time FileTable handle kill">
<summary>
 Avg time FileTable handle kill: Average time (in milliseconds) taken to kill a FileTable handle.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:FileTable.Avg time FileTable enumeration">
<summary>
 Avg time FileTable enumeration: Average time (in milliseconds) taken for a FileTable enumeration request.
</summary>
</member>
<member name="T:Logary.WinPerfCounters.SQLServer:FileTable">
<summary>
 SQLServer:FileTable: Statistics associated with FileTable and non-transacted access

 This performance counter does not have instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Exec Statistics.OLEDB calls(Logary.WinPerfCounter.Instance)">
<summary>
 OLEDB calls: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Exec Statistics.Extended Procedures(Logary.WinPerfCounter.Instance)">
<summary>
 Extended Procedures: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Exec Statistics.Distributed Query(Logary.WinPerfCounter.Instance)">
<summary>
 Distributed Query: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Exec Statistics.DTC calls(Logary.WinPerfCounter.Instance)">
<summary>
 DTC calls: -
</summary>
</member>
<member name="T:Logary.WinPerfCounters.SQLServer:Exec Statistics">
<summary>
 SQLServer:Exec Statistics: Execution statistics for external calls

 This performance counter does not have instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Deprecated Features.Usage(Logary.WinPerfCounter.Instance)">
<summary>
 Usage: -
</summary>
</member>
<member name="T:Logary.WinPerfCounters.SQLServer:Deprecated Features">
<summary>
 SQLServer:Deprecated Features: Statistics on deprecated feature usage

 This performance counter does not have instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Databases.Write Transactions/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Write Transactions/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Databases.Transactions/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Transactions/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Databases.Tracked transactions/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Tracked transactions/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Databases.Shrink Data Movement Bytes/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Shrink Data Movement Bytes/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Databases.Repl. Trans. Rate(Logary.WinPerfCounter.Instance)">
<summary>
 Repl. Trans. Rate: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Databases.Repl. Pending Xacts(Logary.WinPerfCounter.Instance)">
<summary>
 Repl. Pending Xacts: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Databases.Percent Log Used(Logary.WinPerfCounter.Instance)">
<summary>
 Percent Log Used: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Databases.Log Truncations(Logary.WinPerfCounter.Instance)">
<summary>
 Log Truncations: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Databases.Log Shrinks(Logary.WinPerfCounter.Instance)">
<summary>
 Log Shrinks: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Databases.Log Pool Requests/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Log Pool Requests/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Databases.Log Pool Disk Reads/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Log Pool Disk Reads/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Databases.Log Pool Cache Misses/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Log Pool Cache Misses/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Databases.Log Growths(Logary.WinPerfCounter.Instance)">
<summary>
 Log Growths: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Databases.Log Flushes/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Log Flushes/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Databases.Log Flush Write Time (ms)(Logary.WinPerfCounter.Instance)">
<summary>
 Log Flush Write Time (ms): -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Databases.Log Flush Waits/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Log Flush Waits/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Databases.Log Flush Wait Time(Logary.WinPerfCounter.Instance)">
<summary>
 Log Flush Wait Time: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Databases.Log File(s) Used Size (KB)(Logary.WinPerfCounter.Instance)">
<summary>
 Log File(s) Used Size (KB): -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Databases.Log File(s) Size (KB)(Logary.WinPerfCounter.Instance)">
<summary>
 Log File(s) Size (KB): -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Databases.Log Cache Reads/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Log Cache Reads/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Databases.Log Cache Hit Ratio Base(Logary.WinPerfCounter.Instance)">
<summary>
 Log Cache Hit Ratio Base: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Databases.Log Cache Hit Ratio(Logary.WinPerfCounter.Instance)">
<summary>
 Log Cache Hit Ratio: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Databases.Log Bytes Flushed/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Log Bytes Flushed/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Databases.Data File(s) Size (KB)(Logary.WinPerfCounter.Instance)">
<summary>
 Data File(s) Size (KB): -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Databases.DBCC Logical Scan Bytes/sec(Logary.WinPerfCounter.Instance)">
<summary>
 DBCC Logical Scan Bytes/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Databases.Commit table entries(Logary.WinPerfCounter.Instance)">
<summary>
 Commit table entries: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Databases.Bulk Copy Throughput/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Bulk Copy Throughput/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Databases.Bulk Copy Rows/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Bulk Copy Rows/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Databases.Backup/Restore Throughput/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Backup/Restore Throughput/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Databases.Active Transactions(Logary.WinPerfCounter.Instance)">
<summary>
 Active Transactions: -
</summary>
</member>
<member name="T:Logary.WinPerfCounters.SQLServer:Databases">
<summary>
 SQLServer:Databases: This defines a Database manager object for SQL Server

 This performance counter does not have instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Database Replica.Transaction Delay(Logary.WinPerfCounter.Instance)">
<summary>
 Transaction Delay: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Database Replica.Total Log requiring undo(Logary.WinPerfCounter.Instance)">
<summary>
 Total Log requiring undo: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Database Replica.Redone Bytes/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Redone Bytes/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Database Replica.Redo blocked/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Redo blocked/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Database Replica.Redo Bytes Remaining(Logary.WinPerfCounter.Instance)">
<summary>
 Redo Bytes Remaining: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Database Replica.Recovery Queue(Logary.WinPerfCounter.Instance)">
<summary>
 Recovery Queue: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Database Replica.Mirrored Write Transactions/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Mirrored Write Transactions/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Database Replica.Log remaining for undo(Logary.WinPerfCounter.Instance)">
<summary>
 Log remaining for undo: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Database Replica.Log Send Queue(Logary.WinPerfCounter.Instance)">
<summary>
 Log Send Queue: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Database Replica.Log Bytes Received/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Log Bytes Received/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Database Replica.File Bytes Received/sec(Logary.WinPerfCounter.Instance)">
<summary>
 File Bytes Received/sec: -
</summary>
</member>
<member name="T:Logary.WinPerfCounters.SQLServer:Database Replica">
<summary>
 SQLServer:Database Replica: This defines a HADR secondary database object for SQL Server

 This performance counter does not have instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Database Mirroring.Transaction Delay(Logary.WinPerfCounter.Instance)">
<summary>
 Transaction Delay: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Database Mirroring.Sends/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Sends/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Database Mirroring.Send/Receive Ack Time(Logary.WinPerfCounter.Instance)">
<summary>
 Send/Receive Ack Time: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Database Mirroring.Redo Queue KB(Logary.WinPerfCounter.Instance)">
<summary>
 Redo Queue KB: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Database Mirroring.Redo Bytes/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Redo Bytes/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Database Mirroring.Receives/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Receives/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Database Mirroring.Pages Sent/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Pages Sent/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Database Mirroring.Mirrored Write Transactions/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Mirrored Write Transactions/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Database Mirroring.Log Send Queue KB(Logary.WinPerfCounter.Instance)">
<summary>
 Log Send Queue KB: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Database Mirroring.Log Send Flow Control Time (ms)(Logary.WinPerfCounter.Instance)">
<summary>
 Log Send Flow Control Time (ms): -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Database Mirroring.Log Scanned for Undo KB(Logary.WinPerfCounter.Instance)">
<summary>
 Log Scanned for Undo KB: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Database Mirroring.Log Remaining for Undo KB(Logary.WinPerfCounter.Instance)">
<summary>
 Log Remaining for Undo KB: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Database Mirroring.Log Harden Time (ms)(Logary.WinPerfCounter.Instance)">
<summary>
 Log Harden Time (ms): -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Database Mirroring.Log Compressed Bytes Sent/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Log Compressed Bytes Sent/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Database Mirroring.Log Compressed Bytes Rcvd/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Log Compressed Bytes Rcvd/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Database Mirroring.Log Bytes Sent/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Log Bytes Sent/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Database Mirroring.Log Bytes Sent from Cache/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Log Bytes Sent from Cache/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Database Mirroring.Log Bytes Redone from Cache/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Log Bytes Redone from Cache/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Database Mirroring.Log Bytes Received/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Log Bytes Received/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Database Mirroring.Bytes Sent/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Bytes Sent/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Database Mirroring.Bytes Received/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Bytes Received/sec: -
</summary>
</member>
<member name="T:Logary.WinPerfCounters.SQLServer:Database Mirroring">
<summary>
 SQLServer:Database Mirroring: This defines a Database Mirroring object for SQL Server

 This performance counter does not have instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Cursor Manager by Type.Number of active cursor plans(Logary.WinPerfCounter.Instance)">
<summary>
 Number of active cursor plans: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Cursor Manager by Type.Cursor worktable usage(Logary.WinPerfCounter.Instance)">
<summary>
 Cursor worktable usage: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Cursor Manager by Type.Cursor memory usage(Logary.WinPerfCounter.Instance)">
<summary>
 Cursor memory usage: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Cursor Manager by Type.Cursor Requests/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Cursor Requests/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Cursor Manager by Type.Cursor Cache Use Counts/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Cursor Cache Use Counts/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Cursor Manager by Type.Cached Cursor Counts(Logary.WinPerfCounter.Instance)">
<summary>
 Cached Cursor Counts: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Cursor Manager by Type.Cache Hit Ratio Base(Logary.WinPerfCounter.Instance)">
<summary>
 Cache Hit Ratio Base: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Cursor Manager by Type.Cache Hit Ratio(Logary.WinPerfCounter.Instance)">
<summary>
 Cache Hit Ratio: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Cursor Manager by Type.Active cursors(Logary.WinPerfCounter.Instance)">
<summary>
 Active cursors: -
</summary>
</member>
<member name="T:Logary.WinPerfCounters.SQLServer:Cursor Manager by Type">
<summary>
 SQLServer:Cursor Manager by Type: Counters for cursor properties grouped by type

 This performance counter does not have instance based counters
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Cursor Manager Total.Cursor flushes">
<summary>
 Cursor flushes: Total number of times a flush for a cursor xstmt occured.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Cursor Manager Total.Cursor conversion rate">
<summary>
 Cursor conversion rate: Number of cursor conversions/sec.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Cursor Manager Total.Async population count">
<summary>
 Async population count: Number of cursors being populated asynchronously.
</summary>
</member>
<member name="T:Logary.WinPerfCounters.SQLServer:Cursor Manager Total">
<summary>
 SQLServer:Cursor Manager Total: Counters for cursor properties not grouped by type

 This performance counter does not have instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Catalog Metadata.Cache Hit Ratio Base(Logary.WinPerfCounter.Instance)">
<summary>
 Cache Hit Ratio Base: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Catalog Metadata.Cache Hit Ratio(Logary.WinPerfCounter.Instance)">
<summary>
 Cache Hit Ratio: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Catalog Metadata.Cache Entries Pinned Count(Logary.WinPerfCounter.Instance)">
<summary>
 Cache Entries Pinned Count: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Catalog Metadata.Cache Entries Count(Logary.WinPerfCounter.Instance)">
<summary>
 Cache Entries Count: -
</summary>
</member>
<member name="T:Logary.WinPerfCounters.SQLServer:Catalog Metadata">
<summary>
 SQLServer:Catalog Metadata: This defines a catalog metadata manager object for SQL Server

 This performance counter does not have instance based counters
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:CLR.CLR Execution">
<summary>
 CLR Execution: Total Execution time in CLR ( microseconds ).
</summary>
</member>
<member name="T:Logary.WinPerfCounters.SQLServer:CLR">
<summary>
 SQLServer:CLR: CLR Execution in SQL Server

 This performance counter does not have instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Buffer Node.Remote node page lookups/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Remote node page lookups/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Buffer Node.Page life expectancy(Logary.WinPerfCounter.Instance)">
<summary>
 Page life expectancy: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Buffer Node.Local node page lookups/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Local node page lookups/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Buffer Node.Database pages(Logary.WinPerfCounter.Instance)">
<summary>
 Database pages: -
</summary>
</member>
<member name="T:Logary.WinPerfCounters.SQLServer:Buffer Node">
<summary>
 SQLServer:Buffer Node: Statistics related to SQL Server&apos;s buffer pool by NUMA node

 This performance counter does not have instance based counters
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Buffer Manager.Target pages">
<summary>
 Target pages: Ideal number of pages in the buffer pool.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Buffer Manager.Readahead pages/sec">
<summary>
 Readahead pages/sec: Number of pages read in anticipation of use.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Buffer Manager.Page writes/sec">
<summary>
 Page writes/sec: Number of physical database page writes issued.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Buffer Manager.Page reads/sec">
<summary>
 Page reads/sec: Number of physical database page reads issued.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Buffer Manager.Page lookups/sec">
<summary>
 Page lookups/sec: Number of requests to find a page in the buffer pool.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Buffer Manager.Page life expectancy">
<summary>
 Page life expectancy: Number of seconds a page will stay in the buffer pool without references.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Buffer Manager.Lazy writes/sec">
<summary>
 Lazy writes/sec: Number of buffers written by buffer manager&apos;s lazy writer.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Buffer Manager.Integral Controller Slope">
<summary>
 Integral Controller Slope: The slope that integral controller for the buffer pool last used, times -10 billion
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Buffer Manager.Free list stalls/sec">
<summary>
 Free list stalls/sec: Number of requests that had to wait for a free page.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Buffer Manager.Database pages">
<summary>
 Database pages: Number of pages in the buffer pool with database content.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Buffer Manager.Checkpoint pages/sec">
<summary>
 Checkpoint pages/sec: Number of pages flushed by checkpoint or other operations that require all dirty pages to be flushed.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Buffer Manager.Buffer cache hit ratio base">
<summary>
 Buffer cache hit ratio base: Base for prior entry
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Buffer Manager.Buffer cache hit ratio">
<summary>
 Buffer cache hit ratio: Percentage of pages that were found in the buffer pool without having to incur a read from disk.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Buffer Manager.Background writer pages/sec">
<summary>
 Background writer pages/sec: Number of pages flushed to enforce the recovery interval settings.
</summary>
</member>
<member name="T:Logary.WinPerfCounters.SQLServer:Buffer Manager">
<summary>
 SQLServer:Buffer Manager: Statistics related to SQL Servers buffer manager

 This performance counter does not have instance based counters
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Broker_DBM Transport.Send I/Os/sec">
<summary>
 Send I/Os/sec: The number of transport send I/Os per second. Note that a transport send I/O may contain more than one message fragment.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Broker_DBM Transport.Send I/O bytes/sec">
<summary>
 Send I/O bytes/sec: The number of transport send I/O bytes per second.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Broker_DBM Transport.Send I/O Len Avg Base">
<summary>
 Send I/O Len Avg Base: Base for the average byte length of transport send I/O operations.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Broker_DBM Transport.Send I/O Len Avg">
<summary>
 Send I/O Len Avg: The average byte length of transport send I/O operations.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Broker_DBM Transport.Recv I/O Buffer Copies bytes/sec">
<summary>
 Recv I/O Buffer Copies bytes/sec: The rate at which transport receive I/O operations had to move buffer fragments in memory.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Broker_DBM Transport.Recv I/O Buffer Copies Count">
<summary>
 Recv I/O Buffer Copies Count: The number of times when transport receive I/O operations had to move buffer fragments in memory.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Broker_DBM Transport.Receive I/Os/sec">
<summary>
 Receive I/Os/sec: The number of transport receives I/O per second. Note that a transport receive I/O may contain more than one message fragment.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Broker_DBM Transport.Receive I/O bytes/sec">
<summary>
 Receive I/O bytes/sec: The number of transport receive I/O bytes per second.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Broker_DBM Transport.Receive I/O Len Avg Base">
<summary>
 Receive I/O Len Avg Base: Base for the average byte length of transport receive I/O operations.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Broker_DBM Transport.Receive I/O Len Avg">
<summary>
 Receive I/O Len Avg: The average byte length of transport receive I/O operations.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Broker_DBM Transport.Pending Msg Frags for Send I/O">
<summary>
 Pending Msg Frags for Send I/O: The current number of message fragments that are being marshalled, or marshalled and ready to be sent via the transport layer.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Broker_DBM Transport.Pending Msg Frags for Recv I/O">
<summary>
 Pending Msg Frags for Recv I/O: The current number of message fragments received in transport receive I/O operations that have not been enqueued (or rejected) yet.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Broker_DBM Transport.Pending Bytes for Send I/O">
<summary>
 Pending Bytes for Send I/O: The number of buffer bytes associated with message fragments being marshalled, or marshalled and ready to be sent with send I/O operations.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Broker_DBM Transport.Pending Bytes for Recv I/O">
<summary>
 Pending Bytes for Recv I/O: The number of bytes associated with in completed transport receive I/O operations whose message fragments haven&apos;t been enqueued (or rejected) yet.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Broker_DBM Transport.Open Connection Count">
<summary>
 Open Connection Count: The total number of transport connections currently open.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Broker_DBM Transport.Msg Fragment Send Size Avg Base">
<summary>
 Msg Fragment Send Size Avg Base: Base for the average byte size of message fragments sent in transport send I/O operations.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Broker_DBM Transport.Msg Fragment Send Size Avg">
<summary>
 Msg Fragment Send Size Avg: The average byte size of message fragments sent in transport send I/O operations.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Broker_DBM Transport.Msg Fragment Recv Size Avg Base">
<summary>
 Msg Fragment Recv Size Avg Base: Base for the average byte size of message fragments received in transport receive I/O operations.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Broker_DBM Transport.Msg Fragment Recv Size Avg">
<summary>
 Msg Fragment Recv Size Avg: The average byte size of message fragments received in transport receive I/O operations.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Broker_DBM Transport.Message Fragment Sends/sec">
<summary>
 Message Fragment Sends/sec: The number of message fragments sent per second in transport send I/O operations.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Broker_DBM Transport.Message Fragment Receives/sec">
<summary>
 Message Fragment Receives/sec: The number of message fragments received per second in transport receive I/O operations.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Broker_DBM Transport.Message Fragment P9 Sends/sec">
<summary>
 Message Fragment P9 Sends/sec: The number of priority 9 message fragments sent per second in transport send I/O operations.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Broker_DBM Transport.Message Fragment P8 Sends/sec">
<summary>
 Message Fragment P8 Sends/sec: The number of priority 8 message fragments sent per second in transport send I/O operations.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Broker_DBM Transport.Message Fragment P7 Sends/sec">
<summary>
 Message Fragment P7 Sends/sec: The number of priority 7 message fragments sent per second in transport send I/O operations.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Broker_DBM Transport.Message Fragment P6 Sends/sec">
<summary>
 Message Fragment P6 Sends/sec: The number of priority 6 message fragments sent per second in transport send I/O operations.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Broker_DBM Transport.Message Fragment P5 Sends/sec">
<summary>
 Message Fragment P5 Sends/sec: The number of priority 5 message fragments sent per second in transport send I/O operations.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Broker_DBM Transport.Message Fragment P4 Sends/sec">
<summary>
 Message Fragment P4 Sends/sec: The number of priority 4 message fragments sent per second in transport send I/O operations.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Broker_DBM Transport.Message Fragment P3 Sends/sec">
<summary>
 Message Fragment P3 Sends/sec: The number of priority 3 message fragments sent per second in transport send I/O operations.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Broker_DBM Transport.Message Fragment P2 Sends/sec">
<summary>
 Message Fragment P2 Sends/sec: The number of priority 2 message fragments sent per second in transport send I/O operations.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Broker_DBM Transport.Message Fragment P10 Sends/sec">
<summary>
 Message Fragment P10 Sends/sec: The number of priority 10 message fragments sent per second in transport send I/O operations.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Broker_DBM Transport.Message Fragment P1 Sends/sec">
<summary>
 Message Fragment P1 Sends/sec: The number of priority 1 message fragments sent per second in transport send I/O operations.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Broker_DBM Transport.Current Msg Frags for Send I/O">
<summary>
 Current Msg Frags for Send I/O: The current number of message fragments associated with current transport send I/O operations that haven&apos;t completed.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Broker_DBM Transport.Current Bytes for Send I/O">
<summary>
 Current Bytes for Send I/O: The number of buffer bytes associated with current transport send I/O operations that haven&apos;t completed.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Broker_DBM Transport.Current Bytes for Recv I/O">
<summary>
 Current Bytes for Recv I/O: The number of bytes associated with current transport receive I/O operations that haven&apos;t completed.
</summary>
</member>
<member name="T:Logary.WinPerfCounters.SQLServer:Broker_DBM Transport">
<summary>
 SQLServer:Broker/DBM Transport: Service Broker/Database Mirroring Transport Statistics

 This performance counter does not have instance based counters
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Broker TO Statistics.Transmission Obj Writes/Sec">
<summary>
 Transmission Obj Writes/Sec: The number of Transmission Objects saved per second.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Broker TO Statistics.Transmission Obj Set Dirty/Sec">
<summary>
 Transmission Obj Set Dirty/Sec: The number of Transmission Objects marked dirty per second.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Broker TO Statistics.Transmission Obj Gets/Sec">
<summary>
 Transmission Obj Gets/Sec: The number of Transmission Objects requested per second.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Broker TO Statistics.Avg. Time to Write Batch Base">
<summary>
 Avg. Time to Write Batch Base: Average time to save a Transmission Object batch.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Broker TO Statistics.Avg. Time to Write Batch (ms)">
<summary>
 Avg. Time to Write Batch (ms): Average time to save a Transmission Object batch.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Broker TO Statistics.Avg. Time Between Batches Base">
<summary>
 Avg. Time Between Batches Base: Average time between Transmission Object batch flushes.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Broker TO Statistics.Avg. Time Between Batches (ms)">
<summary>
 Avg. Time Between Batches (ms): Average time between Transmission Object batch flushes.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Broker TO Statistics.Avg. Length of Batched Writes BS">
<summary>
 Avg. Length of Batched Writes BS: Average Number of Transmission Objects saved in a batch.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Broker TO Statistics.Avg. Length of Batched Writes">
<summary>
 Avg. Length of Batched Writes: Average Number of Transmission Objects saved in a batch.
</summary>
</member>
<member name="T:Logary.WinPerfCounters.SQLServer:Broker TO Statistics">
<summary>
 SQLServer:Broker TO Statistics: Service Broker Transmission Object Statistics

 This performance counter does not have instance based counters
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Broker Statistics.SQL SENDs/sec">
<summary>
 SQL SENDs/sec: The number of SQL SEND commands processed by the Broker per second.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Broker Statistics.SQL SEND Total">
<summary>
 SQL SEND Total: Total number of SQL SEND commands processed by the Broker.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Broker Statistics.SQL RECEIVEs/sec">
<summary>
 SQL RECEIVEs/sec: The number of SQL RECEIVE commands processed by the Broker per second.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Broker Statistics.SQL RECEIVE Total">
<summary>
 SQL RECEIVE Total: Total number of SQL RECEIVE commands processed by the Broker.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Broker Statistics.Forwarded Pending Msg Count">
<summary>
 Forwarded Pending Msg Count: The number of forwarded messages that have not been successfully sent yet.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Broker Statistics.Forwarded Pending Msg Bytes">
<summary>
 Forwarded Pending Msg Bytes: The number of forwarded message bytes that have not been successfully sent yet.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Broker Statistics.Forwarded Msgs Discarded/sec">
<summary>
 Forwarded Msgs Discarded/sec: The number of forwarded messages that were discarded per second due to forwarded message memory limits, age limits, etc.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Broker Statistics.Forwarded Msg Discarded Total">
<summary>
 Forwarded Msg Discarded Total: Total number of forwarded messages discarded due to forwarded message memory limits, age limits, etc.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Broker Statistics.Forwarded Msg Bytes/sec">
<summary>
 Forwarded Msg Bytes/sec: The number of forwarded message bytes successfully sent per second.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Broker Statistics.Forwarded Msg Byte Total">
<summary>
 Forwarded Msg Byte Total: Total number of forwarded message bytes successfully sent.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Broker Statistics.Forwarded Messages/sec">
<summary>
 Forwarded Messages/sec: The number of forwarded messages successfully sent per second.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Broker Statistics.Forwarded Messages Total">
<summary>
 Forwarded Messages Total: Total number of forwarded messages successfully sent.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Broker Statistics.Enqueued Transport Msgs/sec">
<summary>
 Enqueued Transport Msgs/sec: The number of messages from the transport that are successfully delivered into local target queues per second. This includes all messages from remote endpoints and messages from local endpoints which go through the transport.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Broker Statistics.Enqueued Transport Msgs Total">
<summary>
 Enqueued Transport Msgs Total: Total number of messages from the transport that are successfully delivered into local target queues. This includes all messages from remote endpoints and messages from local endpoints which go through the transport.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Broker Statistics.Enqueued Transport Msg Frags/sec">
<summary>
 Enqueued Transport Msg Frags/sec: The number of message fragments from the transport that are successfully delivered into local target queues per second. Note that the message can be marked as disabled if it is incomplete and/or out of order.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Broker Statistics.Enqueued Transport Msg Frag Tot">
<summary>
 Enqueued Transport Msg Frag Tot: Total number of message fragments from the transport that are successfully delivered into local target queues. Note that the message can be marked as disabled if it is incomplete and/or out of order.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Broker Statistics.Enqueued TransmissionQ Msgs/sec">
<summary>
 Enqueued TransmissionQ Msgs/sec: The number of messages that have been placed into the broker transmission queue per second.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Broker Statistics.Enqueued P9 Messages/sec">
<summary>
 Enqueued P9 Messages/sec: The number of priority 9 messages from local endpoints and the transport that are successfully delivered into local target queues per second.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Broker Statistics.Enqueued P8 Messages/sec">
<summary>
 Enqueued P8 Messages/sec: The number of priority 8 messages from local endpoints and the transport that are successfully delivered into local target queues per second.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Broker Statistics.Enqueued P7 Messages/sec">
<summary>
 Enqueued P7 Messages/sec: The number of priority 7 messages from local endpoints and the transport that are successfully delivered into local target queues per second.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Broker Statistics.Enqueued P6 Messages/sec">
<summary>
 Enqueued P6 Messages/sec: The number of priority 6 messages from local endpoints and the transport that are successfully delivered into local target queues per second.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Broker Statistics.Enqueued P5 Messages/sec">
<summary>
 Enqueued P5 Messages/sec: The number of priority 5 messages from local endpoints and the transport that are successfully delivered into local target queues per second.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Broker Statistics.Enqueued P4 Messages/sec">
<summary>
 Enqueued P4 Messages/sec: The number of priority 4 messages from local endpoints and the transport that are successfully delivered into local target queues per second.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Broker Statistics.Enqueued P3 Messages/sec">
<summary>
 Enqueued P3 Messages/sec: The number of priority 3 messages from local endpoints and the transport that are successfully delivered into local target queues per second.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Broker Statistics.Enqueued P2 Messages/sec">
<summary>
 Enqueued P2 Messages/sec: The number of priority 2 messages from local endpoints and the transport that are successfully delivered into local target queues per second.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Broker Statistics.Enqueued P10 Messages/sec">
<summary>
 Enqueued P10 Messages/sec: The number of priority 10 messages from local endpoints and the transport that are successfully delivered into local target queues per second.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Broker Statistics.Enqueued P1 Messages/sec">
<summary>
 Enqueued P1 Messages/sec: The number of priority 1 messages from local endpoints and the transport that are successfully delivered into local target queues per second.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Broker Statistics.Enqueued Messages/sec">
<summary>
 Enqueued Messages/sec: The number of messages from local endpoints and the transport that are successfully delivered into local target queues per second.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Broker Statistics.Enqueued Messages Total">
<summary>
 Enqueued Messages Total: Total number of messages from local endpoints and the transport that are successfully delivered into local target queues.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Broker Statistics.Enqueued Local Messages/sec">
<summary>
 Enqueued Local Messages/sec: The number of messages from local endpoints that are successfully delivered directly into local target queues per second.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Broker Statistics.Enqueued Local Messages Total">
<summary>
 Enqueued Local Messages Total: Total number of messages from local endpoints that are successfully delivered directly into local target queues.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Broker Statistics.Dropped Messages Total">
<summary>
 Dropped Messages Total: The number of messages that were received in the instance but could not be delivered.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Broker Statistics.Dialog Timer Event Count">
<summary>
 Dialog Timer Event Count: The number of dialog endpoint related timer events in the Broker.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Broker Statistics.Dequeued TransmissionQ Msgs/sec">
<summary>
 Dequeued TransmissionQ Msgs/sec: The number of messages that have been removed from the broker transmission queue per second.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Broker Statistics.Corrupted Messages Total">
<summary>
 Corrupted Messages Total: The number of corrupted messages that were received in the instance.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Broker Statistics.Broker Transaction Rollbacks">
<summary>
 Broker Transaction Rollbacks: The number of Service Broker related transactions that have rolled back.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Broker Statistics.Activation Errors Total">
<summary>
 Activation Errors Total: The number of times an activation stored procedure exited with an error.
</summary>
</member>
<member name="T:Logary.WinPerfCounters.SQLServer:Broker Statistics">
<summary>
 SQLServer:Broker Statistics: Service Broker Statistics

 This performance counter does not have instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Broker Activation.Tasks Started/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Tasks Started/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Broker Activation.Tasks Running(Logary.WinPerfCounter.Instance)">
<summary>
 Tasks Running: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Broker Activation.Tasks Aborted/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Tasks Aborted/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Broker Activation.Task Limit Reached/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Task Limit Reached/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Broker Activation.Task Limit Reached(Logary.WinPerfCounter.Instance)">
<summary>
 Task Limit Reached: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Broker Activation.Stored Procedures Invoked/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Stored Procedures Invoked/sec: -
</summary>
</member>
<member name="T:Logary.WinPerfCounters.SQLServer:Broker Activation">
<summary>
 SQLServer:Broker Activation: Service Broker Activation

 This performance counter does not have instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Batch Resp Statistics.Batches >=100000ms(Logary.WinPerfCounter.Instance)">
<summary>
 Batches &gt;=100000ms: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Batch Resp Statistics.Batches >=050000ms & <100000ms(Logary.WinPerfCounter.Instance)">
<summary>
 Batches &gt;=050000ms &amp; &lt;100000ms: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Batch Resp Statistics.Batches >=020000ms & <050000ms(Logary.WinPerfCounter.Instance)">
<summary>
 Batches &gt;=020000ms &amp; &lt;050000ms: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Batch Resp Statistics.Batches >=010000ms & <020000ms(Logary.WinPerfCounter.Instance)">
<summary>
 Batches &gt;=010000ms &amp; &lt;020000ms: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Batch Resp Statistics.Batches >=005000ms & <010000ms(Logary.WinPerfCounter.Instance)">
<summary>
 Batches &gt;=005000ms &amp; &lt;010000ms: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Batch Resp Statistics.Batches >=002000ms & <005000ms(Logary.WinPerfCounter.Instance)">
<summary>
 Batches &gt;=002000ms &amp; &lt;005000ms: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Batch Resp Statistics.Batches >=001000ms & <002000ms(Logary.WinPerfCounter.Instance)">
<summary>
 Batches &gt;=001000ms &amp; &lt;002000ms: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Batch Resp Statistics.Batches >=000500ms & <001000ms(Logary.WinPerfCounter.Instance)">
<summary>
 Batches &gt;=000500ms &amp; &lt;001000ms: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Batch Resp Statistics.Batches >=000200ms & <000500ms(Logary.WinPerfCounter.Instance)">
<summary>
 Batches &gt;=000200ms &amp; &lt;000500ms: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Batch Resp Statistics.Batches >=000100ms & <000200ms(Logary.WinPerfCounter.Instance)">
<summary>
 Batches &gt;=000100ms &amp; &lt;000200ms: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Batch Resp Statistics.Batches >=000050ms & <000100ms(Logary.WinPerfCounter.Instance)">
<summary>
 Batches &gt;=000050ms &amp; &lt;000100ms: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Batch Resp Statistics.Batches >=000020ms & <000050ms(Logary.WinPerfCounter.Instance)">
<summary>
 Batches &gt;=000020ms &amp; &lt;000050ms: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Batch Resp Statistics.Batches >=000010ms & <000020ms(Logary.WinPerfCounter.Instance)">
<summary>
 Batches &gt;=000010ms &amp; &lt;000020ms: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Batch Resp Statistics.Batches >=000005ms & <000010ms(Logary.WinPerfCounter.Instance)">
<summary>
 Batches &gt;=000005ms &amp; &lt;000010ms: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Batch Resp Statistics.Batches >=000002ms & <000005ms(Logary.WinPerfCounter.Instance)">
<summary>
 Batches &gt;=000002ms &amp; &lt;000005ms: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Batch Resp Statistics.Batches >=000001ms & <000002ms(Logary.WinPerfCounter.Instance)">
<summary>
 Batches &gt;=000001ms &amp; &lt;000002ms: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Batch Resp Statistics.Batches >=000000ms & <000001ms(Logary.WinPerfCounter.Instance)">
<summary>
 Batches &gt;=000000ms &amp; &lt;000001ms: -
</summary>
</member>
<member name="T:Logary.WinPerfCounters.SQLServer:Batch Resp Statistics">
<summary>
 SQLServer:Batch Resp Statistics: Counters to track SQL Batch Response times

 This performance counter does not have instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Backup Device.Device Throughput Bytes/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Device Throughput Bytes/sec: -
</summary>
</member>
<member name="T:Logary.WinPerfCounters.SQLServer:Backup Device">
<summary>
 SQLServer:Backup Device: This defines a backup device object for SQL Server

 This performance counter does not have instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Availability Replica.Sends to Transport/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Sends to Transport/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Availability Replica.Sends to Replica/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Sends to Replica/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Availability Replica.Resent Messages/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Resent Messages/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Availability Replica.Receives from Replica/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Receives from Replica/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Availability Replica.Flow Control/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Flow Control/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Availability Replica.Flow Control Time (ms/sec)(Logary.WinPerfCounter.Instance)">
<summary>
 Flow Control Time (ms/sec): -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Availability Replica.Bytes Sent to Transport/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Bytes Sent to Transport/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Availability Replica.Bytes Sent to Replica/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Bytes Sent to Replica/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLServer:Availability Replica.Bytes Received from Replica/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Bytes Received from Replica/sec: -
</summary>
</member>
<member name="T:Logary.WinPerfCounters.SQLServer:Availability Replica">
<summary>
 SQLServer:Availability Replica: This defines a HADR availability replica object for SQL Server

 This performance counter does not have instance based counters
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Access Methods.Worktables From Cache Ratio">
<summary>
 Worktables From Cache Ratio: Percentage of work tables created where the initial two pages of the work table were not allocated but were immediately available from the work table cache.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Access Methods.Worktables From Cache Base">
<summary>
 Worktables From Cache Base: Percent of worktables from cache base.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Access Methods.Worktables Created/sec">
<summary>
 Worktables Created/sec: Number of work tables created per second. For example, work tables could be used to store temporary results for query spool, LOB variables, XML variables, and cursors.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Access Methods.Workfiles Created/sec">
<summary>
 Workfiles Created/sec: Number of work files created per second. For example, work files could be used to store temporary results for hash joins and hash aggregates.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Access Methods.Used tree page cookie">
<summary>
 Used tree page cookie: Number of times a tree page cookie was used successfully during an index search since no change happened on the parent page of the tree page. The cookie is used to speed up index search.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Access Methods.Used leaf page cookie">
<summary>
 Used leaf page cookie: Number of times a leaf page cookie was used successfully during an index search since no change happened on the leaf page. The cookie is used to speed up index search.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Access Methods.Table Lock Escalations/sec">
<summary>
 Table Lock Escalations/sec: The number of times locks on a table were escalated.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Access Methods.Skipped Ghosted Records/sec">
<summary>
 Skipped Ghosted Records/sec: Number of ghosted records per second skipped during scans.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Access Methods.Scan Point Revalidations/sec">
<summary>
 Scan Point Revalidations/sec: Number of times the scan point had to be revalidated to continue the scan.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Access Methods.Range Scans/sec">
<summary>
 Range Scans/sec: Number of qualified range scans through indexes per second.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Access Methods.Probe Scans/sec">
<summary>
 Probe Scans/sec: Number of probe scans per second that are used to find at most one single qualified row in an index or base table directly.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Access Methods.Pages compressed/sec">
<summary>
 Pages compressed/sec: Number of times a database page was compressed
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Access Methods.Pages Allocated/sec">
<summary>
 Pages Allocated/sec: Number of pages allocated per second in all databases in this SQL Server instance. These include pages allocations from both mixed extents and uniform extents.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Access Methods.Page compression attempts/sec">
<summary>
 Page compression attempts/sec: Number of attempts to compress a database page per second
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Access Methods.Page Splits/sec">
<summary>
 Page Splits/sec: Number of page splits per second that occur as a result of overflowing index pages.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Access Methods.Page Deallocations/sec">
<summary>
 Page Deallocations/sec: Number of pages deallocated per second in all databases in this SQL Server instance. These include pages from mixed extents and uniform extents.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Access Methods.Mixed page allocations/sec">
<summary>
 Mixed page allocations/sec: Number of pages allocated per second from mixed extents. These could be used for storing the IAM pages and the first eight pages that are allocated to an allocation unit.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Access Methods.LobSS Provider Truncation Count">
<summary>
 LobSS Provider Truncation Count: Count of LOB Storage Service Providers truncated.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Access Methods.LobSS Provider Destroy Count">
<summary>
 LobSS Provider Destroy Count: Count of LOB Storage Service Providers destroyed.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Access Methods.LobSS Provider Create Count">
<summary>
 LobSS Provider Create Count: Count of LOB Storage Service Providers created. One worktable created per LOB Storage Service Provider.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Access Methods.LobHandle Destroy Count">
<summary>
 LobHandle Destroy Count: Count of temporary LOBs destroyed.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Access Methods.LobHandle Create Count">
<summary>
 LobHandle Create Count: Count of temporary LOBs created.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Access Methods.Index Searches/sec">
<summary>
 Index Searches/sec: Number of index searches. Index searches are used to start range scans, single index record fetches, and to reposition within an index.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Access Methods.InSysXact waits/sec">
<summary>
 InSysXact waits/sec: Number of times a reader needs to wait for a page because the InSysXact bit is set
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Access Methods.Full Scans/sec">
<summary>
 Full Scans/sec: Number of unrestricted full scans. These can either be base table or full index scans.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Access Methods.FreeSpace Scans/sec">
<summary>
 FreeSpace Scans/sec: Number of scans per second that were initiated to search for free space within pages already allocated to an allocation unit to insert or modify record fragments. Each scan may find multiple pages.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Access Methods.FreeSpace Page Fetches/sec">
<summary>
 FreeSpace Page Fetches/sec: Number of pages fetched per second by free space scans. These scans search for free space within pages already allocated to an allocation unit, to satisfy requests to insert or modify record fragments.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Access Methods.Forwarded Records/sec">
<summary>
 Forwarded Records/sec: Number of records fetched through forwarded record pointers.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Access Methods.Failed tree page cookie">
<summary>
 Failed tree page cookie: The number of times that a tree page cookie could not be used during an index search since changes happened on the parent pages of those tree pages. The cookie is used to speed up index search.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Access Methods.Failed leaf page cookie">
<summary>
 Failed leaf page cookie: The number of times that a leaf page cookie could not be used during an index search since changes happened on the leaf page. The cookie is used to speed up index search.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Access Methods.Failed AU cleanup batches/sec">
<summary>
 Failed AU cleanup batches/sec: The number of batches per second that failed and required retry, by the background task that cleans up deferred dropped allocation units. Failure could be due to lack of memory or disk space, hardware failure and other reasons.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Access Methods.Extents Allocated/sec">
<summary>
 Extents Allocated/sec: Number of extents allocated per second in all databases in this SQL Server instance.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Access Methods.Extent Deallocations/sec">
<summary>
 Extent Deallocations/sec: Number of extents deallocated per second in all databases in this SQL Server instance.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Access Methods.Dropped rowsets skipped/sec">
<summary>
 Dropped rowsets skipped/sec: The number of rowsets per second created as a result of aborted online index build operations that were skipped by the background task that cleans up deferred dropped rowsets created.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Access Methods.Dropped rowset cleanups/sec">
<summary>
 Dropped rowset cleanups/sec: The number of rowsets per second created as a result of aborted online index build operations that were successfully dropped by the background task that cleans up deferred dropped rowsets.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Access Methods.Deferred dropped AUs">
<summary>
 Deferred dropped AUs: The number of allocation units waiting to be dropped by the background task that cleans up deferred dropped allocation units.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Access Methods.Deferred Dropped rowsets">
<summary>
 Deferred Dropped rowsets: The number of rowsets created as a result of aborted online index build operations that are waiting to be dropped by the background task that cleans up deferred dropped rowsets.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Access Methods.Count Push Off Row">
<summary>
 Count Push Off Row: Count of values that were pushed from in-row to off-row.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Access Methods.Count Pull In Row">
<summary>
 Count Pull In Row: Count of values that were pulled in-row from off-row.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Access Methods.Count Lob Readahead">
<summary>
 Count Lob Readahead: Count of lob pages on which readahead was issued.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Access Methods.By-reference Lob Use Count">
<summary>
 By-reference Lob Use Count: Count of by-reference lob values that were used. By-reference lobs are used in certain bulk operations to avoid the cost of passing them by value.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Access Methods.By-reference Lob Create Count">
<summary>
 By-reference Lob Create Count: Count of large object (LOB) values that were passed by reference. By-reference lobs are used in certain bulk operations to avoid the cost of passing them by value.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Access Methods.AU cleanups/sec">
<summary>
 AU cleanups/sec: The number of allocation units per second that were successfully dropped by the background task that cleans up deferred dropped allocation units. Each allocation unit drop requires multiple batches.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLServer:Access Methods.AU cleanup batches/sec">
<summary>
 AU cleanup batches/sec: The number of batches that completed successfully per second by the background task that cleans up deferred dropped allocation units.
</summary>
</member>
<member name="T:Logary.WinPerfCounters.SQLServer:Access Methods">
<summary>
 SQLServer:Access Methods: Collects statistics associated with the database server access methods

 This performance counter does not have instance based counters
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLAgent:Statistics.SQL Server restarted">
<summary>
 SQL Server restarted: The number of times the SQL Server has been successfully restarted by SQL Server Agent, since the last SQL Server Agent restart.
</summary>
</member>
<member name="T:Logary.WinPerfCounters.SQLAgent:Statistics">
<summary>
 SQLAgent:Statistics: SQLAgent general statistics

 This performance counter does not have instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLAgent:Jobs.Successful jobs base(Logary.WinPerfCounter.Instance)">
<summary>
 Successful jobs base: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLAgent:Jobs.Successful jobs(Logary.WinPerfCounter.Instance)">
<summary>
 Successful jobs: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLAgent:Jobs.Queued jobs(Logary.WinPerfCounter.Instance)">
<summary>
 Queued jobs: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLAgent:Jobs.Jobs activated/minute(Logary.WinPerfCounter.Instance)">
<summary>
 Jobs activated/minute: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLAgent:Jobs.Job success rate(Logary.WinPerfCounter.Instance)">
<summary>
 Job success rate: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLAgent:Jobs.Failed jobs(Logary.WinPerfCounter.Instance)">
<summary>
 Failed jobs: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLAgent:Jobs.Active jobs(Logary.WinPerfCounter.Instance)">
<summary>
 Active jobs: -
</summary>
</member>
<member name="T:Logary.WinPerfCounters.SQLAgent:Jobs">
<summary>
 SQLAgent:Jobs: SQLAgent General Statistics about jobs

 This performance counter does not have instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLAgent:JobSteps.Total step retries(Logary.WinPerfCounter.Instance)">
<summary>
 Total step retries: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLAgent:JobSteps.Queued steps(Logary.WinPerfCounter.Instance)">
<summary>
 Queued steps: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SQLAgent:JobSteps.Active steps(Logary.WinPerfCounter.Instance)">
<summary>
 Active steps: -
</summary>
</member>
<member name="T:Logary.WinPerfCounters.SQLAgent:JobSteps">
<summary>
 SQLAgent:JobSteps: Statistics for job steps

 This performance counter does not have instance based counters
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLAgent:Alerts.Alerts activated/minute">
<summary>
 Alerts activated/minute: The number of Alerts that have activated within the last minute.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SQLAgent:Alerts.Activated alerts">
<summary>
 Activated alerts: The number of Alerts that have activated since the last SQL Server restart.
</summary>
</member>
<member name="T:Logary.WinPerfCounters.SQLAgent:Alerts">
<summary>
 SQLAgent:Alerts: SQLAgent statistics about alerts

 This performance counter does not have instance based counters
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SMSvcHost 4_0_0_0.Uris Unregistered for net.tcp">
<summary>
 Uris Unregistered for net.tcp: The total number of uris that were succesfully unregistered for net.tcp.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SMSvcHost 4_0_0_0.Uris Unregistered for net.pipe">
<summary>
 Uris Unregistered for net.pipe: The total number of uris that were succesfully unregistered for net.pipe.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SMSvcHost 4_0_0_0.Uris Registered for net.tcp">
<summary>
 Uris Registered for net.tcp: The total number of uris that were succesfully registered for net.tcp.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SMSvcHost 4_0_0_0.Uris Registered for net.pipe">
<summary>
 Uris Registered for net.pipe: The total number of uris that were succesfully registered for net.pipe.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SMSvcHost 4_0_0_0.Registrations Active for net.tcp">
<summary>
 Registrations Active for net.tcp: The number of uri registrations currently active for net.tcp.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SMSvcHost 4_0_0_0.Registrations Active for net.pipe">
<summary>
 Registrations Active for net.pipe: The number of uri registrations currently active for net.pipe.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SMSvcHost 4_0_0_0.Protocol Failures over net.tcp">
<summary>
 Protocol Failures over net.tcp: The total number of failures at the protocol layer of net.tcp.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SMSvcHost 4_0_0_0.Protocol Failures over net.pipe">
<summary>
 Protocol Failures over net.pipe: The total number of failures at the protocol layer of net.pipe.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SMSvcHost 4_0_0_0.Dispatch Failures over net.tcp">
<summary>
 Dispatch Failures over net.tcp: The total number of failures dispatching messages received over net.tcp.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SMSvcHost 4_0_0_0.Dispatch Failures over net.pipe">
<summary>
 Dispatch Failures over net.pipe: The total number of failures dispatching messages received over net.pipe.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SMSvcHost 4_0_0_0.Connections Dispatched over net.tcp">
<summary>
 Connections Dispatched over net.tcp: The total number of connections dispatched over net.tcp.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SMSvcHost 4_0_0_0.Connections Dispatched over net.pipe">
<summary>
 Connections Dispatched over net.pipe: The total number of connections dispatched over net.pipe.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SMSvcHost 4_0_0_0.Connections Accepted over net.tcp">
<summary>
 Connections Accepted over net.tcp: The total number of TCP connections accepted over net.tcp.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SMSvcHost 4_0_0_0.Connections Accepted over net.pipe">
<summary>
 Connections Accepted over net.pipe: The total number of named pipe connections accepted over net.pipe.
</summary>
</member>
<member name="T:Logary.WinPerfCounters.SMSvcHost 4_0_0_0">
<summary>
 SMSvcHost 4.0.0.0: SMSvcHost 4.0.0.0 performance counters

 This performance counter does not have instance based counters
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SMSvcHost 3_0_0_0.Uris Unregistered for net.tcp">
<summary>
 Uris Unregistered for net.tcp: The total number of uris that were succesfully unregistered for net.tcp.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SMSvcHost 3_0_0_0.Uris Unregistered for net.pipe">
<summary>
 Uris Unregistered for net.pipe: The total number of uris that were succesfully unregistered for net.pipe.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SMSvcHost 3_0_0_0.Uris Registered for net.tcp">
<summary>
 Uris Registered for net.tcp: The total number of uris that were succesfully registered for net.tcp.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SMSvcHost 3_0_0_0.Uris Registered for net.pipe">
<summary>
 Uris Registered for net.pipe: The total number of uris that were succesfully registered for net.pipe.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SMSvcHost 3_0_0_0.Registrations Active for net.tcp">
<summary>
 Registrations Active for net.tcp: The number of uri registrations currently active for net.tcp.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SMSvcHost 3_0_0_0.Registrations Active for net.pipe">
<summary>
 Registrations Active for net.pipe: The number of uri registrations currently active for net.pipe.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SMSvcHost 3_0_0_0.Protocol Failures over net.tcp">
<summary>
 Protocol Failures over net.tcp: The total number of failures at the protocol layer of net.tcp.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SMSvcHost 3_0_0_0.Protocol Failures over net.pipe">
<summary>
 Protocol Failures over net.pipe: The total number of failures at the protocol layer of net.pipe.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SMSvcHost 3_0_0_0.Dispatch Failures over net.tcp">
<summary>
 Dispatch Failures over net.tcp: The total number of failures dispatching messages received over net.tcp.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SMSvcHost 3_0_0_0.Dispatch Failures over net.pipe">
<summary>
 Dispatch Failures over net.pipe: The total number of failures dispatching messages received over net.pipe.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SMSvcHost 3_0_0_0.Connections Dispatched over net.tcp">
<summary>
 Connections Dispatched over net.tcp: The total number of connections dispatched over net.tcp.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SMSvcHost 3_0_0_0.Connections Dispatched over net.pipe">
<summary>
 Connections Dispatched over net.pipe: The total number of connections dispatched over net.pipe.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SMSvcHost 3_0_0_0.Connections Accepted over net.tcp">
<summary>
 Connections Accepted over net.tcp: The total number of TCP connections accepted over net.tcp.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.SMSvcHost 3_0_0_0.Connections Accepted over net.pipe">
<summary>
 Connections Accepted over net.pipe: The total number of named pipe connections accepted over net.pipe.
</summary>
</member>
<member name="T:Logary.WinPerfCounters.SMSvcHost 3_0_0_0">
<summary>
 SMSvcHost 3.0.0.0: SMSvcHost 3.0.0.0 performance counters

 This performance counter does not have instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SMB Server Shares.Write Requests/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Write Requests/sec: Write requests processed/sec related to this share.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SMB Server Shares.Write Bytes/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Write Bytes/sec: The rate, in seconds, at which data is being written to this share.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SMB Server Shares.Tree Connect Count(Logary.WinPerfCounter.Instance)">
<summary>
 Tree Connect Count: The current number of tree connects to this share
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SMB Server Shares.Transferred Bytes/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Transferred Bytes/sec: The sum of Sent Bytes/sec and Received Bytes/sec for this share.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SMB Server Shares.Total Resilient Handle Reopen Count(Logary.WinPerfCounter.Instance)">
<summary>
 Total Resilient Handle Reopen Count: The number of resilient opens on this share that have been recovered after a temporary network disconnect since the SMB File Server started.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SMB Server Shares.Total Persistent Handle Reopen Count(Logary.WinPerfCounter.Instance)">
<summary>
 Total Persistent Handle Reopen Count: The number of persistent opens on this share that have been recovered after a temporary network disconnect since the SMB File Server started.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SMB Server Shares.Total File Open Count(Logary.WinPerfCounter.Instance)">
<summary>
 Total File Open Count: The number of files that have been opened by the SMB File Server on behalf of its clients on this share since the server started.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SMB Server Shares.Total Failed Resilient Handle Reopen Count(Logary.WinPerfCounter.Instance)">
<summary>
 Total Failed Resilient Handle Reopen Count: The number of resilient opens on this share that could not be recovered after a temporary network disconnect since the SMB File Server Started.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SMB Server Shares.Total Failed Persistent Handle Reopen Count(Logary.WinPerfCounter.Instance)">
<summary>
 Total Failed Persistent Handle Reopen Count: The number of persistent opens on this share that could not be recovered after a temporary network disconnect since the SMB File Server Started.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SMB Server Shares.Total Failed Durable Handle Reopen Count(Logary.WinPerfCounter.Instance)">
<summary>
 Total Failed Durable Handle Reopen Count: The number of durable opens on this share that could not be recovered after a temporary network disconnect since the SMB File Server Started.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SMB Server Shares.Total Durable Handle Reopen Count(Logary.WinPerfCounter.Instance)">
<summary>
 Total Durable Handle Reopen Count: The number of durable opens on this share that have been recovered after a temporary network disconnect since the SMB File Server started.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SMB Server Shares.Sent Bytes/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Sent Bytes/sec: The rate, in seconds, at which bytes are being sent from the SMB File Server related to this share to its clients. This value includes both data bytes and protocol bytes.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SMB Server Shares.Requests/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Requests/sec: The rate at which requests are being received for this share
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SMB Server Shares.Received Bytes/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Received Bytes/sec: The rate at which bytes are being received for requests related to this share. This value includes application data as well as SMB protocol data (such as packet headers).
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SMB Server Shares.Read Requests/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Read Requests/sec: Read requests processed/sec related to this share.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SMB Server Shares.Read Bytes/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Read Bytes/sec: The rate, in seconds, at which data is being read from this share.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SMB Server Shares.Metadata Requests/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Metadata Requests/sec: The rate, in seconds, at which metadata requests are being sent to this share.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SMB Server Shares.Files Opened/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Files Opened/sec: The rate, in seconds, at which files are being opened for the SMB File Server’s clients on this share.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SMB Server Shares.Data Requests/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Data Requests/sec: The rate, in seconds, at which read or write requests are received for this share.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SMB Server Shares.Data Bytes/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Data Bytes/sec: The rate, in seconds, at which data is being written to or read from this share.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SMB Server Shares.Current Pending Requests(Logary.WinPerfCounter.Instance)">
<summary>
 Current Pending Requests: The number of requests related to this share that are waiting to be processed by the SMB File Server.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SMB Server Shares.Current Open File Count(Logary.WinPerfCounter.Instance)">
<summary>
 Current Open File Count: The number of file handles that are currently open in this share
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SMB Server Shares.Current Durable Open File Count(Logary.WinPerfCounter.Instance)">
<summary>
 Current Durable Open File Count: The number of durable file handles that are currently open on this share
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SMB Server Shares.Current Data Queue Length(Logary.WinPerfCounter.Instance)">
<summary>
 Current Data Queue Length: The current number of read or write requests outstanding on this share.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SMB Server Shares.Avg. sec/Write(Logary.WinPerfCounter.Instance)">
<summary>
 Avg. sec/Write: The average number of seconds that elapse between the time at which a write request to this share is received and the time at which the SMB File Server sends the corresponding response.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SMB Server Shares.Avg. sec/Request(Logary.WinPerfCounter.Instance)">
<summary>
 Avg. sec/Request: The average number of seconds that elapse between the time at which the SMB File Server receives a request for this share and the time at which the SMB File Server sends the corresponding response.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SMB Server Shares.Avg. sec/Read(Logary.WinPerfCounter.Instance)">
<summary>
 Avg. sec/Read: The average number of seconds that elapse between the time at which a read request to this share is received and the time at which the SMB File Server sends the corresponding response.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SMB Server Shares.Avg. sec/Data Request(Logary.WinPerfCounter.Instance)">
<summary>
 Avg. sec/Data Request: The average number of seconds that elapse between the time at which a read or write request to this share is received and the time at which the SMB File Server processes the request.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SMB Server Shares.Avg. Write Queue Length(Logary.WinPerfCounter.Instance)">
<summary>
 Avg. Write Queue Length: The average number of write requests that were queued for this share.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SMB Server Shares.Avg. Read Queue Length(Logary.WinPerfCounter.Instance)">
<summary>
 Avg. Read Queue Length: The average number of read requests that were queued for this share.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SMB Server Shares.Avg. Data Queue Length(Logary.WinPerfCounter.Instance)">
<summary>
 Avg. Data Queue Length: The average number of read and write requests that were queued for this share.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SMB Server Shares.Avg. Data Bytes/Request(Logary.WinPerfCounter.Instance)">
<summary>
 Avg. Data Bytes/Request: The average number of bytes per read or write request.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SMB Server Shares.Avg. Bytes/Write(Logary.WinPerfCounter.Instance)">
<summary>
 Avg. Bytes/Write: The average number of bytes per write request.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SMB Server Shares.Avg. Bytes/Read(Logary.WinPerfCounter.Instance)">
<summary>
 Avg. Bytes/Read: The average number of bytes per read request.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SMB Server Shares.% Resilient Handles(Logary.WinPerfCounter.Instance)">
<summary>
 % Resilient Handles: The percentage of total opens for which clients requested resiliency.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SMB Server Shares.% Persistent Handles(Logary.WinPerfCounter.Instance)">
<summary>
 % Persistent Handles: The percentage of total handles for which clients requested persistency.
</summary>
</member>
<member name="T:Logary.WinPerfCounters.SMB Server Shares">
<summary>
 SMB Server Shares: This counter set displays information about SMB server shares that are shared using SMB protocol version 2 or higher.

 This performance counter does not have non-instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SMB Server Sessions.Write Requests/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Write Requests/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SMB Server Sessions.Write Bytes/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Write Bytes/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SMB Server Sessions.Tree Connect Count(Logary.WinPerfCounter.Instance)">
<summary>
 Tree Connect Count: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SMB Server Sessions.Transferred Bytes/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Transferred Bytes/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SMB Server Sessions.Total Resilient Handle Reopen Count(Logary.WinPerfCounter.Instance)">
<summary>
 Total Resilient Handle Reopen Count: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SMB Server Sessions.Total Persistent Handle Reopen Count(Logary.WinPerfCounter.Instance)">
<summary>
 Total Persistent Handle Reopen Count: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SMB Server Sessions.Total File Open Count(Logary.WinPerfCounter.Instance)">
<summary>
 Total File Open Count: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SMB Server Sessions.Total Failed Resilient Handle Reopen Count(Logary.WinPerfCounter.Instance)">
<summary>
 Total Failed Resilient Handle Reopen Count: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SMB Server Sessions.Total Failed Persistent Handle Reopen Count(Logary.WinPerfCounter.Instance)">
<summary>
 Total Failed Persistent Handle Reopen Count: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SMB Server Sessions.Total Failed Durable Handle Reopen Count(Logary.WinPerfCounter.Instance)">
<summary>
 Total Failed Durable Handle Reopen Count: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SMB Server Sessions.Total Durable Handle Reopen Count(Logary.WinPerfCounter.Instance)">
<summary>
 Total Durable Handle Reopen Count: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SMB Server Sessions.Sent Bytes/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Sent Bytes/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SMB Server Sessions.Requests/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Requests/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SMB Server Sessions.Received Bytes/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Received Bytes/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SMB Server Sessions.Read Requests/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Read Requests/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SMB Server Sessions.Read Bytes/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Read Bytes/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SMB Server Sessions.Metadata Requests/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Metadata Requests/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SMB Server Sessions.Files Opened/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Files Opened/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SMB Server Sessions.Data Requests/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Data Requests/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SMB Server Sessions.Data Bytes/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Data Bytes/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SMB Server Sessions.Current Pending Requests(Logary.WinPerfCounter.Instance)">
<summary>
 Current Pending Requests: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SMB Server Sessions.Current Open File Count(Logary.WinPerfCounter.Instance)">
<summary>
 Current Open File Count: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SMB Server Sessions.Current Durable Open File Count(Logary.WinPerfCounter.Instance)">
<summary>
 Current Durable Open File Count: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SMB Server Sessions.Current Data Queue Length(Logary.WinPerfCounter.Instance)">
<summary>
 Current Data Queue Length: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SMB Server Sessions.Avg. sec/Write(Logary.WinPerfCounter.Instance)">
<summary>
 Avg. sec/Write: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SMB Server Sessions.Avg. sec/Request(Logary.WinPerfCounter.Instance)">
<summary>
 Avg. sec/Request: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SMB Server Sessions.Avg. sec/Read(Logary.WinPerfCounter.Instance)">
<summary>
 Avg. sec/Read: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SMB Server Sessions.Avg. sec/Data Request(Logary.WinPerfCounter.Instance)">
<summary>
 Avg. sec/Data Request: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SMB Server Sessions.Avg. Write Queue Length(Logary.WinPerfCounter.Instance)">
<summary>
 Avg. Write Queue Length: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SMB Server Sessions.Avg. Read Queue Length(Logary.WinPerfCounter.Instance)">
<summary>
 Avg. Read Queue Length: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SMB Server Sessions.Avg. Data Queue Length(Logary.WinPerfCounter.Instance)">
<summary>
 Avg. Data Queue Length: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SMB Server Sessions.Avg. Data Bytes/Request(Logary.WinPerfCounter.Instance)">
<summary>
 Avg. Data Bytes/Request: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SMB Server Sessions.Avg. Bytes/Write(Logary.WinPerfCounter.Instance)">
<summary>
 Avg. Bytes/Write: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SMB Server Sessions.Avg. Bytes/Read(Logary.WinPerfCounter.Instance)">
<summary>
 Avg. Bytes/Read: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SMB Server Sessions.% Resilient Handles(Logary.WinPerfCounter.Instance)">
<summary>
 % Resilient Handles: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.SMB Server Sessions.% Persistent Handles(Logary.WinPerfCounter.Instance)">
<summary>
 % Persistent Handles: -
</summary>
</member>
<member name="T:Logary.WinPerfCounters.SMB Server Sessions">
<summary>
 SMB Server Sessions: This counter set displays information about SMB server sessions using SMB protocol version 2 or higher

 This performance counter does not have instance based counters
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ReportServer:Service.Tasks Queued">
<summary>
 Tasks Queued: Tasks Queued represents the number of tasks that are waiting for a thread to become available for processing. Each request made to the report server corresponds to one or more tasks. This counter represents only the number of tasks that are ready for processing; it does not include the number of tasks that are currently running.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ReportServer:Service.Requests/sec">
<summary>
 Requests/sec: Number of requests executed per second. This represents the current throughput of the application.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ReportServer:Service.Requests Total">
<summary>
 Requests Total: The total number of requests received by the report server service since service start up.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ReportServer:Service.Requests Rejected">
<summary>
 Requests Rejected: Total number of requests not executed because of insufficient server resources. This counter represents the number of requests that return a 503 HTTP status code, indicating that the server is too busy.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ReportServer:Service.Requests Not Authorized">
<summary>
 Requests Not Authorized: Number of requests failing with HTTP 401 error code.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ReportServer:Service.Requests Executing">
<summary>
 Requests Executing: Number of requests currently executing.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ReportServer:Service.Requests Disconnected">
<summary>
 Requests Disconnected: Number of requests that have been disconnected due to a communication failure.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ReportServer:Service.Memory Shrink Notifications/sec">
<summary>
 Memory Shrink Notifications/sec: Number of shrink notifications the server issued in the last second. Indicates how often the server believes it is under memory pressure.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ReportServer:Service.Memory Shrink Amount">
<summary>
 Memory Shrink Amount: Number of bytes the server requested to shrink.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ReportServer:Service.Memory Pressure State">
<summary>
 Memory Pressure State: A number from 1-5 indicating the current memory state of the server. 1:No pressure, 2:Low Pressure,3:Medium Pressure,4:High Pressure,5:Exceeded Pressure.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ReportServer:Service.Logon Successes/sec">
<summary>
 Logon Successes/sec: Rate of successful logons.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ReportServer:Service.Logon Successes Total">
<summary>
 Logon Successes Total: Number of successful logons for RSWindows* authuentication types. Returns 0 for Custom authentication.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ReportServer:Service.Logon Attempts/sec">
<summary>
 Logon Attempts/sec: Rate of logon attempts.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ReportServer:Service.Logon Attempts Total">
<summary>
 Logon Attempts Total: Number of logon attempts for RSWindows* authentication types. Returns 0 for Custom authentication
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ReportServer:Service.Errors/sec">
<summary>
 Errors/sec: Number of errors that occur during the execution of HTTP requests (error codes 400s and 500s) per second.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ReportServer:Service.Errors Total">
<summary>
 Errors Total: The total number of errors that occur during the execution of HTTP requests (error codes 400s and 500s).
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ReportServer:Service.Bytes Sent/sec">
<summary>
 Bytes Sent/sec: Rate of bytes sent per second.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ReportServer:Service.Bytes Sent Total">
<summary>
 Bytes Sent Total: Number of bytes sent.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ReportServer:Service.Bytes Received/sec">
<summary>
 Bytes Received/sec: Rate of bytes received per second.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ReportServer:Service.Bytes Received Total">
<summary>
 Bytes Received Total: Number of bytes received.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ReportServer:Service.Active Connections">
<summary>
 Active Connections: Number of connections active against server.
</summary>
</member>
<member name="T:Logary.WinPerfCounters.ReportServer:Service">
<summary>
 ReportServer:Service: Statistics related to SQL Report Server Service

 This performance counter does not have instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.RemoteFX Network.UDP Sent Rate(Logary.WinPerfCounter.Instance)">
<summary>
 UDP Sent Rate: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.RemoteFX Network.UDP Received Rate(Logary.WinPerfCounter.Instance)">
<summary>
 UDP Received Rate: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.RemoteFX Network.UDP Packets Sent/sec(Logary.WinPerfCounter.Instance)">
<summary>
 UDP Packets Sent/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.RemoteFX Network.UDP Packets Received/sec(Logary.WinPerfCounter.Instance)">
<summary>
 UDP Packets Received/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.RemoteFX Network.Total Sent Rate(Logary.WinPerfCounter.Instance)">
<summary>
 Total Sent Rate: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.RemoteFX Network.Total Received Rate(Logary.WinPerfCounter.Instance)">
<summary>
 Total Received Rate: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.RemoteFX Network.TCP Sent Rate(Logary.WinPerfCounter.Instance)">
<summary>
 TCP Sent Rate: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.RemoteFX Network.TCP Received Rate(Logary.WinPerfCounter.Instance)">
<summary>
 TCP Received Rate: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.RemoteFX Network.Sent Rate P3(Logary.WinPerfCounter.Instance)">
<summary>
 Sent Rate P3: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.RemoteFX Network.Sent Rate P2(Logary.WinPerfCounter.Instance)">
<summary>
 Sent Rate P2: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.RemoteFX Network.Sent Rate P1(Logary.WinPerfCounter.Instance)">
<summary>
 Sent Rate P1: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.RemoteFX Network.Sent Rate P0(Logary.WinPerfCounter.Instance)">
<summary>
 Sent Rate P0: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.RemoteFX Network.Retransmission Rate(Logary.WinPerfCounter.Instance)">
<summary>
 Retransmission Rate: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.RemoteFX Network.Loss Rate(Logary.WinPerfCounter.Instance)">
<summary>
 Loss Rate: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.RemoteFX Network.FEC Rate(Logary.WinPerfCounter.Instance)">
<summary>
 FEC Rate: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.RemoteFX Network.Current UDP RTT(Logary.WinPerfCounter.Instance)">
<summary>
 Current UDP RTT: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.RemoteFX Network.Current UDP Bandwidth(Logary.WinPerfCounter.Instance)">
<summary>
 Current UDP Bandwidth: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.RemoteFX Network.Current TCP RTT(Logary.WinPerfCounter.Instance)">
<summary>
 Current TCP RTT: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.RemoteFX Network.Current TCP Bandwidth(Logary.WinPerfCounter.Instance)">
<summary>
 Current TCP Bandwidth: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.RemoteFX Network.Base UDP RTT(Logary.WinPerfCounter.Instance)">
<summary>
 Base UDP RTT: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.RemoteFX Network.Base TCP RTT(Logary.WinPerfCounter.Instance)">
<summary>
 Base TCP RTT: -
</summary>
</member>
<member name="T:Logary.WinPerfCounters.RemoteFX Network">
<summary>
 RemoteFX Network: This is counter set for the per session RemoteFX network counters

 This performance counter does not have instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.RemoteFX Graphics.Source Frames/Second(Logary.WinPerfCounter.Instance)">
<summary>
 Source Frames/Second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.RemoteFX Graphics.Output Frames/Second(Logary.WinPerfCounter.Instance)">
<summary>
 Output Frames/Second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.RemoteFX Graphics.Input Frames/Second(Logary.WinPerfCounter.Instance)">
<summary>
 Input Frames/Second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.RemoteFX Graphics.Graphics Compression ratio(Logary.WinPerfCounter.Instance)">
<summary>
 Graphics Compression ratio: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.RemoteFX Graphics.Frames Skipped/Second - Insufficient Server Resources(Logary.WinPerfCounter.Instance)">
<summary>
 Frames Skipped/Second - Insufficient Server Resources: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.RemoteFX Graphics.Frames Skipped/Second - Insufficient Network Resources(Logary.WinPerfCounter.Instance)">
<summary>
 Frames Skipped/Second - Insufficient Network Resources: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.RemoteFX Graphics.Frames Skipped/Second - Insufficient Client Resources(Logary.WinPerfCounter.Instance)">
<summary>
 Frames Skipped/Second - Insufficient Client Resources: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.RemoteFX Graphics.Frame Quality(Logary.WinPerfCounter.Instance)">
<summary>
 Frame Quality: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.RemoteFX Graphics.Average Encoding Time(Logary.WinPerfCounter.Instance)">
<summary>
 Average Encoding Time: -
</summary>
</member>
<member name="T:Logary.WinPerfCounters.RemoteFX Graphics">
<summary>
 RemoteFX Graphics: The RemoteFX encoding performance object consists of counters that measure the performance of RemoteFX graphics encoding

 This performance counter does not have instance based counters
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Redirector.Writes Large/sec">
<summary>
 Writes Large/sec: Writes Large/sec is the rate at which writes are made by applications that are over 2 times the server&apos;s negotiated buffer size.  Too many of these could place a strain on server resources.  This counter is incremented once for each write: it counts writes, not packets.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Redirector.Writes Denied/sec">
<summary>
 Writes Denied/sec: Writes Denied/sec is the rate at which the server is unable to accommodate requests for Raw Writes.  When a write is much larger than the server&apos;s negotiated buffer size, the Redirector requests a Raw Write which, if granted, would permit the transfer of the data without lots of protocol overhead on each packet.  To accomplish this the server must lock out other requests, so the request is denied if the server is really busy.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Redirector.Write Packets/sec">
<summary>
 Write Packets/sec: Write Packets/sec is the rate at which writes are being sent to the network.  Each time a single packet is sent with a request to write remote data, this counter is incremented by one.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Redirector.Write Packets Small/sec">
<summary>
 Write Packets Small/sec: Write Packets Small/sec is the rate at which writes are made by applications that are less than one-fourth of the server&apos;s negotiated buffer size.  Too many of these could indicate a waste of buffers on the server.  This counter is incremented once for each write: it counts writes, not packets.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Redirector.Write Operations Random/sec">
<summary>
 Write Operations Random/sec: Write Operations Random/sec is the rate at which, on a file-by-file basis, writes are made that are not sequential.  If a write is made using a particular file handle, and then is followed by another write that is not immediately the next contiguous byte, this counter is incremented by one.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Redirector.Write Bytes Paging/sec">
<summary>
 Write Bytes Paging/sec: Write Bytes Paging/sec is the rate at which the Redirector is attempting to write bytes changed in the pages being used by applications.  The program data changed by modules (such as programs and libraries) that were loaded over the network are &apos;paged out&apos; when no longer needed.  Other output pages come from the file system cache (see Write Bytes Cache/sec).
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Redirector.Write Bytes Non-Paging/sec">
<summary>
 Write Bytes Non-Paging/sec: Write Bytes Non-Paging/sec is the rate at which bytes are written by the Redirector in response to normal file outputs by an application when they are redirected to another computer.  In addition to file requests, this count includes other methods of writing across the network, such as Named Pipes and Transactions.  This counter does not count network protocol information, just application data.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Redirector.Write Bytes Network/sec">
<summary>
 Write Bytes Network/sec: Write Bytes Network/sec is the rate at which applications are writing data across the network. This occurs when the file system cache is bypassed, such as for Named Pipes or Transactions, or when the cache writes the bytes to disk to make room for other data.  Dividing this counter by Bytes Transmitted/sec will indicate the proportion of application data being to the network (see Transmitted Bytes/sec).
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Redirector.Write Bytes Cache/sec">
<summary>
 Write Bytes Cache/sec: Write Bytes Cache/sec is the rate at which applications on your computer are writing to the file system cache by using the Redirector.  The data might not leave your computer immediately; it can be retained in the cache for further modification before being written to the network.  This saves network traffic.  Each write of a byte into the cache is counted here.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Redirector.Server Sessions Hung">
<summary>
 Server Sessions Hung: Server Sessions Hung counts the number of active sessions that are timed out and unable to proceed due to a lack of response from the remote server.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Redirector.Server Sessions">
<summary>
 Server Sessions: Server Sessions counts the total number of security objects the Redirector has managed.  For example, a logon to a server followed by a network access to the same server will establish one connection, but two sessions.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Redirector.Server Reconnects">
<summary>
 Server Reconnects: Server Reconnects counts the number of times your Redirector has had to reconnect to a server in order to complete a new active request.  You can be disconnected by the Server if you remain inactive for too long.  Locally even if all your remote files are closed, the Redirector will keep your connections intact for (nominally) ten minutes.  Such inactive connections are called Dormant Connections.  Reconnecting is expensive in time.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Redirector.Server Disconnects">
<summary>
 Server Disconnects: Server Disconnects counts the number of times a Server has disconnected your Redirector.  See also Server Reconnects.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Redirector.Reads Large/sec">
<summary>
 Reads Large/sec: Reads Large/sec is the rate at which reads over 2 times the server&apos;s negotiated buffer size are made by applications.  Too many of these could place a strain on server resources.  This counter is incremented once for each read. It does not count packets.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Redirector.Reads Denied/sec">
<summary>
 Reads Denied/sec: Reads Denied/sec is the rate at which the server is unable to accommodate requests for Raw Reads.  When a read is much larger than the server&apos;s negotiated buffer size, the Redirector requests a Raw Read which, if granted, would permit the transfer of the data without lots of protocol overhead on each packet.  To accomplish this the server must lock out other requests, so the request is denied if the server is really busy.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Redirector.Read Packets/sec">
<summary>
 Read Packets/sec: Read Packets/sec is the rate at which read packets are being placed on the network.  Each time a single packet is sent with a request to read data remotely, this counter is incremented by one.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Redirector.Read Packets Small/sec">
<summary>
 Read Packets Small/sec: Read Packets Small/sec is the rate at which reads less than one-fourth of the server&apos;s negotiated buffer size are made by applications.  Too many of these could indicate a waste of buffers on the server.  This counter is incremented once for each read. It does not count packets.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Redirector.Read Operations Random/sec">
<summary>
 Read Operations Random/sec: Read Operations Random/sec counts the rate at which, on a file-by-file basis, reads are made that are not sequential.  If a read is made using a particular file handle, and then is followed by another read that is not immediately the contiguous next byte, this counter is incremented by one.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Redirector.Read Bytes Paging/sec">
<summary>
 Read Bytes Paging/sec: Read Bytes Paging/sec is the rate at which the Redirector is attempting to read bytes in response to page faults.  Page faults are caused by loading of modules (such as programs and libraries), by a miss in the Cache (see Read Bytes Cache/sec), or by files directly mapped into the address space of applications (a high-performance feature of Windows NT).
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Redirector.Read Bytes Non-Paging/sec">
<summary>
 Read Bytes Non-Paging/sec: Read Bytes Non-Paging/sec are those bytes read by the Redirector in response to normal file requests by an application when they are redirected to come from another computer.  In addition to file requests, this counter includes other methods of reading across the network such as Named Pipes and Transactions.  This counter does not count network protocol information, just application data.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Redirector.Read Bytes Network/sec">
<summary>
 Read Bytes Network/sec: Read Bytes Network/sec is the rate at which applications are reading data across the network. This occurs when data sought in the file system cache is not found there and must be retrieved from the network.  Dividing this value by Bytes Received/sec indicates the proportion of application data traveling across the network. (see Bytes Received/sec).
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Redirector.Read Bytes Cache/sec">
<summary>
 Read Bytes Cache/sec: Read Bytes Cache/sec is the rate at which applications are accessing the file system cache by using the Redirector.  Some of these data requests are satisfied by retrieving the data from the cache.  Requests that miss the Cache cause a page fault (see Read Bytes Paging/sec).
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Redirector.Packets/sec">
<summary>
 Packets/sec: Packets/sec is the rate the Redirector is processing data packets.  One packet includes (hopefully) many bytes.  We say hopefully here because each packet has protocol overhead.  You can determine the efficiency of this path by dividing the Bytes/sec by this counter to determine the average number of bytes transferred/packet.  You can also divide this counter by Operations/sec to determine the average number of packets per operation, another measure of efficiency.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Redirector.Packets Transmitted/sec">
<summary>
 Packets Transmitted/sec: Packets Transmitted/sec is the rate at which the Redirector is sending packets (also called SMBs or Server Message Blocks).  Network transmissions are divided into packets.  The average number of bytes transmitted in a packet can be obtained by dividing Bytes Transmitted/sec by this counter.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Redirector.Packets Received/sec">
<summary>
 Packets Received/sec: Packets Received/sec is the rate at which the Redirector is receiving packets (also called SMBs or Server Message Blocks).  Network transmissions are divided into packets.  The average number of bytes received in a packet can be obtained by dividing Bytes Received/sec by this counter.  Some packets received might not contain incoming data (for example an acknowledgment to a write made by the Redirector would count as an incoming packet).
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Redirector.Network Errors/sec">
<summary>
 Network Errors/sec: Network Errors/sec is the rate at which serious unexpected errors are occurring. Such errors generally indicate that the Redirector and one or more Servers are having serious communication difficulties. For example an SMB (Server Manager Block) protocol error is a Network Error. An entry is written to the System Event Log and provide details.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Redirector.File Write Operations/sec">
<summary>
 File Write Operations/sec: File Write Operations/sec is the rate at which applications are sending data to the Redirector. Each call to a file system or similar Application Program Interface (API) call counts as one operation.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Redirector.File Read Operations/sec">
<summary>
 File Read Operations/sec: File Read Operations/sec is the rate at which applications are asking the Redirector for data. Each call to a file system or similar Application Program Interface (API) call counts as one operation.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Redirector.File Data Operations/sec">
<summary>
 File Data Operations/sec: File Data Operations/sec is the rate at which the Redirector is processing data operations. One operation should include many bytes, since each operation has overhead. The efficiency of this path can be determined by dividing the Bytes/sec by this counter to obtain the average number of bytes transferred per operation.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Redirector.Current Commands">
<summary>
 Current Commands: Current Commands counter indicates the number of pending commands from the local computer to all destination servers.  If the Current Commands counter shows a high number and the local computer is idle, this may indicate a network-related problem or a redirector bottleneck on the local computer.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Redirector.Connects Windows NT">
<summary>
 Connects Windows NT: Connects Windows NT counts the connections to Windows 2000 or earlier computers.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Redirector.Connects Lan Manager 2.1">
<summary>
 Connects Lan Manager 2.1: Connects LAN Manager 2.1 counts connections to LAN Manager 2.1 servers, including LMX servers.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Redirector.Connects Lan Manager 2.0">
<summary>
 Connects Lan Manager 2.0: Connects LAN Manager 2.0 counts connections to LAN Manager 2.0 servers, including LMX servers.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Redirector.Connects Core">
<summary>
 Connects Core: Connects Core counts the number of connections you have to servers running the original MS-Net SMB protocol, including MS-Net itself and Xenix and VAX&apos;s.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Redirector.Bytes Transmitted/sec">
<summary>
 Bytes Transmitted/sec: Bytes Transmitted/sec is the rate at which bytes are leaving the Redirector to the network.  It includes all application data as well as network protocol information (such as packet headers and the like).
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Redirector.Bytes Total/sec">
<summary>
 Bytes Total/sec: Bytes Total/sec is the rate the Redirector is processing data bytes.  This includes all application and file data in addition to protocol information such as packet headers.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Redirector.Bytes Received/sec">
<summary>
 Bytes Received/sec: Bytes Received/sec is the rate of bytes coming in to the Redirector from the network.  It includes all application data as well as network protocol information (such as packet headers).
</summary>
</member>
<member name="T:Logary.WinPerfCounters.Redirector">
<summary>
 Redirector: The Redirector performance object consists of counter that monitor network connections originating at the local computer.

 This performance counter does not have instance based counters
</summary>
</member>
<member name="P:Logary.WinPerfCounters.RAS Total.Total Errors/Sec">
<summary>
 Total Errors/Sec: The total number of CRC, Timeout, Serial Overrun, Alignment, and Buffer Overrun Errors per second.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.RAS Total.Total Errors">
<summary>
 Total Errors: The total number of CRC, Timeout, Serial Overrun, Alignment, and Buffer Overrun Errors for this connection.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.RAS Total.Total Connections">
<summary>
 Total Connections: The total number of Remote Access connections.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.RAS Total.Timeout Errors">
<summary>
 Timeout Errors: The total number of Timeout Errors for this connection.  Timeout Errors occur when an expected is not received in time.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.RAS Total.Serial Overrun Errors">
<summary>
 Serial Overrun Errors: The total number of Serial Overrun Errors for this connection.  Serial Overrun Errors occur when the hardware cannot handle the rate at which data is received.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.RAS Total.Percent Compression Out">
<summary>
 Percent Compression Out: The compression ratio for bytes being transmitted.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.RAS Total.Percent Compression In">
<summary>
 Percent Compression In: The compression ratio for bytes being received.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.RAS Total.Frames Transmitted/Sec">
<summary>
 Frames Transmitted/Sec: The number of frames transmitted per second.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.RAS Total.Frames Transmitted">
<summary>
 Frames Transmitted: The number of data frames transmitted total for this connection.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.RAS Total.Frames Received/Sec">
<summary>
 Frames Received/Sec: The number of frames received per second.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.RAS Total.Frames Received">
<summary>
 Frames Received: The number of data frames received total for this connection.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.RAS Total.CRC Errors">
<summary>
 CRC Errors: The total number of CRC Errors for this connection.  CRC Errors occur when the frame received contains erroneous data.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.RAS Total.Bytes Transmitted/Sec">
<summary>
 Bytes Transmitted/Sec: The number of bytes transmitted per second.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.RAS Total.Bytes Transmitted">
<summary>
 Bytes Transmitted: The number of bytes transmitted total for this connection.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.RAS Total.Bytes Received/Sec">
<summary>
 Bytes Received/Sec: The number of bytes received per second.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.RAS Total.Bytes Received">
<summary>
 Bytes Received: The number of bytes received total for this connection.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.RAS Total.Buffer Overrun Errors">
<summary>
 Buffer Overrun Errors: The total number of Buffer Overrun Errors for this connection.  Buffer Overrun Errors when the software cannot handle the rate at which data is received.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.RAS Total.Alignment Errors">
<summary>
 Alignment Errors: The total number of Alignment Errors for this connection.  Alignment Errors occur when a byte received is different from the byte expected.
</summary>
</member>
<member name="T:Logary.WinPerfCounters.RAS Total">
<summary>
 RAS Total: The RAS Object Type handles all combined ports of the RAS device on your system.

 This performance counter does not have instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.RAS Port.Total Errors/Sec(Logary.WinPerfCounter.Instance)">
<summary>
 Total Errors/Sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.RAS Port.Total Errors(Logary.WinPerfCounter.Instance)">
<summary>
 Total Errors: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.RAS Port.Timeout Errors(Logary.WinPerfCounter.Instance)">
<summary>
 Timeout Errors: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.RAS Port.Serial Overrun Errors(Logary.WinPerfCounter.Instance)">
<summary>
 Serial Overrun Errors: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.RAS Port.Percent Compression Out(Logary.WinPerfCounter.Instance)">
<summary>
 Percent Compression Out: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.RAS Port.Percent Compression In(Logary.WinPerfCounter.Instance)">
<summary>
 Percent Compression In: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.RAS Port.Frames Transmitted/Sec(Logary.WinPerfCounter.Instance)">
<summary>
 Frames Transmitted/Sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.RAS Port.Frames Transmitted(Logary.WinPerfCounter.Instance)">
<summary>
 Frames Transmitted: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.RAS Port.Frames Received/Sec(Logary.WinPerfCounter.Instance)">
<summary>
 Frames Received/Sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.RAS Port.Frames Received(Logary.WinPerfCounter.Instance)">
<summary>
 Frames Received: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.RAS Port.CRC Errors(Logary.WinPerfCounter.Instance)">
<summary>
 CRC Errors: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.RAS Port.Bytes Transmitted/Sec(Logary.WinPerfCounter.Instance)">
<summary>
 Bytes Transmitted/Sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.RAS Port.Bytes Transmitted(Logary.WinPerfCounter.Instance)">
<summary>
 Bytes Transmitted: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.RAS Port.Bytes Received/Sec(Logary.WinPerfCounter.Instance)">
<summary>
 Bytes Received/Sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.RAS Port.Bytes Received(Logary.WinPerfCounter.Instance)">
<summary>
 Bytes Received: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.RAS Port.Buffer Overrun Errors(Logary.WinPerfCounter.Instance)">
<summary>
 Buffer Overrun Errors: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.RAS Port.Alignment Errors(Logary.WinPerfCounter.Instance)">
<summary>
 Alignment Errors: -
</summary>
</member>
<member name="T:Logary.WinPerfCounters.RAS Port">
<summary>
 RAS Port: The RAS Object Type handles individual ports of the RAS device on your system.

 This performance counter does not have instance based counters
</summary>
</member>
<member name="P:Logary.WinPerfCounters.RAS.Total Clients">
<summary>
 Total Clients: Total number of cumulative remote clients connected to server since service start
</summary>
</member>
<member name="P:Logary.WinPerfCounters.RAS.Max Clients">
<summary>
 Max Clients: Maximum number of remote clients connected to server since service start
</summary>
</member>
<member name="P:Logary.WinPerfCounters.RAS.Failed Authentications">
<summary>
 Failed Authentications: Number of failed authentications since service start
</summary>
</member>
<member name="P:Logary.WinPerfCounters.RAS.Bytes Transmitted By Disconnected Clients">
<summary>
 Bytes Transmitted By Disconnected Clients: Total number of bytes transmitted by all the disconnected clients since service start
</summary>
</member>
<member name="P:Logary.WinPerfCounters.RAS.Bytes Received By Disconnected Clients">
<summary>
 Bytes Received By Disconnected Clients: Total number of bytes received by all the disconnected clients since service start
</summary>
</member>
<member name="T:Logary.WinPerfCounters.RAS">
<summary>
 RAS: VPN counters which keep track of their values since service start

 This performance counter does not have instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Processor Information.Processor State Flags(Logary.WinPerfCounter.Instance)">
<summary>
 Processor State Flags: Processor State Flags
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Processor Information.Processor Frequency(Logary.WinPerfCounter.Instance)">
<summary>
 Processor Frequency: Processor Frequency is the frequency of the current processor in megahertz.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Processor Information.Performance Limit Flags(Logary.WinPerfCounter.Instance)">
<summary>
 Performance Limit Flags: Performance Limit Flags indicate reasons why the processor performance was limited.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Processor Information.Parking Status(Logary.WinPerfCounter.Instance)">
<summary>
 Parking Status: Parking Status represents whether a processor is parked or not.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Processor Information.Interrupts/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Interrupts/sec: Interrupts/sec is the average rate, in incidents per second, at which the processor received and serviced hardware interrupts. It does not include deferred procedure calls (DPCs), which are counted separately. This value is an indirect indicator of the activity of devices that generate interrupts, such as the system clock, the mouse, disk drivers, data communication lines, network interface cards, and other peripheral devices. These devices normally interrupt the processor when they have completed a task or require attention. Normal thread execution is suspended. The system clock typically interrupts the processor every 10 milliseconds, creating a background of interrupt activity. This counter displays the difference between the values observed in the last two samples, divided by the duration of the sample interval.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Processor Information.Idle Break Events/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Idle Break Events/sec: Idle Break Events/sec is the average rate, in incidents per second, at which the processor wakes from idle.  This counter displays the difference between the values observed in the last two samples, divided by the duration of the sample interval.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Processor Information.DPCs Queued/sec(Logary.WinPerfCounter.Instance)">
<summary>
 DPCs Queued/sec: DPCs Queued/sec is the average rate, in incidents per second, at which deferred procedure calls (DPCs) were added to the processor&apos;s DPC queue. DPCs are interrupts that run at a lower priority than standard interrupts.  Each processor has its own DPC queue. This counter measures the rate that DPCs are added to the queue, not the number of DPCs in the queue.  This counter displays the difference between the values observed in the last two samples, divided by the duration of the sample interval.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Processor Information.DPC Rate(Logary.WinPerfCounter.Instance)">
<summary>
 DPC Rate: DPC Rate is the rate at which deferred procedure calls (DPCs) were added to the processors DPC queues between the timer ticks of the processor clock. DPCs are interrupts that run at alower priority than standard interrupts.  Each processor has its own DPC queue. This counter measures the rate that DPCs were added to the queue, not the number of DPCs in the queue. This counter displays the last observed value only; it is not an average.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Processor Information.Clock Interrupts/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Clock Interrupts/sec: Clock Interrupts/sec is the average rate, in incidents per second, at which the processor received and serviced clock tick interrupts. This counter displays the difference between the values observed in the last two samples, divided by the duration of the sample interval.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Processor Information.C3 Transitions/sec(Logary.WinPerfCounter.Instance)">
<summary>
 C3 Transitions/sec: C3 Transitions/sec is the rate that the CPU enters the C3 low-power idle state. The CPU enters the C3 state when it is sufficiently idle and exits this state on any interrupt. This counter displays the difference between the values observed in the last two samples, divided by the duration of the sample interval.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Processor Information.C2 Transitions/sec(Logary.WinPerfCounter.Instance)">
<summary>
 C2 Transitions/sec: C2 Transitions/sec is the rate that the CPU enters the C2 low-power idle state. The CPU enters the C2 state when it is sufficiently idle and exits this state on any interrupt. This counter displays the difference between the values observed in the last two samples, divided by the duration of the sample interval.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Processor Information.C1 Transitions/sec(Logary.WinPerfCounter.Instance)">
<summary>
 C1 Transitions/sec: C1 Transitions/sec is the rate that the CPU enters the C1 low-power idle state. The CPU enters the C1 state when it is sufficiently idle and exits this state on any interrupt. This counter displays the difference between the values observed in the last two samples, divided by the duration of the sample interval.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Processor Information.Average Idle Time(Logary.WinPerfCounter.Instance)">
<summary>
 Average Idle Time: Average Idle Time is the average idle duration in 100ns units observed between the last two samples.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Processor Information.% of Maximum Frequency(Logary.WinPerfCounter.Instance)">
<summary>
 % of Maximum Frequency: % of Maximum Frequency is the percentage of the current processor&apos;s maximum frequency.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Processor Information.% User Time(Logary.WinPerfCounter.Instance)">
<summary>
 % User Time: % User Time is the percentage of elapsed time the processor spends in the user mode. User mode is a restricted processing mode designed for applications, environment subsystems, and integral subsystems.  The alternative, privileged mode, is designed for operating system components and allows direct access to hardware and all memory.  The operating system switches application threads to privileged mode to access operating system services. This counter displays the average busy time as a percentage of the sample time.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Processor Information.% Processor Utility(Logary.WinPerfCounter.Instance)">
<summary>
 % Processor Utility: Processor Utility is the amount of work a processor is completing, as a percentage of the amount of work the processor could complete if it were running at its nominal performance and never idle. On some processors, Processor Utility may exceed 100%.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Processor Information.% Processor Time(Logary.WinPerfCounter.Instance)">
<summary>
 % Processor Time: % Processor Time is the percentage of elapsed time that the processor spends to execute a non-Idle thread. It is calculated by measuring the percentage of time that the processor spends executing the idle thread and then subtracting that value from 100%. (Each processor has an idle thread to which time is accumulated when no other threads are ready to run). This counter is the primary indicator of processor activity, and displays the average percentage of busy time observed during the sample interval. It should be noted that the accounting calculation of whether the processor is idle is performed at an internal sampling interval of the system clock tick. On todays fast processors, % Processor Time can therefore underestimate the processor utilization as the processor may be spending a lot of time servicing threads between the system clock sampling interval. Workload based timer applications are one example  of applications  which are more likely to be measured inaccurately as timers are signaled just after the sample is taken.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Processor Information.% Processor Performance(Logary.WinPerfCounter.Instance)">
<summary>
 % Processor Performance: Processor Performance is the average performance of the processor while it is executing instructions, as a percentage of the nominal performance of the processor. On some processors, Processor Performance may exceed 100%.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Processor Information.% Privileged Utility(Logary.WinPerfCounter.Instance)">
<summary>
 % Privileged Utility: Privileged Utility is the amount of work a processor is completing while executing in privileged mode, as a percentage of the amount of work the processor could complete if it were running at its nominal performance and never idle. On some processors, Privileged Utility may exceed 100%.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Processor Information.% Privileged Time(Logary.WinPerfCounter.Instance)">
<summary>
 % Privileged Time: % Privileged Time is the percentage of elapsed time that the process threads spent executing code in privileged mode.  When a Windows system service in called, the service will often run in privileged mode to gain access to system-private data. Such data is protected from access by threads executing in user mode. Calls to the system can be explicit or implicit, such as page faults or interrupts. Unlike some early operating systems, Windows uses process boundaries for subsystem protection in addition to the traditional protection of user and privileged modes. Some work done by Windows on behalf of the application might appear in other subsystem processes in addition to the privileged time in the process.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Processor Information.% Priority Time(Logary.WinPerfCounter.Instance)">
<summary>
 % Priority Time: % Priority Time is the percentage of elapsed time that the processor spends executing threads that are not low priority. It is calculated by measuring the percentage of time that the processor spends executing low priority threads or the idle thread and then subtracting that value from 100%. (Each processor has an idle thread to which time is accumulated when no other threads are ready to run). This counter displays the average percentage of busy time observed during the sample interval excluding low priority background work. It should be noted that the accounting calculation of whether the processor is idle is performed at an internal sampling interval of the system clock tick. % Priority Time can therefore underestimate the processor utilization as the processor may be spending a lot of time servicing threads between the system clock sampling interval. Workload based timer applications are one example  of applications  which are more likely to be measured inaccurately as timers are signaled just after the sample is taken.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Processor Information.% Performance Limit(Logary.WinPerfCounter.Instance)">
<summary>
 % Performance Limit: % Performance Limit is the performance the processor guarantees it can provide, as a percentage of the nominal performance of the processor. Performance can be limited by Windows power policy, or by the platform as a result of a power budget, overheating, or other hardware issues.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Processor Information.% Interrupt Time(Logary.WinPerfCounter.Instance)">
<summary>
 % Interrupt Time: % Interrupt Time is the time the processor spends receiving and servicing hardware interrupts during sample intervals. This value is an indirect indicator of the activity of devices that generate interrupts, such as the system clock, the mouse, disk drivers, data communication lines, network interface cards and other peripheral devices. These devices normally interrupt the processor when they have completed a task or require attention. Normal thread execution is suspended during interrupts. Most system clocks interrupt the processor every 10 milliseconds, creating a background of interrupt activity. suspends normal thread execution during interrupts. This counter displays the average busy time as a percentage of the sample time.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Processor Information.% Idle Time(Logary.WinPerfCounter.Instance)">
<summary>
 % Idle Time: % Idle Time is the percentage of time the processor is idle during the sample interval
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Processor Information.% DPC Time(Logary.WinPerfCounter.Instance)">
<summary>
 % DPC Time: % DPC Time is the percentage of time that the processor spent receiving and servicing deferred procedure calls (DPCs) during the sample interval. DPCs are interrupts that run at a lower priority than standard interrupts. % DPC Time is a component of % Privileged Time because DPCs are executed in privileged mode. They are counted separately and are not a component of the interrupt counters. This counter displays the average busy time as a percentage of the sample time.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Processor Information.% C3 Time(Logary.WinPerfCounter.Instance)">
<summary>
 % C3 Time: % C3 Time is the percentage of time the processor spends in the C3 low-power idle state. % C3 Time is a subset of the total processor idle time. When the processor is in the C3 low-power idle state it is unable to maintain the coherency of its caches. The C3 power state is a lower power and higher exit latency state than C2. Not all systems support the C3 state.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Processor Information.% C2 Time(Logary.WinPerfCounter.Instance)">
<summary>
 % C2 Time: % C2 Time is the percentage of time the processor spends in the C2 low-power idle state. % C2 Time is a subset of the total processor idle time. C2 low-power idle state enables the processor to maintain the context of the system caches. The C2 power state is a lower power and higher exit latency state than C1. Not all systems support the C2 state.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Processor Information.% C1 Time(Logary.WinPerfCounter.Instance)">
<summary>
 % C1 Time: % C1 Time is the percentage of time the processor spends in the C1 low-power idle state. % C1 Time is a subset of the total processor idle time. C1 low-power idle state enables the processor to maintain its entire context and quickly return to the running state. Not all systems support the % C1 state.
</summary>
</member>
<member name="T:Logary.WinPerfCounters.Processor Information">
<summary>
 Processor Information: The Processor Information performance counter set consists of counters that measure aspects of processor activity. The processor is the part of the computer that performs arithmetic and logical computations, initiates operations on peripherals, and runs the threads of processes. A computer can have multiple processors. On some computers, processors are organized in NUMA nodes that share hardware resources such as physical memory. The Processor Information counter set represents each processor as a pair of numbers, where the first number is the NUMA node number and the second number is the zero-based index of the processor within that NUMA node. If the computer does not use NUMA nodes, the first number is zero.

 This performance counter does not have non-instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Processor.Interrupts/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Interrupts/sec: Interrupts/sec is the average rate, in incidents per second, at which the processor received and serviced hardware interrupts. It does not include deferred procedure calls (DPCs), which are counted separately. This value is an indirect indicator of the activity of devices that generate interrupts, such as the system clock, the mouse, disk drivers, data communication lines, network interface cards, and other peripheral devices. These devices normally interrupt the processor when they have completed a task or require attention. Normal thread execution is suspended. The system clock typically interrupts the processor every 10 milliseconds, creating a background of interrupt activity. This counter displays the difference between the values observed in the last two samples, divided by the duration of the sample interval.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Processor.DPCs Queued/sec(Logary.WinPerfCounter.Instance)">
<summary>
 DPCs Queued/sec: DPCs Queued/sec is the average rate, in incidents per second, at which deferred procedure calls (DPCs) were added to the processor&apos;s DPC queue. DPCs are interrupts that run at a lower priority than standard interrupts.  Each processor has its own DPC queue. This counter measures the rate that DPCs are added to the queue, not the number of DPCs in the queue.  This counter displays the difference between the values observed in the last two samples, divided by the duration of the sample interval.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Processor.DPC Rate(Logary.WinPerfCounter.Instance)">
<summary>
 DPC Rate: DPC Rate is the rate at which deferred procedure calls (DPCs) were added to the processors DPC queues between the timer ticks of the processor clock. DPCs are interrupts that run at alower priority than standard interrupts.  Each processor has its own DPC queue. This counter measures the rate that DPCs were added to the queue, not the number of DPCs in the queue. This counter displays the last observed value only; it is not an average.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Processor.C3 Transitions/sec(Logary.WinPerfCounter.Instance)">
<summary>
 C3 Transitions/sec: C3 Transitions/sec is the rate that the CPU enters the C3 low-power idle state. The CPU enters the C3 state when it is sufficiently idle and exits this state on any interrupt. This counter displays the difference between the values observed in the last two samples, divided by the duration of the sample interval.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Processor.C2 Transitions/sec(Logary.WinPerfCounter.Instance)">
<summary>
 C2 Transitions/sec: C2 Transitions/sec is the rate that the CPU enters the C2 low-power idle state. The CPU enters the C2 state when it is sufficiently idle and exits this state on any interrupt. This counter displays the difference between the values observed in the last two samples, divided by the duration of the sample interval.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Processor.C1 Transitions/sec(Logary.WinPerfCounter.Instance)">
<summary>
 C1 Transitions/sec: C1 Transitions/sec is the rate that the CPU enters the C1 low-power idle state. The CPU enters the C1 state when it is sufficiently idle and exits this state on any interrupt. This counter displays the difference between the values observed in the last two samples, divided by the duration of the sample interval.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Processor.% User Time(Logary.WinPerfCounter.Instance)">
<summary>
 % User Time: % User Time is the percentage of elapsed time the processor spends in the user mode. User mode is a restricted processing mode designed for applications, environment subsystems, and integral subsystems.  The alternative, privileged mode, is designed for operating system components and allows direct access to hardware and all memory.  The operating system switches application threads to privileged mode to access operating system services. This counter displays the average busy time as a percentage of the sample time.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Processor.% Processor Time(Logary.WinPerfCounter.Instance)">
<summary>
 % Processor Time: % Processor Time is the percentage of elapsed time that the processor spends to execute a non-Idle thread. It is calculated by measuring the percentage of time that the processor spends executing the idle thread and then subtracting that value from 100%. (Each processor has an idle thread that consumes cycles when no other threads are ready to run). This counter is the primary indicator of processor activity, and displays the average percentage of busy time observed during the sample interval. It should be noted that the accounting calculation of whether the processor is idle is performed at an internal sampling interval of the system clock (10ms). On todays fast processors, % Processor Time can therefore underestimate the processor utilization as the processor may be spending a lot of time servicing threads between the system clock sampling interval. Workload based timer applications are one example  of applications  which are more likely to be measured inaccurately as timers are signaled just after the sample is taken.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Processor.% Privileged Time(Logary.WinPerfCounter.Instance)">
<summary>
 % Privileged Time: % Privileged Time is the percentage of elapsed time that the process threads spent executing code in privileged mode.  When a Windows system service in called, the service will often run in privileged mode to gain access to system-private data. Such data is protected from access by threads executing in user mode. Calls to the system can be explicit or implicit, such as page faults or interrupts. Unlike some early operating systems, Windows uses process boundaries for subsystem protection in addition to the traditional protection of user and privileged modes. Some work done by Windows on behalf of the application might appear in other subsystem processes in addition to the privileged time in the process.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Processor.% Interrupt Time(Logary.WinPerfCounter.Instance)">
<summary>
 % Interrupt Time: % Interrupt Time is the time the processor spends receiving and servicing hardware interrupts during sample intervals. This value is an indirect indicator of the activity of devices that generate interrupts, such as the system clock, the mouse, disk drivers, data communication lines, network interface cards and other peripheral devices. These devices normally interrupt the processor when they have completed a task or require attention. Normal thread execution is suspended during interrupts. Most system clocks interrupt the processor every 10 milliseconds, creating a background of interrupt activity. suspends normal thread execution during interrupts. This counter displays the average busy time as a percentage of the sample time.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Processor.% Idle Time(Logary.WinPerfCounter.Instance)">
<summary>
 % Idle Time: % Idle Time is the percentage of time the processor is idle during the sample interval
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Processor.% DPC Time(Logary.WinPerfCounter.Instance)">
<summary>
 % DPC Time: % DPC Time is the percentage of time that the processor spent receiving and servicing deferred procedure calls (DPCs) during the sample interval. DPCs are interrupts that run at a lower priority than standard interrupts. % DPC Time is a component of % Privileged Time because DPCs are executed in privileged mode. They are counted separately and are not a component of the interrupt counters. This counter displays the average busy time as a percentage of the sample time.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Processor.% C3 Time(Logary.WinPerfCounter.Instance)">
<summary>
 % C3 Time: % C3 Time is the percentage of time the processor spends in the C3 low-power idle state. % C3 Time is a subset of the total processor idle time. When the processor is in the C3 low-power idle state it is unable to maintain the coherency of its caches. The C3 power state is a lower power and higher exit latency state than C2. Not all systems support the C3 state.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Processor.% C2 Time(Logary.WinPerfCounter.Instance)">
<summary>
 % C2 Time: % C2 Time is the percentage of time the processor spends in the C2 low-power idle state. % C2 Time is a subset of the total processor idle time. C2 low-power idle state enables the processor to maintain the context of the system caches. The C2 power state is a lower power and higher exit latency state than C1. Not all systems support the C2 state.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Processor.% C1 Time(Logary.WinPerfCounter.Instance)">
<summary>
 % C1 Time: % C1 Time is the percentage of time the processor spends in the C1 low-power idle state. % C1 Time is a subset of the total processor idle time. C1 low-power idle state enables the processor to maintain its entire context and quickly return to the running state. Not all systems support the % C1 state.
</summary>
</member>
<member name="T:Logary.WinPerfCounters.Processor">
<summary>
 Processor: The Processor performance object consists of counters that measure aspects of processor activity. The processor is the part of the computer that performs arithmetic and logical computations, initiates operations on peripherals, and runs the threads of processes.  A computer can have multiple processors.  The processor object represents each processor as an instance of the object.

 This performance counter does not have non-instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Process.Working Set Peak(Logary.WinPerfCounter.Instance)">
<summary>
 Working Set Peak: Working Set Peak is the maximum size, in bytes, of the Working Set of this process at any point in time. The Working Set is the set of memory pages touched recently by the threads in the process. If free memory in the computer is above a threshold, pages are left in the Working Set of a process even if they are not in use. When free memory falls below a threshold, pages are trimmed from Working Sets. If they are needed they will then be soft-faulted back into the Working Set before they leave main memory.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Process.Working Set - Private(Logary.WinPerfCounter.Instance)">
<summary>
 Working Set - Private: Working Set - Private displays the size of the working set, in bytes, that is use for this process only and not shared nor sharable by other processes.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Process.Working Set(Logary.WinPerfCounter.Instance)">
<summary>
 Working Set: Working Set is the current size, in bytes, of the Working Set of this process. The Working Set is the set of memory pages touched recently by the threads in the process. If free memory in the computer is above a threshold, pages are left in the Working Set of a process even if they are not in use.  When free memory falls below a threshold, pages are trimmed from Working Sets. If they are needed they will then be soft-faulted back into the Working Set before leaving main memory.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Process.Virtual Bytes Peak(Logary.WinPerfCounter.Instance)">
<summary>
 Virtual Bytes Peak: Virtual Bytes Peak is the maximum size, in bytes, of virtual address space the process has used at any one time. Use of virtual address space does not necessarily imply corresponding use of either disk or main memory pages. However, virtual space is finite, and the process might limit its ability to load libraries.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Process.Virtual Bytes(Logary.WinPerfCounter.Instance)">
<summary>
 Virtual Bytes: Virtual Bytes is the current size, in bytes, of the virtual address space the process is using. Use of virtual address space does not necessarily imply corresponding use of either disk or main memory pages. Virtual space is finite, and the process can limit its ability to load libraries.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Process.Thread Count(Logary.WinPerfCounter.Instance)">
<summary>
 Thread Count: The number of threads currently active in this process. An instruction is the basic unit of execution in a processor, and a thread is the object that executes instructions. Every running process has at least one thread.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Process.Private Bytes(Logary.WinPerfCounter.Instance)">
<summary>
 Private Bytes: Private Bytes is the current size, in bytes, of memory that this process has allocated that cannot be shared with other processes.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Process.Priority Base(Logary.WinPerfCounter.Instance)">
<summary>
 Priority Base: The current base priority of this process. Threads within a process can raise and lower their own base priority relative to the process&apos; base priority.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Process.Pool Paged Bytes(Logary.WinPerfCounter.Instance)">
<summary>
 Pool Paged Bytes: Pool Paged Bytes is the size, in bytes, of the paged pool, an area of the system virtual memory that is used for objects that can be written to disk when they are not being used.  Memory\\Pool Paged Bytes is calculated differently than Process\\Pool Paged Bytes, so it might not equal Process(_Total)\\Pool Paged Bytes. This counter displays the last observed value only; it is not an average.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Process.Pool Nonpaged Bytes(Logary.WinPerfCounter.Instance)">
<summary>
 Pool Nonpaged Bytes: Pool Nonpaged Bytes is the size, in bytes, of the nonpaged pool, an area of the system virtual memory that is used for objects that cannot be written to disk, but must remain in physical memory as long as they are allocated.  Memory\\Pool Nonpaged Bytes is calculated differently than Process\\Pool Nonpaged Bytes, so it might not equal Process(_Total)\\Pool Nonpaged Bytes.  This counter displays the last observed value only; it is not an average.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Process.Page File Bytes Peak(Logary.WinPerfCounter.Instance)">
<summary>
 Page File Bytes Peak: Page File Bytes Peak is the maximum amount of virtual memory, in bytes, that this process has reserved for use in the paging file(s). Paging files are used to store pages of memory used by the process that are not contained in other files.  Paging files are shared by all processes, and the lack of space in paging files can prevent other processes from allocating memory. If there is no paging file, this counter reflects the maximum amount of virtual memory that the process has reserved for use in physical memory.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Process.Page File Bytes(Logary.WinPerfCounter.Instance)">
<summary>
 Page File Bytes: Page File Bytes is the current amount of virtual memory, in bytes, that this process has reserved for use in the paging file(s). Paging files are used to store pages of memory used by the process that are not contained in other files. Paging files are shared by all processes, and the lack of space in paging files can prevent other processes from allocating memory. If there is no paging file, this counter reflects the current amount of virtual memory that the process has reserved for use in physical memory.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Process.Page Faults/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Page Faults/sec: Page Faults/sec is the rate at which page faults by the threads executing in this process are occurring.  A page fault occurs when a thread refers to a virtual memory page that is not in its working set in main memory. This may not cause the page to be fetched from disk if it is on the standby list and hence already in main memory, or if it is in use by another process with whom the page is shared.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Process.IO Write Operations/sec(Logary.WinPerfCounter.Instance)">
<summary>
 IO Write Operations/sec: The rate at which the process is issuing write I/O operations. This counter counts all I/O activity generated by the process to include file, network and device I/Os.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Process.IO Write Bytes/sec(Logary.WinPerfCounter.Instance)">
<summary>
 IO Write Bytes/sec: The rate at which the process is writing bytes to I/O operations. This counter counts all I/O activity generated by the process to include file, network and device I/Os.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Process.IO Read Operations/sec(Logary.WinPerfCounter.Instance)">
<summary>
 IO Read Operations/sec: The rate at which the process is issuing read I/O operations. This counter counts all I/O activity generated by the process to include file, network and device I/Os.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Process.IO Read Bytes/sec(Logary.WinPerfCounter.Instance)">
<summary>
 IO Read Bytes/sec: The rate at which the process is reading bytes from I/O operations. This counter counts all I/O activity generated by the process to include file, network and device I/Os.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Process.IO Other Operations/sec(Logary.WinPerfCounter.Instance)">
<summary>
 IO Other Operations/sec: The rate at which the process is issuing I/O operations that are neither read nor write operations (for example, a control function). This counter counts all I/O activity generated by the process to include file, network and device I/Os.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Process.IO Other Bytes/sec(Logary.WinPerfCounter.Instance)">
<summary>
 IO Other Bytes/sec: The rate at which the process is issuing bytes to I/O operations that do not involve data such as control operations. This counter counts all I/O activity generated by the process to include file, network and device I/Os.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Process.IO Data Operations/sec(Logary.WinPerfCounter.Instance)">
<summary>
 IO Data Operations/sec: The rate at which the process is issuing read and write I/O operations. This counter counts all I/O activity generated by the process to include file, network and device I/Os.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Process.IO Data Bytes/sec(Logary.WinPerfCounter.Instance)">
<summary>
 IO Data Bytes/sec: The rate at which the process is reading and writing bytes in I/O operations. This counter counts all I/O activity generated by the process to include file, network and device I/Os.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Process.ID Process(Logary.WinPerfCounter.Instance)">
<summary>
 ID Process: ID Process is the unique identifier of this process. ID Process numbers are reused, so they only identify a process for the lifetime of that process.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Process.Handle Count(Logary.WinPerfCounter.Instance)">
<summary>
 Handle Count: The total number of handles currently open by this process. This number is equal to the sum of the handles currently open by each thread in this process.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Process.Elapsed Time(Logary.WinPerfCounter.Instance)">
<summary>
 Elapsed Time: The total elapsed time, in seconds, that this process has been running.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Process.Creating Process ID(Logary.WinPerfCounter.Instance)">
<summary>
 Creating Process ID: The Creating Process ID value is the Process ID of the process that created the process. The creating process may have terminated, so this value may no longer identify a running process.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Process.% User Time(Logary.WinPerfCounter.Instance)">
<summary>
 % User Time: % User Time is the percentage of elapsed time that the process threads spent executing code in user mode. Applications, environment subsystems, and integral subsystems execute in user mode. Code executing in user mode cannot damage the integrity of the Windows executive, kernel, and device drivers. Unlike some early operating systems, Windows uses process boundaries for subsystem protection in addition to the traditional protection of user and privileged modes. Some work done by Windows on behalf of the application might appear in other subsystem processes in addition to the privileged time in the process.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Process.% Processor Time(Logary.WinPerfCounter.Instance)">
<summary>
 % Processor Time: % Processor Time is the percentage of elapsed time that all of process threads used the processor to execution instructions. An instruction is the basic unit of execution in a computer, a thread is the object that executes instructions, and a process is the object created when a program is run. Code executed to handle some hardware interrupts and trap conditions are included in this count.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Process.% Privileged Time(Logary.WinPerfCounter.Instance)">
<summary>
 % Privileged Time: % Privileged Time is the percentage of elapsed time that the process threads spent executing code in privileged mode. When a Windows system service is called, the service will often run in privileged mode to gain access to system-private data. Such data is protected from access by threads executing in user mode. Calls to the system can be explicit or implicit, such as page faults or interrupts. Unlike some early operating systems, Windows uses process boundaries for subsystem protection in addition to the traditional protection of user and privileged modes. Some work done by Windows on behalf of the application might appear in other subsystem processes in addition to the privileged time in the process.
</summary>
</member>
<member name="T:Logary.WinPerfCounters.Process">
<summary>
 Process: The Process performance object consists of counters that monitor running application program and system processes.  All the threads in a process share the same address space and have access to the same data.

 This performance counter does not have non-instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Print Queue.Total Pages Printed(Logary.WinPerfCounter.Instance)">
<summary>
 Total Pages Printed: Total number of pages printed through GDI on a print queue since the last restart.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Print Queue.Total Jobs Printed(Logary.WinPerfCounter.Instance)">
<summary>
 Total Jobs Printed: Total number of jobs printed on a print queue since the last restart.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Print Queue.References(Logary.WinPerfCounter.Instance)">
<summary>
 References: Current number of references (open handles) to this printer.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Print Queue.Out of Paper Errors(Logary.WinPerfCounter.Instance)">
<summary>
 Out of Paper Errors: Total number of out of paper errors in a print queue since the last restart.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Print Queue.Not Ready Errors(Logary.WinPerfCounter.Instance)">
<summary>
 Not Ready Errors: Total number of printer not ready errors in a print queue since the last restart.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Print Queue.Max References(Logary.WinPerfCounter.Instance)">
<summary>
 Max References: Peak number of references (open handles) to this printer.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Print Queue.Max Jobs Spooling(Logary.WinPerfCounter.Instance)">
<summary>
 Max Jobs Spooling: Maximum number of spooling jobs in a print queue since last restart.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Print Queue.Jobs Spooling(Logary.WinPerfCounter.Instance)">
<summary>
 Jobs Spooling: Current number of spooling jobs in a print queue.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Print Queue.Jobs(Logary.WinPerfCounter.Instance)">
<summary>
 Jobs: Current number of jobs in a print queue.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Print Queue.Job Errors(Logary.WinPerfCounter.Instance)">
<summary>
 Job Errors: Total number of job errors in a print queue since last restart.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Print Queue.Enumerate Network Printer Calls(Logary.WinPerfCounter.Instance)">
<summary>
 Enumerate Network Printer Calls: Total number of calls from browse clients to this print server to request network browse lists since last restart.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Print Queue.Bytes Printed/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Bytes Printed/sec: Number of bytes per second printed on a print queue.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Print Queue.Add Network Printer Calls(Logary.WinPerfCounter.Instance)">
<summary>
 Add Network Printer Calls: Total number of calls from other print servers to add shared network printers to this server since last restart.
</summary>
</member>
<member name="T:Logary.WinPerfCounters.Print Queue">
<summary>
 Print Queue: Displays performance statistics about a Print Queue.

 This performance counter does not have non-instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.PowerShell Workflow.PowerShell Remoting: # of requests being serviced(Logary.WinPerfCounter.Instance)">
<summary>
 PowerShell Remoting: # of requests being serviced: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.PowerShell Workflow.PowerShell Remoting: # of pending requests in queue(Logary.WinPerfCounter.Instance)">
<summary>
 PowerShell Remoting: # of pending requests in queue: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.PowerShell Workflow.PowerShell Remoting: # of forced to wait requests in queue(Logary.WinPerfCounter.Instance)">
<summary>
 PowerShell Remoting: # of forced to wait requests in queue: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.PowerShell Workflow.PowerShell Remoting: # of disposed connections(Logary.WinPerfCounter.Instance)">
<summary>
 PowerShell Remoting: # of disposed connections: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.PowerShell Workflow.PowerShell Remoting: # of created connections(Logary.WinPerfCounter.Instance)">
<summary>
 PowerShell Remoting: # of created connections: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.PowerShell Workflow.PowerShell Remoting: # of connections closed-reopened(Logary.WinPerfCounter.Instance)">
<summary>
 PowerShell Remoting: # of connections closed-reopened: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.PowerShell Workflow.Activity Host Manager: host processes pool size(Logary.WinPerfCounter.Instance)">
<summary>
 Activity Host Manager: host processes pool size: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.PowerShell Workflow.Activity Host Manager: # of pending requests in queue(Logary.WinPerfCounter.Instance)">
<summary>
 Activity Host Manager: # of pending requests in queue: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.PowerShell Workflow.Activity Host Manager: # of incoming requests/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Activity Host Manager: # of incoming requests/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.PowerShell Workflow.Activity Host Manager: # of failed requests/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Activity Host Manager: # of failed requests/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.PowerShell Workflow.Activity Host Manager: # of failed requests in queue(Logary.WinPerfCounter.Instance)">
<summary>
 Activity Host Manager: # of failed requests in queue: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.PowerShell Workflow.Activity Host Manager: # of disposed host processes(Logary.WinPerfCounter.Instance)">
<summary>
 Activity Host Manager: # of disposed host processes: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.PowerShell Workflow.Activity Host Manager: # of created host processes(Logary.WinPerfCounter.Instance)">
<summary>
 Activity Host Manager: # of created host processes: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.PowerShell Workflow.Activity Host Manager: # of busy host processes(Logary.WinPerfCounter.Instance)">
<summary>
 Activity Host Manager: # of busy host processes: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.PowerShell Workflow.# of waiting workflow jobs(Logary.WinPerfCounter.Instance)">
<summary>
 # of waiting workflow jobs: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.PowerShell Workflow.# of terminated workflow jobs / sec(Logary.WinPerfCounter.Instance)">
<summary>
 # of terminated workflow jobs / sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.PowerShell Workflow.# of terminated workflow jobs(Logary.WinPerfCounter.Instance)">
<summary>
 # of terminated workflow jobs: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.PowerShell Workflow.# of suspended workflow jobs/sec(Logary.WinPerfCounter.Instance)">
<summary>
 # of suspended workflow jobs/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.PowerShell Workflow.# of suspended workflow jobs(Logary.WinPerfCounter.Instance)">
<summary>
 # of suspended workflow jobs: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.PowerShell Workflow.# of succeeded workflow jobs/sec(Logary.WinPerfCounter.Instance)">
<summary>
 # of succeeded workflow jobs/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.PowerShell Workflow.# of succeeded workflow jobs(Logary.WinPerfCounter.Instance)">
<summary>
 # of succeeded workflow jobs: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.PowerShell Workflow.# of stopped workflow jobs / sec(Logary.WinPerfCounter.Instance)">
<summary>
 # of stopped workflow jobs / sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.PowerShell Workflow.# of stopped workflow jobs(Logary.WinPerfCounter.Instance)">
<summary>
 # of stopped workflow jobs: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.PowerShell Workflow.# of running workflow jobs / sec(Logary.WinPerfCounter.Instance)">
<summary>
 # of running workflow jobs / sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.PowerShell Workflow.# of running workflow jobs(Logary.WinPerfCounter.Instance)">
<summary>
 # of running workflow jobs: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.PowerShell Workflow.# of resumed workflow jobs/sec(Logary.WinPerfCounter.Instance)">
<summary>
 # of resumed workflow jobs/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.PowerShell Workflow.# of resumed workflow jobs(Logary.WinPerfCounter.Instance)">
<summary>
 # of resumed workflow jobs: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.PowerShell Workflow.# of failed workflow jobs/sec(Logary.WinPerfCounter.Instance)">
<summary>
 # of failed workflow jobs/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.PowerShell Workflow.# of failed workflow jobs(Logary.WinPerfCounter.Instance)">
<summary>
 # of failed workflow jobs: -
</summary>
</member>
<member name="T:Logary.WinPerfCounters.PowerShell Workflow">
<summary>
 PowerShell Workflow: Displays performance counters for PowerShell Workflow engine.

 This performance counter does not have instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Power Meter.Power Budget(Logary.WinPerfCounter.Instance)">
<summary>
 Power Budget: This counter displays the power budget for this device or subcomponent in milliwatts.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Power Meter.Power(Logary.WinPerfCounter.Instance)">
<summary>
 Power: This counter displays power consumption in milliwatts.
</summary>
</member>
<member name="T:Logary.WinPerfCounters.Power Meter">
<summary>
 Power Meter: This counter set displays power metering and budgeting information

 This performance counter does not have non-instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.PhysicalDisk.Split IO/Sec(Logary.WinPerfCounter.Instance)">
<summary>
 Split IO/Sec: Split IO/Sec reports the rate at which I/Os to the disk were split into multiple I/Os. A split I/O may result from requesting data of a size that is too large to fit into a single I/O or that the disk is fragmented.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.PhysicalDisk.Disk Writes/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Disk Writes/sec: Disk Writes/sec is the rate of write operations on the disk.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.PhysicalDisk.Disk Write Bytes/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Disk Write Bytes/sec: Disk Write Bytes/sec is rate at which bytes are transferred to the disk during write operations.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.PhysicalDisk.Disk Transfers/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Disk Transfers/sec: Disk Transfers/sec is the rate of read and write operations on the disk.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.PhysicalDisk.Disk Reads/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Disk Reads/sec: Disk Reads/sec is the rate of read operations on the disk.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.PhysicalDisk.Disk Read Bytes/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Disk Read Bytes/sec: Disk Read Bytes/sec is the rate at which bytes are transferred from the disk during read operations.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.PhysicalDisk.Disk Bytes/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Disk Bytes/sec: Disk Bytes/sec is the rate bytes are transferred to or from the disk during write or read operations.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.PhysicalDisk.Current Disk Queue Length(Logary.WinPerfCounter.Instance)">
<summary>
 Current Disk Queue Length: Current Disk Queue Length is the number of requests outstanding on the disk at the time the performance data is collected. It also includes requests in service at the time of the collection. This is a instantaneous snapshot, not an average over the time interval. Multi-spindle disk devices can have multiple requests that are active at one time, but other concurrent requests are awaiting service. This counter might reflect a transitory high or low queue length, but if there is a sustained load on the disk drive, it is likely that this will be consistently high. Requests experience delays proportional to the length of this queue minus the number of spindles on the disks. For good performance, this difference should average less than two.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.PhysicalDisk.Avg. Disk sec/Write(Logary.WinPerfCounter.Instance)">
<summary>
 Avg. Disk sec/Write: Avg. Disk sec/Write is the average time, in seconds, of a write of data to the disk.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.PhysicalDisk.Avg. Disk sec/Transfer(Logary.WinPerfCounter.Instance)">
<summary>
 Avg. Disk sec/Transfer: Avg. Disk sec/Transfer is the time, in seconds, of the average disk transfer.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.PhysicalDisk.Avg. Disk sec/Read(Logary.WinPerfCounter.Instance)">
<summary>
 Avg. Disk sec/Read: Avg. Disk sec/Read is the average time, in seconds, of a read of data from the disk.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.PhysicalDisk.Avg. Disk Write Queue Length(Logary.WinPerfCounter.Instance)">
<summary>
 Avg. Disk Write Queue Length: Avg. Disk Write Queue Length is the average number of write requests that were queued for the selected disk during the sample interval.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.PhysicalDisk.Avg. Disk Read Queue Length(Logary.WinPerfCounter.Instance)">
<summary>
 Avg. Disk Read Queue Length: Avg. Disk Read Queue Length is the average number of read requests that were queued for the selected disk during the sample interval.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.PhysicalDisk.Avg. Disk Queue Length(Logary.WinPerfCounter.Instance)">
<summary>
 Avg. Disk Queue Length: Avg. Disk Queue Length is the average number of both read and write requests that were queued for the selected disk during the sample interval.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.PhysicalDisk.Avg. Disk Bytes/Write(Logary.WinPerfCounter.Instance)">
<summary>
 Avg. Disk Bytes/Write: Avg. Disk Bytes/Write is the average number of bytes transferred to the disk during write operations.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.PhysicalDisk.Avg. Disk Bytes/Transfer(Logary.WinPerfCounter.Instance)">
<summary>
 Avg. Disk Bytes/Transfer: Avg. Disk Bytes/Transfer is the average number of bytes transferred to or from the disk during write or read operations.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.PhysicalDisk.Avg. Disk Bytes/Read(Logary.WinPerfCounter.Instance)">
<summary>
 Avg. Disk Bytes/Read: Avg. Disk Bytes/Read is the average number of bytes transferred from the disk during read operations.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.PhysicalDisk.% Idle Time(Logary.WinPerfCounter.Instance)">
<summary>
 % Idle Time: % Idle Time reports the percentage of time during the sample interval that the disk was idle.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.PhysicalDisk.% Disk Write Time(Logary.WinPerfCounter.Instance)">
<summary>
 % Disk Write Time: % Disk Write Time is the percentage of elapsed time that the selected disk drive was busy servicing write requests.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.PhysicalDisk.% Disk Time(Logary.WinPerfCounter.Instance)">
<summary>
 % Disk Time: % Disk Time is the percentage of elapsed time that the selected disk drive was busy servicing read or write requests.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.PhysicalDisk.% Disk Read Time(Logary.WinPerfCounter.Instance)">
<summary>
 % Disk Read Time: % Disk Read Time is the percentage of elapsed time that the selected disk drive was busy servicing read requests.
</summary>
</member>
<member name="T:Logary.WinPerfCounters.PhysicalDisk">
<summary>
 PhysicalDisk: The Physical Disk performance object consists of counters that monitor hard or fixed disk drive on a computer.  Disks are used to store file, program, and paging data and are read to retrieve these items, and written to record changes to them.  The values of physical disk counters are sums of the values of the logical disks (or partitions) into which they are divided.

 This performance counter does not have non-instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Physical Network Interface Card Activity.Low Power Transitions (Lifetime)(Logary.WinPerfCounter.Instance)">
<summary>
 Low Power Transitions (Lifetime): Low Power Transitions (Lifetime) measures the number of successful low-power transitions over the lifetime of the network interface card.  The counter includes only transitions from the active high-power state to a low-power state.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Physical Network Interface Card Activity.Device Power State(Logary.WinPerfCounter.Instance)">
<summary>
 Device Power State: Device Power State is the current power state of the network interface card.  Power state 0 is the active operating state, while power state 3 is the device&apos;s lowest power state.  Intermediate states 1 and 2 are device-specific sleep states.  For example, a USB NIC uses power state 2 to allow remote-wakeup.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Physical Network Interface Card Activity.% Time Suspended (Lifetime)(Logary.WinPerfCounter.Instance)">
<summary>
 % Time Suspended (Lifetime): % Time Suspended (Lifetime) measures the amount of time that the network interface card is in a low-power suspended state.  The percentage is calculated over the entire lifetime of the network card.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Physical Network Interface Card Activity.% Time Suspended (Instantaneous)(Logary.WinPerfCounter.Instance)">
<summary>
 % Time Suspended (Instantaneous): % Time Suspended (Instantaneous) measures the amount of time that the network interface card is in a low-power suspended state.  The percentage is calculated over the duration of the sample interval.
</summary>
</member>
<member name="T:Logary.WinPerfCounters.Physical Network Interface Card Activity">
<summary>
 Physical Network Interface Card Activity: The Physical Network Interface Card Activity counter set measures events on a physical network card.

 This performance counter does not have non-instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Per Processor Network Interface Card Activity.Tcp Offload Send bytes/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Tcp Offload Send bytes/sec: Tcp Offload Send bytes/sec is the average rate, in bytes per second, at which data was delivered to a network interface using the TCP offload send request call.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Per Processor Network Interface Card Activity.Tcp Offload Send Request Calls/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Tcp Offload Send Request Calls/sec: Tcp Offload Send Request Calls/sec is the average rate, in incidents per second, at which the TCP/IP protocol requested a TCP offload transmission on a network interface.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Per Processor Network Interface Card Activity.Tcp Offload Receive bytes/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Tcp Offload Receive bytes/sec: Tcp Offload Receive bytes/sec is the average rate, in bytes per second, at which data was delivered by a network interface using the TCP offload receive indication call.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Per Processor Network Interface Card Activity.Tcp Offload Receive Indications/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Tcp Offload Receive Indications/sec: Tcp Offload Receive Indications/sec is the average rate, in incidents per second, at which NDIS received a TCP offload receive indication call from a network interface.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Per Processor Network Interface Card Activity.Sent Packets/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Sent Packets/sec: Sent Packets/sec is the average rate, in packets per second, at which the stack requested a transmit on an interface.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Per Processor Network Interface Card Activity.Sent Complete Packets/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Sent Complete Packets/sec: Sent Complete Packets/sec is the average rate, in packets per second, at which NDIS received a transmit-complete notification from an interface.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Per Processor Network Interface Card Activity.Send Request Calls/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Send Request Calls/sec: Send Request Calls/sec is the average rate, in incidents per second, at which the stack requested a transmit on an interface.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Per Processor Network Interface Card Activity.Send Complete Calls/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Send Complete Calls/sec: Send Complete Calls/sec is the average rate, in incidents per second, at which NDIS received a transmit-complete notification from an interface.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Per Processor Network Interface Card Activity.Returned Packets/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Returned Packets/sec: Returned Packets/sec is the average rate, in packets per second, at which the stack returned received packets to an interface.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Per Processor Network Interface Card Activity.Return Packet Calls/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Return Packet Calls/sec: Return Packet Calls/sec is the average rate, in incidents per second, at which the stack returned received packets to an interface.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Per Processor Network Interface Card Activity.Received Packets/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Received Packets/sec: Received Packets/sec is the average rate, in packets per second, at which NDIS received packets from an interface.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Per Processor Network Interface Card Activity.Receive Indications/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Receive Indications/sec: Receive Indications/sec is the average rate, in incidents per second, at which NDIS received a receive indication call from an interface.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Per Processor Network Interface Card Activity.RSS Indirection Table Change Calls/sec(Logary.WinPerfCounter.Instance)">
<summary>
 RSS Indirection Table Change Calls/sec: RSS Indirection Table Change Calls/sec is the average rate, in incidents per second, at which the stack submitted a request to change the RSS indirection table of an interface.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Per Processor Network Interface Card Activity.Packets Coalesced/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Packets Coalesced/sec: Packets Coalesced/sec is the average rate, in packets per second, at which NDIS received packets that were subjected to coalescing by a network interface before interrupting the host CPU.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Per Processor Network Interface Card Activity.Low Resource Received Packets/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Low Resource Received Packets/sec: Low Resource Received Packets/sec is the average rate, in packets per second, at which NDIS received packets from an interface with low receive resources.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Per Processor Network Interface Card Activity.Low Resource Receive Indications/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Low Resource Receive Indications/sec: Low Resource Receive Indications/sec is the average rate, in incidents per second, at which NDIS received a receive indication call from an interface with low receive resources.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Per Processor Network Interface Card Activity.Interrupts/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Interrupts/sec: Interrupts/sec is the average rate, in incidents per second, at which NDIS received and serviced hardware interrupts for an interface.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Per Processor Network Interface Card Activity.DPCs Queued/sec(Logary.WinPerfCounter.Instance)">
<summary>
 DPCs Queued/sec: DPCs Queued/sec is the average rate, in incidents per second, at which NDIS queued a Deferred Procedure Call (DPC) for an interface.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Per Processor Network Interface Card Activity.DPCs Queued on Other CPUs/sec(Logary.WinPerfCounter.Instance)">
<summary>
 DPCs Queued on Other CPUs/sec: DPCs Queued on Other CPUs/sec is the average rate, in incidents per second, at which the miniport queued a DPC on one CPU from a different CPU.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Per Processor Network Interface Card Activity.DPCs Deferred/sec(Logary.WinPerfCounter.Instance)">
<summary>
 DPCs Deferred/sec: DPCs Deferred/sec is the average rate, in incidents per second, at which DPCs are deferred from executing immediately to avoid starving usermode threads.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Per Processor Network Interface Card Activity.Build Scatter Gather List Calls/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Build Scatter Gather List Calls/sec: Build Scatter Gather List Calls/sec is the average rate, in incidents per second, at which NDIS received a request from an interface to build a scatter gather DMA list.
</summary>
</member>
<member name="T:Logary.WinPerfCounters.Per Processor Network Interface Card Activity">
<summary>
 Per Processor Network Interface Card Activity: The Per Processor Network Interface Card Activity counter set measures network activity of a network interface card per processor.

 This performance counter does not have non-instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Per Processor Network Activity Cycles.Stack Send Complete Cycles/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Stack Send Complete Cycles/sec: Stack Send Complete Cycles/sec is the average rate, in cycles per second, at which the stack processed transmit-complete notifications from an interface.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Per Processor Network Activity Cycles.Stack Receive Indication Cycles/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Stack Receive Indication Cycles/sec: Stack Receive Indication Cycles/sec is the average rate, in cycles per second, at which the stack processed a receive indication call from an interface.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Per Processor Network Activity Cycles.NDIS Send Cycles/sec(Logary.WinPerfCounter.Instance)">
<summary>
 NDIS Send Cycles/sec: NDIS Send Cycles/sec is the average rate, in cycles per second, at which NDIS processed transmit requests from the stack for an interface.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Per Processor Network Activity Cycles.NDIS Send Complete Cycles/sec(Logary.WinPerfCounter.Instance)">
<summary>
 NDIS Send Complete Cycles/sec: NDIS Send Complete Cycles/sec is the average rate, in cycles per second, at which NDIS processed transmit-complete notifications from an interface.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Per Processor Network Activity Cycles.NDIS Return Packet Cycles/sec(Logary.WinPerfCounter.Instance)">
<summary>
 NDIS Return Packet Cycles/sec: NDIS Return Packet Cycles/sec is the average rate, in cycles per second, at which NDIS processed returning received packets to an interface.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Per Processor Network Activity Cycles.NDIS Receive Indication Cycles/sec(Logary.WinPerfCounter.Instance)">
<summary>
 NDIS Receive Indication Cycles/sec: NDIS Receive Indication Cycles/sec is the average rate, in cycles per second, at which NDIS processed a receive indication call from an interface.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Per Processor Network Activity Cycles.Miniport Send Cycles/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Miniport Send Cycles/sec: Miniport Send Cycles/sec is the average rate, in cycles per second, at which an interface processed transmitting packets.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Per Processor Network Activity Cycles.Miniport Return Packet Cycles/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Miniport Return Packet Cycles/sec: Miniport Return Packet Cycles/sec is the average rate, in cycles per second, at which an interface processed returning received packets.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Per Processor Network Activity Cycles.Miniport RSS Indirection Table Change Cycles(Logary.WinPerfCounter.Instance)">
<summary>
 Miniport RSS Indirection Table Change Cycles: Miniport RSS Indirection Table Change Cycles is the average rate, in cycles per second, at which an interface processed changing the RSS indirection table.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Per Processor Network Activity Cycles.Interrupt DPC Latency Cycles/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Interrupt DPC Latency Cycles/sec: Interrupt DPC Latency Cycles/sec is the amount of time, in cycles per second, between an interrupt and its DPC.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Per Processor Network Activity Cycles.Interrupt DPC Cycles/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Interrupt DPC Cycles/sec: Interrupt DPC Cycles/sec is the average rate, in cycles per second, at which NDIS processed a Deferred Procedure Call (DPC) for an interface.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Per Processor Network Activity Cycles.Interrupt Cycles/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Interrupt Cycles/sec: Interrupt Cycles/sec is the average rate, in cycles per second, at which NDIS processed hardware interrupts for an interface.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Per Processor Network Activity Cycles.Build Scatter Gather Cycles/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Build Scatter Gather Cycles/sec: Build Scatter Gather Cycles/sec is the average rate, in cycles per second, at which NDIS processed building Scatter Gather DMA lists for an interface.
</summary>
</member>
<member name="T:Logary.WinPerfCounters.Per Processor Network Activity Cycles">
<summary>
 Per Processor Network Activity Cycles: The Per Processor Network Activity Cycles counter set measures processor cycles due to network activity of an interface on each processor.

 This performance counter does not have non-instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Peer Name Resolution Protocol.Unknown message type received(Logary.WinPerfCounter.Instance)">
<summary>
 Unknown message type received: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Peer Name Resolution Protocol.Stale cache entry(Logary.WinPerfCounter.Instance)">
<summary>
 Stale cache entry: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Peer Name Resolution Protocol.Solicit sent per second(Logary.WinPerfCounter.Instance)">
<summary>
 Solicit sent per second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Peer Name Resolution Protocol.Solicit received per second(Logary.WinPerfCounter.Instance)">
<summary>
 Solicit received per second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Peer Name Resolution Protocol.Send failures(Logary.WinPerfCounter.Instance)">
<summary>
 Send failures: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Peer Name Resolution Protocol.Resolve(Logary.WinPerfCounter.Instance)">
<summary>
 Resolve: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Peer Name Resolution Protocol.Request sent per second(Logary.WinPerfCounter.Instance)">
<summary>
 Request sent per second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Peer Name Resolution Protocol.Request received per second(Logary.WinPerfCounter.Instance)">
<summary>
 Request received per second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Peer Name Resolution Protocol.Registration(Logary.WinPerfCounter.Instance)">
<summary>
 Registration: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Peer Name Resolution Protocol.Receive failures(Logary.WinPerfCounter.Instance)">
<summary>
 Receive failures: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Peer Name Resolution Protocol.Lookup sent per second(Logary.WinPerfCounter.Instance)">
<summary>
 Lookup sent per second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Peer Name Resolution Protocol.Lookup received per second(Logary.WinPerfCounter.Instance)">
<summary>
 Lookup received per second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Peer Name Resolution Protocol.Inquire sent per second(Logary.WinPerfCounter.Instance)">
<summary>
 Inquire sent per second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Peer Name Resolution Protocol.Inquire received per second(Logary.WinPerfCounter.Instance)">
<summary>
 Inquire received per second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Peer Name Resolution Protocol.Flood sent per second(Logary.WinPerfCounter.Instance)">
<summary>
 Flood sent per second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Peer Name Resolution Protocol.Flood received per second(Logary.WinPerfCounter.Instance)">
<summary>
 Flood received per second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Peer Name Resolution Protocol.Estimated cloud size(Logary.WinPerfCounter.Instance)">
<summary>
 Estimated cloud size: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Peer Name Resolution Protocol.Cache Entry(Logary.WinPerfCounter.Instance)">
<summary>
 Cache Entry: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Peer Name Resolution Protocol.Average bytes sent(Logary.WinPerfCounter.Instance)">
<summary>
 Average bytes sent: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Peer Name Resolution Protocol.Average bytes received(Logary.WinPerfCounter.Instance)">
<summary>
 Average bytes received: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Peer Name Resolution Protocol.Authority sent per second(Logary.WinPerfCounter.Instance)">
<summary>
 Authority sent per second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Peer Name Resolution Protocol.Authority received per second(Logary.WinPerfCounter.Instance)">
<summary>
 Authority received per second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Peer Name Resolution Protocol.Advertise sent per second(Logary.WinPerfCounter.Instance)">
<summary>
 Advertise sent per second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Peer Name Resolution Protocol.Advertise received per second(Logary.WinPerfCounter.Instance)">
<summary>
 Advertise received per second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Peer Name Resolution Protocol.Ack sent per second(Logary.WinPerfCounter.Instance)">
<summary>
 Ack sent per second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Peer Name Resolution Protocol.Ack received per second(Logary.WinPerfCounter.Instance)">
<summary>
 Ack received per second: -
</summary>
</member>
<member name="T:Logary.WinPerfCounters.Peer Name Resolution Protocol">
<summary>
 Peer Name Resolution Protocol: The Peer Name Resolution Protocol (PNRP) performance object consists of counters that monitor each of available PNRP clouds.  These counters monitor the local PNRP cache and measure the rates at which PNRP protocol messages are sent and received.

 This performance counter does not have instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Paging File.% Usage Peak(Logary.WinPerfCounter.Instance)">
<summary>
 % Usage Peak: The peak usage of the Page File instance in percent.  See also Process\\Page File Bytes Peak.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Paging File.% Usage(Logary.WinPerfCounter.Instance)">
<summary>
 % Usage: The amount of the Page File instance in use in percent.  See also Process\\Page File Bytes.
</summary>
</member>
<member name="T:Logary.WinPerfCounters.Paging File">
<summary>
 Paging File: The Paging File performance object consists of counters that monitor the paging file(s) on the computer.  The paging file is a reserved space on disk that backs up committed physical memory on the computer.

 This performance counter does not have non-instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Pacer Pipe.Out of packets(Logary.WinPerfCounter.Instance)">
<summary>
 Out of packets: The number of times Pacer has been unable to allocate a packet.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Pacer Pipe.Nonconforming packets transmitted/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Nonconforming packets transmitted/sec: The rate at which nonconforming packets have been sent by the packet scheduler.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Pacer Pipe.Nonconforming packets transmitted(Logary.WinPerfCounter.Instance)">
<summary>
 Nonconforming packets transmitted: The number of packets that have been sent by the packet scheduler at a rate which exceeded that packet&apos;s flow parameters.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Pacer Pipe.Nonconforming packets scheduled/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Nonconforming packets scheduled/sec: The rate at which nonconforming packets have entered the packet scheduler.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Pacer Pipe.Nonconforming packets scheduled(Logary.WinPerfCounter.Instance)">
<summary>
 Nonconforming packets scheduled: The number of packets that have entered the packet scheduler at a rate which exceeded that packet&apos;s flow parameters.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Pacer Pipe.Max simultaneous flows(Logary.WinPerfCounter.Instance)">
<summary>
 Max simultaneous flows: The maximum number of flows that have been simultaneously open on this pipe.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Pacer Pipe.Max packets in shaper(Logary.WinPerfCounter.Instance)">
<summary>
 Max packets in shaper: The maximum number of packets that have ever simultaneously been in the shaper.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Pacer Pipe.Max packets in sequencer(Logary.WinPerfCounter.Instance)">
<summary>
 Max packets in sequencer: The maximum number of packets that have ever simultaneously been in the sequencer.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Pacer Pipe.Max packets in netcard(Logary.WinPerfCounter.Instance)">
<summary>
 Max packets in netcard: The maximum number of packets ever simultaneously in the network card.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Pacer Pipe.Flows rejected(Logary.WinPerfCounter.Instance)">
<summary>
 Flows rejected: The number of flow creations that were rejected.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Pacer Pipe.Flows opened(Logary.WinPerfCounter.Instance)">
<summary>
 Flows opened: The number of flows opened on this pipe (some of which may now be closed).
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Pacer Pipe.Flows modified(Logary.WinPerfCounter.Instance)">
<summary>
 Flows modified: The number of times a flow has been modified.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Pacer Pipe.Flows closed(Logary.WinPerfCounter.Instance)">
<summary>
 Flows closed: The number of flows that have been closed.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Pacer Pipe.Flow mods rejected(Logary.WinPerfCounter.Instance)">
<summary>
 Flow mods rejected: The number of times a flow modification has been rejected.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Pacer Pipe.Average packets in shaper(Logary.WinPerfCounter.Instance)">
<summary>
 Average packets in shaper: The average number of packets in the shaper over the last sampling period.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Pacer Pipe.Average packets in sequencer(Logary.WinPerfCounter.Instance)">
<summary>
 Average packets in sequencer: The average number of packets in the sequencer over the last sampling period.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Pacer Pipe.Average packets in netcard(Logary.WinPerfCounter.Instance)">
<summary>
 Average packets in netcard: The average number of packets in the network card over the last sampling period.
</summary>
</member>
<member name="T:Logary.WinPerfCounters.Pacer Pipe">
<summary>
 Pacer Pipe: The Pacer Pipe performance counter set consists of pipe statistics from the packet scheduler.

 This performance counter does not have non-instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Pacer Flow.Packets transmitted/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Packets transmitted/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Pacer Flow.Packets transmitted(Logary.WinPerfCounter.Instance)">
<summary>
 Packets transmitted: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Pacer Flow.Packets scheduled/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Packets scheduled/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Pacer Flow.Packets scheduled(Logary.WinPerfCounter.Instance)">
<summary>
 Packets scheduled: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Pacer Flow.Packets dropped/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Packets dropped/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Pacer Flow.Packets dropped(Logary.WinPerfCounter.Instance)">
<summary>
 Packets dropped: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Pacer Flow.Nonconforming packets transmitted/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Nonconforming packets transmitted/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Pacer Flow.Nonconforming packets transmitted(Logary.WinPerfCounter.Instance)">
<summary>
 Nonconforming packets transmitted: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Pacer Flow.Nonconforming packets scheduled/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Nonconforming packets scheduled/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Pacer Flow.Nonconforming packets scheduled(Logary.WinPerfCounter.Instance)">
<summary>
 Nonconforming packets scheduled: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Pacer Flow.Maximum packets in netcard(Logary.WinPerfCounter.Instance)">
<summary>
 Maximum packets in netcard: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Pacer Flow.Max packets in shaper(Logary.WinPerfCounter.Instance)">
<summary>
 Max packets in shaper: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Pacer Flow.Max packets in sequencer(Logary.WinPerfCounter.Instance)">
<summary>
 Max packets in sequencer: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Pacer Flow.Bytes transmitted/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Bytes transmitted/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Pacer Flow.Bytes transmitted(Logary.WinPerfCounter.Instance)">
<summary>
 Bytes transmitted: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Pacer Flow.Bytes scheduled/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Bytes scheduled/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Pacer Flow.Bytes scheduled(Logary.WinPerfCounter.Instance)">
<summary>
 Bytes scheduled: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Pacer Flow.Average packets in shaper(Logary.WinPerfCounter.Instance)">
<summary>
 Average packets in shaper: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Pacer Flow.Average packets in sequencer(Logary.WinPerfCounter.Instance)">
<summary>
 Average packets in sequencer: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Pacer Flow.Average packets in netcard(Logary.WinPerfCounter.Instance)">
<summary>
 Average packets in netcard: -
</summary>
</member>
<member name="T:Logary.WinPerfCounters.Pacer Flow">
<summary>
 Pacer Flow: The Pacer Flow performance counter set consists of flow statistics from the packet scheduler.

 This performance counter does not have instance based counters
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Outlook.Time Min">
<summary>
 Time Min: The minimum amount of time (ms) it took for an RPC to complete successfully.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Outlook.Time Max">
<summary>
 Time Max: The maximum amount of time (ms) it took for an RPC to complete successfully.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Outlook.Time Avg (all)">
<summary>
 Time Avg (all): The average amount of time (ms) it took for all RPCs to complete successfully.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Outlook.Time Avg (50)">
<summary>
 Time Avg (50): The average amount of time (ms) it took for the last 50 RPCs to complete successfully.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Outlook.Time Avg (200)">
<summary>
 Time Avg (200): The average amount of time (ms) it took for the last 200 RPCs to complete successfully.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Outlook.Time Avg (10)">
<summary>
 Time Avg (10): The average amount of time (ms)it took for the last 10 RPCs to complete successfully.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Outlook.RPCs UI Shown">
<summary>
 RPCs UI Shown: Number of RPCs that were sent to the server, and took long enough to show progress UI.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Outlook.RPCs Succeeded">
<summary>
 RPCs Succeeded: Number of RPCs that outlook successfully sent to the server.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Outlook.RPCs Failed">
<summary>
 RPCs Failed: Number of RPCs that were attempted, but failed.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Outlook.RPCs Cancelled">
<summary>
 RPCs Cancelled: Number of RPCs that were sent to the server, but the user cancelled.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Outlook.RPCs Attempted - UI">
<summary>
 RPCs Attempted - UI: Number of RPCs that outlook attempted that blocked the UI.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Outlook.RPCs Attempted">
<summary>
 RPCs Attempted: Number of RPCs that outlook attempted to send to the server.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Outlook.Count obj connection">
<summary>
 Count obj connection: The number of connection objects that are currently being used.
</summary>
</member>
<member name="T:Logary.WinPerfCounters.Outlook">
<summary>
 Outlook: Gives performance metrics for outlook server connectivity.

 This performance counter does not have instance based counters
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Offline Files.Bytes Transmitted/sec">
<summary>
 Bytes Transmitted/sec: Bytes synchronized per second, client to server
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Offline Files.Bytes Transmitted">
<summary>
 Bytes Transmitted: Bytes synchronized from client to server
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Offline Files.Bytes Received/sec">
<summary>
 Bytes Received/sec: Bytes synchronized per second, server to client
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Offline Files.Bytes Received">
<summary>
 Bytes Received: Bytes synchronized from server to client
</summary>
</member>
<member name="T:Logary.WinPerfCounters.Offline Files">
<summary>
 Offline Files: Performance counters for Offline Files

 This performance counter does not have instance based counters
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Objects.Threads">
<summary>
 Threads: Threads is the number of threads in the computer at the time of data collection. This is an instantaneous count, not an average over the time interval.  A thread is the basic executable entity that can execute instructions in a processor.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Objects.Semaphores">
<summary>
 Semaphores: Semaphores is the number of semaphores in the computer at the time of data collection. This is an instantaneous count, not an average over the time interval.  Threads use semaphores to obtain exclusive access to data structures that they share with other threads.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Objects.Sections">
<summary>
 Sections: Sections is the number of sections in the computer at the time of data collection. This is an instantaneous count, not an average over the time interval.  A section is a portion of virtual memory created by a process for storing data. A process can share sections with other processes.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Objects.Processes">
<summary>
 Processes: Processes is the number of processes in the computer at the time of data collection. This is an instantaneous count, not an average over the time interval.  Each process represents the running of a program.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Objects.Mutexes">
<summary>
 Mutexes: Mutexes counts the number of mutexes in the computer at the time of data collection. This is an instantaneous count, not an average over the time interval.  Mutexes are used by threads to assure only one thread is executing a particular section of code.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Objects.Events">
<summary>
 Events: Events is the number of events in the computer at the time of data collection. This is an instantaneous count, not an average over the time interval.  An event is used when two or more threads try to synchronize execution.
</summary>
</member>
<member name="T:Logary.WinPerfCounters.Objects">
<summary>
 Objects: The Object performance object consists of counters that monitor  logical objects in the system, such as processes, threads, mutexes, and semaphores.  This information can be used to detect the unnecessary consumption of computer resources.  Each object requires memory to store basic information about the object.

 This performance counter does not have instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Network QoS Policy.Packets transmitted/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Packets transmitted/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Network QoS Policy.Packets transmitted(Logary.WinPerfCounter.Instance)">
<summary>
 Packets transmitted: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Network QoS Policy.Packets dropped/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Packets dropped/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Network QoS Policy.Packets dropped(Logary.WinPerfCounter.Instance)">
<summary>
 Packets dropped: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Network QoS Policy.Bytes transmitted/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Bytes transmitted/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Network QoS Policy.Bytes transmitted(Logary.WinPerfCounter.Instance)">
<summary>
 Bytes transmitted: -
</summary>
</member>
<member name="T:Logary.WinPerfCounters.Network QoS Policy">
<summary>
 Network QoS Policy: This counter set consists of flow statistics specific to a network QoS policy.

 This performance counter does not have instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Network Interface.TCP RSC Exceptions/sec(Logary.WinPerfCounter.Instance)">
<summary>
 TCP RSC Exceptions/sec: TCP RSC Exceptions/sec shows the RSC exception rate for receive packets across all TCP connections on this network interface.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Network Interface.TCP RSC Coalesced Packets/sec(Logary.WinPerfCounter.Instance)">
<summary>
 TCP RSC Coalesced Packets/sec: TCP RSC Coalesced Packets/sec shows the large packet receive rate across all TCP connections on this network interface.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Network Interface.TCP RSC Average Packet Size(Logary.WinPerfCounter.Instance)">
<summary>
 TCP RSC Average Packet Size: TCP RSC Average Packet Size is the average size in bytes of received packets across all TCP connections on this network interface.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Network Interface.TCP Active RSC Connections(Logary.WinPerfCounter.Instance)">
<summary>
 TCP Active RSC Connections: TCP Active RSC Connections is the number of TCP connections (over both IPv4 and IPv6) that are currently receiving large packets from the RSC capable network adapter on this network interface.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Network Interface.Packets/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Packets/sec: Packets/sec is the rate at which packets are sent and received on the network interface.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Network Interface.Packets Sent/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Packets Sent/sec: Packets Sent/sec is the rate at which packets are sent on the network interface.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Network Interface.Packets Sent Unicast/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Packets Sent Unicast/sec: Packets Sent Unicast/sec is the rate at which packets are requested to be transmitted to subnet-unicast addresses by higher-level protocols.  The rate includes the packets that were discarded or not sent.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Network Interface.Packets Sent Non-Unicast/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Packets Sent Non-Unicast/sec: Packets Sent Non-Unicast/sec is the rate at which packets are requested to be transmitted to non-unicast (subnet broadcast or subnet multicast) addresses by higher-level protocols.  The rate includes the packets that were discarded or not sent.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Network Interface.Packets Received/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Packets Received/sec: Packets Received/sec is the rate at which packets are received on the network interface.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Network Interface.Packets Received Unknown(Logary.WinPerfCounter.Instance)">
<summary>
 Packets Received Unknown: Packets Received Unknown is the number of packets received through the interface that were discarded because of an unknown or unsupported protocol.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Network Interface.Packets Received Unicast/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Packets Received Unicast/sec: Packets Received Unicast/sec is the rate at which (subnet) unicast packets are delivered to a higher-layer protocol.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Network Interface.Packets Received Non-Unicast/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Packets Received Non-Unicast/sec: Packets Received Non-Unicast/sec is the rate at which non-unicast (subnet broadcast or subnet multicast) packets are delivered to a higher-layer protocol.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Network Interface.Packets Received Errors(Logary.WinPerfCounter.Instance)">
<summary>
 Packets Received Errors: Packets Received Errors is the number of inbound packets that contained errors preventing them from being deliverable to a higher-layer protocol.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Network Interface.Packets Received Discarded(Logary.WinPerfCounter.Instance)">
<summary>
 Packets Received Discarded: Packets Received Discarded is the number of inbound packets that were chosen to be discarded even though no errors had been detected to prevent their delivery to a higher-layer protocol.  One possible reason for discarding packets could be to free up buffer space.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Network Interface.Packets Outbound Errors(Logary.WinPerfCounter.Instance)">
<summary>
 Packets Outbound Errors: Packets Outbound Errors is the number of outbound packets that could not be transmitted because of errors.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Network Interface.Packets Outbound Discarded(Logary.WinPerfCounter.Instance)">
<summary>
 Packets Outbound Discarded: Packets Outbound Discarded is the number of outbound packets that were chosen to be discarded even though no errors had been detected to prevent transmission. One possible reason for discarding packets could be to free up buffer space.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Network Interface.Output Queue Length(Logary.WinPerfCounter.Instance)">
<summary>
 Output Queue Length: Output Queue Length is the length of the output packet queue (in packets). If this is longer than two, there are delays and the bottleneck should be found and eliminated, if possible. Since the requests are queued by the Network Driver Interface Specification (NDIS) in this implementation, this will always be 0.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Network Interface.Offloaded Connections(Logary.WinPerfCounter.Instance)">
<summary>
 Offloaded Connections: Offloaded Connections is the number of TCP connections (over both IPv4 and IPv6) that are currently handled by the TCP chimney offload capable network adapter.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Network Interface.Current Bandwidth(Logary.WinPerfCounter.Instance)">
<summary>
 Current Bandwidth: Current Bandwidth is an estimate of the current bandwidth of the network interface in bits per second (BPS).  For interfaces that do not vary in bandwidth or for those where no accurate estimation can be made, this value is the nominal bandwidth.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Network Interface.Bytes Total/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Bytes Total/sec: Bytes Total/sec is the rate at which bytes are sent and received over each network adapter, including framing characters. Network Interface\Bytes Total/sec is a sum of Network Interface\Bytes Received/sec and Network Interface\Bytes Sent/sec.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Network Interface.Bytes Sent/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Bytes Sent/sec: Bytes Sent/sec is the rate at which bytes are sent over each network adapter, including framing characters. Network Interface\Bytes Sent/sec is a subset of Network Interface\Bytes Total/sec.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Network Interface.Bytes Received/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Bytes Received/sec: Bytes Received/sec is the rate at which bytes are received over each network adapter, including framing characters. Network Interface\Bytes Received/sec is a subset of Network Interface\Bytes Total/sec.
</summary>
</member>
<member name="T:Logary.WinPerfCounters.Network Interface">
<summary>
 Network Interface: The Network Interface performance object consists of counters that measure the rates at which bytes and packets are sent and received over a network connection.  It includes counters that monitor connection errors.

 This performance counter does not have non-instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Network Adapter.TCP RSC Exceptions/sec(Logary.WinPerfCounter.Instance)">
<summary>
 TCP RSC Exceptions/sec: TCP RSC Exceptions/sec shows the RSC exception rate for receive packets across all TCP connections on this network interface.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Network Adapter.TCP RSC Coalesced Packets/sec(Logary.WinPerfCounter.Instance)">
<summary>
 TCP RSC Coalesced Packets/sec: TCP RSC Coalesced Packets/sec shows the large packet receive rate across all TCP connections on this network interface.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Network Adapter.TCP RSC Average Packet Size(Logary.WinPerfCounter.Instance)">
<summary>
 TCP RSC Average Packet Size: TCP RSC Average Packet Size is the average size in bytes of received packets across all TCP connections on this network interface.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Network Adapter.TCP Active RSC Connections(Logary.WinPerfCounter.Instance)">
<summary>
 TCP Active RSC Connections: TCP Active RSC Connections is the number of TCP connections (over both IPv4 and IPv6) that are currently receiving large packets from the RSC capable network adapter on this network interface.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Network Adapter.Packets/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Packets/sec: Packets/sec is the rate at which packets are sent and received on the network interface.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Network Adapter.Packets Sent/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Packets Sent/sec: Packets Sent/sec is the rate at which packets are sent on the network interface.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Network Adapter.Packets Sent Unicast/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Packets Sent Unicast/sec: Packets Sent Unicast/sec is the rate at which packets are requested to be transmitted to subnet-unicast addresses by higher-level protocols.  The rate includes the packets that were discarded or not sent.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Network Adapter.Packets Sent Non-Unicast/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Packets Sent Non-Unicast/sec: Packets Sent Non-Unicast/sec is the rate at which packets are requested to be transmitted to non-unicast (subnet broadcast or subnet multicast) addresses by higher-level protocols.  The rate includes the packets that were discarded or not sent.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Network Adapter.Packets Received/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Packets Received/sec: Packets Received/sec is the rate at which packets are received on the network interface.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Network Adapter.Packets Received Unknown(Logary.WinPerfCounter.Instance)">
<summary>
 Packets Received Unknown: Packets Received Unknown is the number of packets received through the interface that were discarded because of an unknown or unsupported protocol.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Network Adapter.Packets Received Unicast/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Packets Received Unicast/sec: Packets Received Unicast/sec is the rate at which (subnet) unicast packets are delivered to a higher-layer protocol.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Network Adapter.Packets Received Non-Unicast/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Packets Received Non-Unicast/sec: Packets Received Non-Unicast/sec is the rate at which non-unicast (subnet broadcast or subnet multicast) packets are delivered to a higher-layer protocol.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Network Adapter.Packets Received Errors(Logary.WinPerfCounter.Instance)">
<summary>
 Packets Received Errors: Packets Received Errors is the number of inbound packets that contained errors preventing them from being deliverable to a higher-layer protocol.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Network Adapter.Packets Received Discarded(Logary.WinPerfCounter.Instance)">
<summary>
 Packets Received Discarded: Packets Received Discarded is the number of inbound packets that were chosen to be discarded even though no errors had been detected to prevent their delivery to a higher-layer protocol.  One possible reason for discarding packets could be to free up buffer space.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Network Adapter.Packets Outbound Errors(Logary.WinPerfCounter.Instance)">
<summary>
 Packets Outbound Errors: Packets Outbound Errors is the number of outbound packets that could not be transmitted because of errors.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Network Adapter.Packets Outbound Discarded(Logary.WinPerfCounter.Instance)">
<summary>
 Packets Outbound Discarded: Packets Outbound Discarded is the number of outbound packets that were chosen to be discarded even though no errors had been detected to prevent transmission. One possible reason for discarding packets could be to free up buffer space.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Network Adapter.Output Queue Length(Logary.WinPerfCounter.Instance)">
<summary>
 Output Queue Length: Output Queue Length is the length of the output packet queue (in packets). If this is longer than two, there are delays and the bottleneck should be found and eliminated, if possible. Since the requests are queued by the Network Driver Interface Specification (NDIS) in this implementation, this will always be 0.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Network Adapter.Offloaded Connections(Logary.WinPerfCounter.Instance)">
<summary>
 Offloaded Connections: Offloaded Connections is the number of TCP connections (over both IPv4 and IPv6) that are currently handled by the TCP chimney offload capable network adapter.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Network Adapter.Current Bandwidth(Logary.WinPerfCounter.Instance)">
<summary>
 Current Bandwidth: Current Bandwidth is an estimate of the current bandwidth of the network interface in bits per second (BPS).  For interfaces that do not vary in bandwidth or for those where no accurate estimation can be made, this value is the nominal bandwidth.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Network Adapter.Bytes Total/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Bytes Total/sec: Bytes Total/sec is the rate at which bytes are sent and received over each network adapter, including framing characters. Network Interface\Bytes Total/sec is a sum of Network Interface\Bytes Received/sec and Network Interface\Bytes Sent/sec.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Network Adapter.Bytes Sent/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Bytes Sent/sec: Bytes Sent/sec is the rate at which bytes are sent over each network adapter, including framing characters. Network Interface\Bytes Sent/sec is a subset of Network Interface\Bytes Total/sec.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Network Adapter.Bytes Received/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Bytes Received/sec: Bytes Received/sec is the rate at which bytes are received over each network adapter, including framing characters. Network Interface\Bytes Received/sec is a subset of Network Interface\Bytes Total/sec.
</summary>
</member>
<member name="T:Logary.WinPerfCounters.Network Adapter">
<summary>
 Network Adapter: The Network Adapter performance object consists of counters that measure the rates at which bytes and packets are sent and received over a physical or virtual network connection.  It includes counters that monitor connection errors.

 This performance counter does not have non-instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Netlogon.Semaphore Waiters(Logary.WinPerfCounter.Instance)">
<summary>
 Semaphore Waiters: Number of thread currently waiting to acquire the semaphore.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Netlogon.Semaphore Timeouts(Logary.WinPerfCounter.Instance)">
<summary>
 Semaphore Timeouts: The total number of times a thread has timed out waiting for the semaphore over the lifetime of the Secure Channel connection (or since system boot for _Total).
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Netlogon.Semaphore Holders(Logary.WinPerfCounter.Instance)">
<summary>
 Semaphore Holders: Number of thread currently holding the semaphore.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Netlogon.Semaphore Acquires(Logary.WinPerfCounter.Instance)">
<summary>
 Semaphore Acquires: The total number of times the semaphore has been acquired over the lifetime of the Secure Channel connection (or since system boot for _Total).
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Netlogon.Average Semaphore Hold Time(Logary.WinPerfCounter.Instance)">
<summary>
 Average Semaphore Hold Time: The average amount of time the semaphore is held over the last sample.
</summary>
</member>
<member name="T:Logary.WinPerfCounters.Netlogon">
<summary>
 Netlogon: Counters for measuring the performance of Netlogon.

 This performance counter does not have non-instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.NUMA Node Memory.Total MBytes(Logary.WinPerfCounter.Instance)">
<summary>
 Total MBytes: Total amount of physical memory associated with a NUMA node in megabytes.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.NUMA Node Memory.Free & Zero Page List MBytes(Logary.WinPerfCounter.Instance)">
<summary>
 Free &amp; Zero Page List MBytes: Approximate amount of physical memory on the free and zero page lists for a NUMA node, in megabytes.
</summary>
</member>
<member name="T:Logary.WinPerfCounters.NUMA Node Memory">
<summary>
 NUMA Node Memory: Counters that report approximate memory utilization statistics per node on NUMA systems.

 This performance counter does not have non-instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.NBT Connection.Bytes Total/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Bytes Total/sec: Bytes Total/sec is the rate at which bytes are sent or received by the local computer over an NBT connection to some remote computer.  All the bytes sent or received by the local computer over the particular NBT connection are counted.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.NBT Connection.Bytes Sent/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Bytes Sent/sec: Bytes Sent/sec is the rate at which bytes are sent by the local computer over an NBT connection to some remote computer.  All the bytes sent by the local computer over the particular NBT connection are counted.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.NBT Connection.Bytes Received/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Bytes Received/sec: Bytes Received/sec is the rate at which bytes are received by the local computer over an NBT connection to some remote computer.  All the bytes received by the local computer over the particular NBT connection are counted.
</summary>
</member>
<member name="T:Logary.WinPerfCounters.NBT Connection">
<summary>
 NBT Connection: The NBT Connection performance object consists of counters that measure the rates at which bytes are sent and received over the NBT connection between the local computer and a remote computer.  The connection is identified by the name of the remote computer.

 This performance counter does not have non-instance based counters
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Microsoft Winsock BSP.Rejected Connections/sec">
<summary>
 Rejected Connections/sec: Rejected Connections/sec due to backlog limit on any TCP listening socket
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Microsoft Winsock BSP.Rejected Connections">
<summary>
 Rejected Connections: Rejected Connections due to backlog limit on any TCP listening socket
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Microsoft Winsock BSP.Dropped Datagrams/sec">
<summary>
 Dropped Datagrams/sec: Dropped Datagrams/sec due to receive buffer limit on any datagram socket
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Microsoft Winsock BSP.Dropped Datagrams">
<summary>
 Dropped Datagrams: Dropped Datagrams due to receive buffer limit on any datagram socket
</summary>
</member>
<member name="T:Logary.WinPerfCounters.Microsoft Winsock BSP">
<summary>
 Microsoft Winsock BSP: Global performance counters for Microsoft Winsock Base Service Provider

 This performance counter does not have instance based counters
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Memory.Write Copies/sec">
<summary>
 Write Copies/sec: Write Copies/sec is the rate at which page faults are caused by attempts to write that have been satisfied by coping of the page from elsewhere in physical memory. This is an economical way of sharing data since pages are only copied when they are written to; otherwise, the page is shared. This counter shows the number of copies, without regard for the number of pages copied in each operation.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Memory.Transition Pages RePurposed/sec">
<summary>
 Transition Pages RePurposed/sec: Transition Pages RePurposed is the rate at which the number of transition cache pages were reused for a different purpose.  These pages would have otherwise remained in the page cache to provide a (fast) soft fault (instead of retrieving it from backing store) in the event the page was accessed in the future.  Note these pages can contain private or sharable memory.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Memory.Transition Faults/sec">
<summary>
 Transition Faults/sec: Transition Faults/sec is the rate at which page faults are resolved by recovering pages that were being used by another process sharing the page, or were on the modified page list or the standby list, or were being written to disk at the time of the page fault. The pages were recovered without additional disk activity. Transition faults are counted in numbers of faults; because only one page is faulted in each operation, it is also equal to the number of pages faulted.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Memory.System Driver Total Bytes">
<summary>
 System Driver Total Bytes: System Driver Total Bytes is the size, in bytes, of the pageable virtual memory currently being used by device drivers. Pageable memory can be written to disk when it is not being used. It includes both physical memory (Memory\\System Driver Resident Bytes) and code and data paged to disk. It is a component of Memory\\System Code Total Bytes. This counter displays the last observed value only; it is not an average.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Memory.System Driver Resident Bytes">
<summary>
 System Driver Resident Bytes: System Driver Resident Bytes is the size, in bytes, of the pageable physical memory being used by device drivers. It is the working set (physical memory area) of the drivers. This value is a component of Memory\\System Driver Total Bytes, which also includes driver memory that has been written to disk. Neither Memory\\System Driver Resident Bytes nor Memory\\System Driver Total Bytes includes memory that cannot be written to disk.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Memory.System Code Total Bytes">
<summary>
 System Code Total Bytes: System Code Total Bytes is the size, in bytes, of the pageable operating system code currently mapped into the system virtual address space. This value is calculated by summing the bytes in Ntoskrnl.exe, Hal.dll, the boot drivers, and file systems loaded by Ntldr/osloader.  This counter does not include code that must remain in physical memory and cannot be written to disk. This counter displays the last observed value only; it is not an average.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Memory.System Code Resident Bytes">
<summary>
 System Code Resident Bytes: System Code Resident Bytes is the size, in bytes, of the pageable operating system code that is currently resident and active in physical memory. This value is a component of Memory\\System Code Total Bytes. Memory\\System Code Resident Bytes (and Memory\\System Code Total Bytes) does not include code that must remain in physical memory and cannot be written to disk. This counter displays the last observed value only; it is not an average.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Memory.System Cache Resident Bytes">
<summary>
 System Cache Resident Bytes: System Cache Resident Bytes is the size, in bytes, of the portion of the system file cache which is currently resident and active in physical memory. The System Cache Resident Bytes and Memory\\Cache Bytes counters are equivalent.  This counter displays the last observed value only; it is not an average.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Memory.Standby Cache Reserve Bytes">
<summary>
 Standby Cache Reserve Bytes: Standby Cache Reserve Bytes is the amount of physical memory, in bytes, that is assigned to the reserve standby cache page lists. This memory contains cached data and code that is not actively in use by processes, the system and the system cache. It is immediately available for allocation to a process or for system use. If the system runs out of available free and zero memory, memory on lower priority standby cache page lists will be repurposed before memory on higher priority standby cache page lists.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Memory.Standby Cache Normal Priority Bytes">
<summary>
 Standby Cache Normal Priority Bytes: Standby Cache Normal Priority Bytes is the amount of physical memory, in bytes, that is assigned to the normal priority standby cache page lists. This memory contains cached data and code that is not actively in use by processes, the system and the system cache. It is immediately available for allocation to a process or for system use. If the system runs out of available free and zero memory, memory on lower priority standby cache page lists will be repurposed before memory on higher priority standby cache page lists.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Memory.Standby Cache Core Bytes">
<summary>
 Standby Cache Core Bytes: Standby Cache Core Bytes is the amount of physical memory, in bytes, that is assigned to the core standby cache page lists. This memory contains cached data and code that is not actively in use by processes, the system and the system cache. It is immediately available for allocation to a process or for system use. If the system runs out of available free and zero memory, memory on lower priority standby cache page lists will be repurposed before memory on higher priority standby cache page lists.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Memory.Pool Paged Resident Bytes">
<summary>
 Pool Paged Resident Bytes: Pool Paged Resident Bytes is the size, in bytes, of the portion of the paged pool that is currently resident and active in physical memory. The paged pool is an area of the system virtual memory that is used for objects that can be written to disk when they are not being used. This counter displays the last observed value only; it is not an average.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Memory.Pool Paged Bytes">
<summary>
 Pool Paged Bytes: Pool Paged Bytes is the size, in bytes, of the paged pool, an area of the system virtual memory that is used for objects that can be written to disk when they are not being used.  Memory\\Pool Paged Bytes is calculated differently than Process\\Pool Paged Bytes, so it might not equal Process(_Total)\\Pool Paged Bytes. This counter displays the last observed value only; it is not an average.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Memory.Pool Paged Allocs">
<summary>
 Pool Paged Allocs: Pool Paged Allocs is the number of calls to allocate space in the paged pool. The paged pool is an area of the system virtual memory that is used for objects that can be written to disk when they are not being used. It is measured in numbers of calls to allocate space, regardless of the amount of space allocated in each call.  This counter displays the last observed value only; it is not an average.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Memory.Pool Nonpaged Bytes">
<summary>
 Pool Nonpaged Bytes: Pool Nonpaged Bytes is the size, in bytes, of the nonpaged pool, an area of the system virtual memory that is used for objects that cannot be written to disk, but must remain in physical memory as long as they are allocated.  Memory\\Pool Nonpaged Bytes is calculated differently than Process\\Pool Nonpaged Bytes, so it might not equal Process(_Total)\\Pool Nonpaged Bytes.  This counter displays the last observed value only; it is not an average.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Memory.Pool Nonpaged Allocs">
<summary>
 Pool Nonpaged Allocs: Pool Nonpaged Allocs is the number of calls to allocate space in the nonpaged pool. The nonpaged pool is an area of system memory area for objects that cannot be written to disk, and must remain in physical memory as long as they are allocated.  It is measured in numbers of calls to allocate space, regardless of the amount of space allocated in each call.  This counter displays the last observed value only; it is not an average.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Memory.Pages/sec">
<summary>
 Pages/sec: Pages/sec is the rate at which pages are read from or written to disk to resolve hard page faults. This counter is a primary indicator of the kinds of faults that cause system-wide delays.  It is the sum of Memory\\Pages Input/sec and Memory\\Pages Output/sec.  It is counted in numbers of pages, so it can be compared to other counts of pages, such as Memory\\Page Faults/sec, without conversion. It includes pages retrieved to satisfy faults in the file system cache (usually requested by applications) non-cached mapped memory files.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Memory.Pages Output/sec">
<summary>
 Pages Output/sec: Pages Output/sec is the rate at which pages are written to disk to free up space in physical memory. Pages are written back to disk only if they are changed in physical memory, so they are likely to hold data, not code. A high rate of pages output might indicate a memory shortage. Windows writes more pages back to disk to free up space when physical memory is in short supply.  This counter shows the number of pages, and can be compared to other counts of pages, without conversion.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Memory.Pages Input/sec">
<summary>
 Pages Input/sec: Pages Input/sec is the rate at which pages are read from disk to resolve hard page faults. Hard page faults occur when a process refers to a page in virtual memory that is not in its working set or elsewhere in physical memory, and must be retrieved from disk. When a page is faulted, the system tries to read multiple contiguous pages into memory to maximize the benefit of the read operation. Compare the value of Memory\\Pages Input/sec to the value of  Memory\\Page Reads/sec to determine the average number of pages read into memory during each read operation.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Memory.Page Writes/sec">
<summary>
 Page Writes/sec: Page Writes/sec is the rate at which pages are written to disk to free up space in physical memory. Pages are written to disk only if they are changed while in physical memory, so they are likely to hold data, not code.  This counter shows write operations, without regard to the number of pages written in each operation.  This counter displays the difference between the values observed in the last two samples, divided by the duration of the sample interval.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Memory.Page Reads/sec">
<summary>
 Page Reads/sec: Page Reads/sec is the rate at which the disk was read to resolve hard page faults. It shows the number of reads operations, without regard to the number of pages retrieved in each operation. Hard page faults occur when a process references a page in virtual memory that is not in working set or elsewhere in physical memory, and must be retrieved from disk. This counter is a primary indicator of the kinds of faults that cause system-wide delays. It includes read operations to satisfy faults in the file system cache (usually requested by applications) and in non-cached mapped memory files. Compare the value of Memory\\Pages Reads/sec to the value of Memory\\Pages Input/sec to determine the average number of pages read during each operation.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Memory.Page Faults/sec">
<summary>
 Page Faults/sec: Page Faults/sec is the average number of pages faulted per second. It is measured in number of pages faulted per second because only one page is faulted in each fault operation, hence this is also equal to the number of page fault operations. This counter includes both hard faults (those that require disk access) and soft faults (where the faulted page is found elsewhere in physical memory.) Most processors can handle large numbers of soft faults without significant consequence. However, hard faults, which require disk access, can cause significant delays.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Memory.Modified Page List Bytes">
<summary>
 Modified Page List Bytes: Modified Page List Bytes is the amount of physical memory, in bytes, that is assigned to the modified page list. This memory contains cached data and code that is not actively in use by processes, the system and the system cache. This memory needs to be written out before it will be available for allocation to a process or for system use.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Memory.Long-Term Average Standby Cache Lifetime (s)">
<summary>
 Long-Term Average Standby Cache Lifetime (s): Long-Term Average Standby Cache Lifetime, in seconds. The average lifetime of data in the standby cache over a long interval is measured.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Memory.Free System Page Table Entries">
<summary>
 Free System Page Table Entries: Free System Page Table Entries is the number of page table entries not currently in used by the system.  This counter displays the last observed value only; it is not an average.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Memory.Free & Zero Page List Bytes">
<summary>
 Free &amp; Zero Page List Bytes: Free &amp; Zero Page List Bytes is the amount of physical memory, in bytes, that is assigned to the free and zero page lists. This memory does not contain cached data. It is immediately available for allocation to a process or for system use.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Memory.Demand Zero Faults/sec">
<summary>
 Demand Zero Faults/sec: Demand Zero Faults/sec is the rate at which a zeroed page is required to satisfy the fault.  Zeroed pages, pages emptied of previously stored data and filled with zeros, are a security feature of Windows that prevent processes from seeing data stored by earlier processes that used the memory space. Windows maintains a list of zeroed pages to accelerate this process. This counter shows the number of faults, without regard to the number of pages retrieved to satisfy the fault. This counter displays the difference between the values observed in the last two samples, divided by the duration of the sample interval.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Memory.Committed Bytes">
<summary>
 Committed Bytes: Committed Bytes is the amount of committed virtual memory, in bytes. Committed memory is the physical memory which has space reserved on the disk paging file(s). There can be one or more paging files on each physical drive. This counter displays the last observed value only; it is not an average.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Memory.Commit Limit">
<summary>
 Commit Limit: Commit Limit is the amount of virtual memory that can be committed without having to extend the paging file(s).  It is measured in bytes. Committed memory is the physical memory which has space reserved on the disk paging files. There can be one paging file on each logical drive). If the paging file(s) are be expanded, this limit increases accordingly.  This counter displays the last observed value only; it is not an average.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Memory.Cache Faults/sec">
<summary>
 Cache Faults/sec: Cache Faults/sec is the rate at which faults occur when a page sought in the file system cache is not found and must be retrieved from elsewhere in memory (a soft fault) or from disk (a hard fault). The file system cache is an area of physical memory that stores recently used pages of data for applications. Cache activity is a reliable indicator of most application I/O operations. This counter shows the number of faults, without regard for the number of pages faulted in each operation.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Memory.Cache Bytes Peak">
<summary>
 Cache Bytes Peak: Cache Bytes Peak is the maximum number of bytes used by the system file cache since the system was last restarted. This might be larger than the current size of the cache. This counter displays the last observed value only; it is not an average.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Memory.Cache Bytes">
<summary>
 Cache Bytes: Cache Bytes the size, in bytes, of the portion of the system file cache which is currently resident and active in physical memory. The Cache Bytes and Memory\\System Cache Resident Bytes counters are equivalent.  This counter displays the last observed value only; it is not an average.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Memory.Available MBytes">
<summary>
 Available MBytes: Available MBytes is the amount of physical memory, in Megabytes, immediately available for allocation to a process or for system use. It is equal to the sum of memory assigned to the standby (cached), free and zero page lists.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Memory.Available KBytes">
<summary>
 Available KBytes: Available KBytes is the amount of physical memory, in Kilobytes, immediately available for allocation to a process or for system use. It is equal to the sum of memory assigned to the standby (cached), free and zero page lists.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Memory.Available Bytes">
<summary>
 Available Bytes: Available Bytes is the amount of physical memory, in bytes, immediately available for allocation to a process or for system use. It is equal to the sum of memory assigned to the standby (cached), free and zero page lists.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Memory.% Committed Bytes In Use">
<summary>
 % Committed Bytes In Use: % Committed Bytes In Use is the ratio of Memory\\Committed Bytes to the Memory\\Commit Limit. Committed memory is the physical memory in use for which space has been reserved in the paging file should it need to be written to disk. The commit limit is determined by the size of the paging file.  If the paging file is enlarged, the commit limit increases, and the ratio is reduced). This counter displays the current percentage value only; it is not an average.
</summary>
</member>
<member name="T:Logary.WinPerfCounters.Memory">
<summary>
 Memory: The Memory performance object  consists of counters that describe the behavior of physical and virtual memory on the computer.  Physical memory is the amount of random access memory on the computer.  Virtual memory consists of the space in physical memory and on disk.  Many of the memory counters monitor paging, which is the movement of pages of code and data between disk and physical memory.  Excessive paging, a symptom of a memory shortage, can cause delays which interfere with all system processes.

 This performance counter does not have instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.MSRS 2011 Windows Service.Total Snapshot Updates(Logary.WinPerfCounter.Instance)">
<summary>
 Total Snapshot Updates: Total number of report execution snapshot updates.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.MSRS 2011 Windows Service.Total Requests(Logary.WinPerfCounter.Instance)">
<summary>
 Total Requests: Total number of requests being processed.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.MSRS 2011 Windows Service.Total Reports Executed(Logary.WinPerfCounter.Instance)">
<summary>
 Total Reports Executed: Total number of reports executed.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.MSRS 2011 Windows Service.Total Rejected Threads(Logary.WinPerfCounter.Instance)">
<summary>
 Total Rejected Threads: Total number of rejected threads as a result of thread pressure.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.MSRS 2011 Windows Service.Total Processing Failures(Logary.WinPerfCounter.Instance)">
<summary>
 Total Processing Failures: Total number of processing failures.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.MSRS 2011 Windows Service.Total Memory Cache Misses(Logary.WinPerfCounter.Instance)">
<summary>
 Total Memory Cache Misses: Total number of cache misses made in the in memory cache.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.MSRS 2011 Windows Service.Total Memory Cache Hits(Logary.WinPerfCounter.Instance)">
<summary>
 Total Memory Cache Hits: Total number of cache hits made in the in memory cache.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.MSRS 2011 Windows Service.Total Events(Logary.WinPerfCounter.Instance)">
<summary>
 Total Events: Total number of events.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.MSRS 2011 Windows Service.Total Deliveries(Logary.WinPerfCounter.Instance)">
<summary>
 Total Deliveries: Total number of deliveries.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.MSRS 2011 Windows Service.Total Cache Misses (Semantic Models)(Logary.WinPerfCounter.Instance)">
<summary>
 Total Cache Misses (Semantic Models): Total number of cache misses made in the model cache.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.MSRS 2011 Windows Service.Total Cache Misses(Logary.WinPerfCounter.Instance)">
<summary>
 Total Cache Misses: Total number of cache misses.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.MSRS 2011 Windows Service.Total Cache Hits (Semantic Models)(Logary.WinPerfCounter.Instance)">
<summary>
 Total Cache Hits (Semantic Models): Total number of cache hits made in the model cache.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.MSRS 2011 Windows Service.Total Cache Hits(Logary.WinPerfCounter.Instance)">
<summary>
 Total Cache Hits: Total number of report server cache hits.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.MSRS 2011 Windows Service.Total Cache Flushes(Logary.WinPerfCounter.Instance)">
<summary>
 Total Cache Flushes: Total number of report execution server cache updates.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.MSRS 2011 Windows Service.Total App Domain Recycles(Logary.WinPerfCounter.Instance)">
<summary>
 Total App Domain Recycles: Total number of application domain recycles.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.MSRS 2011 Windows Service.Snapshot Updates/Sec(Logary.WinPerfCounter.Instance)">
<summary>
 Snapshot Updates/Sec: Number of snapshot updates per second.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.MSRS 2011 Windows Service.Requests/Sec(Logary.WinPerfCounter.Instance)">
<summary>
 Requests/Sec: Number of requests per second.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.MSRS 2011 Windows Service.Reports Executed/Sec(Logary.WinPerfCounter.Instance)">
<summary>
 Reports Executed/Sec: Number of reports executed per second.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.MSRS 2011 Windows Service.Report Requests(Logary.WinPerfCounter.Instance)">
<summary>
 Report Requests: Number of active report requests.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.MSRS 2011 Windows Service.Next Session Requests/Sec(Logary.WinPerfCounter.Instance)">
<summary>
 Next Session Requests/Sec: Number of requests per second for reports that are open in an existing session.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.MSRS 2011 Windows Service.Memory Cache Miss/Sec(Logary.WinPerfCounter.Instance)">
<summary>
 Memory Cache Miss/Sec: Number of times per second that reports cannot be retrieved from the in memory cache.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.MSRS 2011 Windows Service.Memory Cache Hits/Sec(Logary.WinPerfCounter.Instance)">
<summary>
 Memory Cache Hits/Sec: Number of times per second that reports can be retrieved from the in memory cache.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.MSRS 2011 Windows Service.First Session Requests/Sec(Logary.WinPerfCounter.Instance)">
<summary>
 First Session Requests/Sec: Number of new user sessions that are started per second.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.MSRS 2011 Windows Service.Events/Sec(Logary.WinPerfCounter.Instance)">
<summary>
 Events/Sec: Number of events per second.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.MSRS 2011 Windows Service.Delivers/Sec(Logary.WinPerfCounter.Instance)">
<summary>
 Delivers/Sec: Number of delivers deliveries per second.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.MSRS 2011 Windows Service.Cache Misses/Sec (Semantic Models)(Logary.WinPerfCounter.Instance)">
<summary>
 Cache Misses/Sec (Semantic Models): Number of times per second that models cannot be retrieved from the cache.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.MSRS 2011 Windows Service.Cache Misses/Sec(Logary.WinPerfCounter.Instance)">
<summary>
 Cache Misses/Sec: Number of times per second that reports cannot be retrieved from cache.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.MSRS 2011 Windows Service.Cache Hits/Sec (Semantic Models)(Logary.WinPerfCounter.Instance)">
<summary>
 Cache Hits/Sec (Semantic Models): Number of times per second that models can be retrieved from the cache.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.MSRS 2011 Windows Service.Cache Hits/Sec(Logary.WinPerfCounter.Instance)">
<summary>
 Cache Hits/Sec: Number of report server cache hits per second.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.MSRS 2011 Windows Service.Cache Flushes/Sec(Logary.WinPerfCounter.Instance)">
<summary>
 Cache Flushes/Sec: Number of cache flushes per second.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.MSRS 2011 Windows Service.Active Sessions(Logary.WinPerfCounter.Instance)">
<summary>
 Active Sessions: Number of active sessions.
</summary>
</member>
<member name="T:Logary.WinPerfCounters.MSRS 2011 Windows Service">
<summary>
 MSRS 2011 Windows Service: MSRS 2011 Windows Service

 This performance counter does not have non-instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.MSRS 2011 Web Service.Total Requests(Logary.WinPerfCounter.Instance)">
<summary>
 Total Requests: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.MSRS 2011 Web Service.Total Reports Executed(Logary.WinPerfCounter.Instance)">
<summary>
 Total Reports Executed: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.MSRS 2011 Web Service.Total Rejected Threads(Logary.WinPerfCounter.Instance)">
<summary>
 Total Rejected Threads: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.MSRS 2011 Web Service.Total Processing Failures(Logary.WinPerfCounter.Instance)">
<summary>
 Total Processing Failures: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.MSRS 2011 Web Service.Total Memory Cache Misses(Logary.WinPerfCounter.Instance)">
<summary>
 Total Memory Cache Misses: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.MSRS 2011 Web Service.Total Memory Cache Hits(Logary.WinPerfCounter.Instance)">
<summary>
 Total Memory Cache Hits: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.MSRS 2011 Web Service.Total Cache Misses (Semantic Models)(Logary.WinPerfCounter.Instance)">
<summary>
 Total Cache Misses (Semantic Models): -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.MSRS 2011 Web Service.Total Cache Misses(Logary.WinPerfCounter.Instance)">
<summary>
 Total Cache Misses: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.MSRS 2011 Web Service.Total Cache Hits (Semantic Models)(Logary.WinPerfCounter.Instance)">
<summary>
 Total Cache Hits (Semantic Models): -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.MSRS 2011 Web Service.Total Cache Hits(Logary.WinPerfCounter.Instance)">
<summary>
 Total Cache Hits: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.MSRS 2011 Web Service.Requests/Sec(Logary.WinPerfCounter.Instance)">
<summary>
 Requests/Sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.MSRS 2011 Web Service.Reports Executed/Sec(Logary.WinPerfCounter.Instance)">
<summary>
 Reports Executed/Sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.MSRS 2011 Web Service.Report Requests(Logary.WinPerfCounter.Instance)">
<summary>
 Report Requests: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.MSRS 2011 Web Service.Next Session Requests/Sec(Logary.WinPerfCounter.Instance)">
<summary>
 Next Session Requests/Sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.MSRS 2011 Web Service.Memory Cache Miss/Sec(Logary.WinPerfCounter.Instance)">
<summary>
 Memory Cache Miss/Sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.MSRS 2011 Web Service.Memory Cache Hits/Sec(Logary.WinPerfCounter.Instance)">
<summary>
 Memory Cache Hits/Sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.MSRS 2011 Web Service.First Session Requests/Sec(Logary.WinPerfCounter.Instance)">
<summary>
 First Session Requests/Sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.MSRS 2011 Web Service.Cache Misses/Sec (Semantic Models)(Logary.WinPerfCounter.Instance)">
<summary>
 Cache Misses/Sec (Semantic Models): -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.MSRS 2011 Web Service.Cache Misses/Sec(Logary.WinPerfCounter.Instance)">
<summary>
 Cache Misses/Sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.MSRS 2011 Web Service.Cache Hits/Sec (Semantic Models)(Logary.WinPerfCounter.Instance)">
<summary>
 Cache Hits/Sec (Semantic Models): -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.MSRS 2011 Web Service.Cache Hits/Sec(Logary.WinPerfCounter.Instance)">
<summary>
 Cache Hits/Sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.MSRS 2011 Web Service.Active Sessions(Logary.WinPerfCounter.Instance)">
<summary>
 Active Sessions: -
</summary>
</member>
<member name="T:Logary.WinPerfCounters.MSRS 2011 Web Service">
<summary>
 MSRS 2011 Web Service: MSRS 2011 Web Service

 This performance counter does not have instance based counters
</summary>
</member>
<member name="P:Logary.WinPerfCounters.MSDTC Bridge 4_0_0_0.Replay retry count/sec">
<summary>
 Replay retry count/sec: The number of Replay retry messages that the WS-AT service has sent per second.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.MSDTC Bridge 4_0_0_0.Prepared retry count/sec">
<summary>
 Prepared retry count/sec: The number of Prepared retry messages that the WS-AT service has sent per second.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.MSDTC Bridge 4_0_0_0.Prepare retry count/sec">
<summary>
 Prepare retry count/sec: The number of Prepare retry messages that the WS-AT service has sent per second.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.MSDTC Bridge 4_0_0_0.Message send failures/sec">
<summary>
 Message send failures/sec: The number of WS-AT protocol messages that the WS-AT service failed to send per second.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.MSDTC Bridge 4_0_0_0.Faults sent count/sec">
<summary>
 Faults sent count/sec: The number of Fault messages that the WS-AT service has sent per second.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.MSDTC Bridge 4_0_0_0.Faults received count/sec">
<summary>
 Faults received count/sec: The number of Fault messages that the WS-AT service has received per second.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.MSDTC Bridge 4_0_0_0.Commit retry count/sec">
<summary>
 Commit retry count/sec: The number of Commit retry messages that the WS-AT service has sent per second.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.MSDTC Bridge 4_0_0_0.Average participant prepare response time Base">
<summary>
 Average participant prepare response time Base: Base counter for the &apos;Average participant prepare response time&apos; counter.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.MSDTC Bridge 4_0_0_0.Average participant prepare response time">
<summary>
 Average participant prepare response time: Average time in milliseconds for the WS-AT service to receive a Prepare message response from a participant.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.MSDTC Bridge 4_0_0_0.Average participant commit response time Base">
<summary>
 Average participant commit response time Base: Base counter for the &apos;Average participant commit response time&apos; counter.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.MSDTC Bridge 4_0_0_0.Average participant commit response time">
<summary>
 Average participant commit response time: Average time in milliseconds for the WS-AT service to receive a Commit message response from a participant.
</summary>
</member>
<member name="T:Logary.WinPerfCounters.MSDTC Bridge 4_0_0_0">
<summary>
 MSDTC Bridge 4.0.0.0: MSDTC Bridge 4.0.0.0 performance counters

 This performance counter does not have instance based counters
</summary>
</member>
<member name="P:Logary.WinPerfCounters.MSDTC Bridge 3_0_0_0.Replay retry count/sec">
<summary>
 Replay retry count/sec: The number of Replay retry messages that the WS-AT service has sent per second.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.MSDTC Bridge 3_0_0_0.Prepared retry count/sec">
<summary>
 Prepared retry count/sec: The number of Prepared retry messages that the WS-AT service has sent per second.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.MSDTC Bridge 3_0_0_0.Prepare retry count/sec">
<summary>
 Prepare retry count/sec: The number of Prepare retry messages that the WS-AT service has sent per second.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.MSDTC Bridge 3_0_0_0.Message send failures/sec">
<summary>
 Message send failures/sec: The number of WS-AT protocol messages that the WS-AT service failed to send per second.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.MSDTC Bridge 3_0_0_0.Faults sent count/sec">
<summary>
 Faults sent count/sec: The number of Fault messages that the WS-AT service has sent per second.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.MSDTC Bridge 3_0_0_0.Faults received count/sec">
<summary>
 Faults received count/sec: The number of Fault messages that the WS-AT service has received per second.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.MSDTC Bridge 3_0_0_0.Commit retry count/sec">
<summary>
 Commit retry count/sec: The number of Commit retry messages that the WS-AT service has sent per second.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.MSDTC Bridge 3_0_0_0.Average participant prepare response time Base">
<summary>
 Average participant prepare response time Base: Base counter for the &apos;Average participant prepare response time&apos; counter.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.MSDTC Bridge 3_0_0_0.Average participant prepare response time">
<summary>
 Average participant prepare response time: Average time in milliseconds for the WS-AT service to receive a Prepare message response from a participant.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.MSDTC Bridge 3_0_0_0.Average participant commit response time Base">
<summary>
 Average participant commit response time Base: Base counter for the &apos;Average participant commit response time&apos; counter.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.MSDTC Bridge 3_0_0_0.Average participant commit response time">
<summary>
 Average participant commit response time: Average time in milliseconds for the WS-AT service to receive a Commit message response from a participant.
</summary>
</member>
<member name="T:Logary.WinPerfCounters.MSDTC Bridge 3_0_0_0">
<summary>
 MSDTC Bridge 3.0.0.0: MSDTC Bridge 3.0.0.0 performance counters

 This performance counter does not have instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.LogicalDisk.Split IO/Sec(Logary.WinPerfCounter.Instance)">
<summary>
 Split IO/Sec: Split IO/Sec reports the rate at which I/Os to the disk were split into multiple I/Os. A split I/O may result from requesting data of a size that is too large to fit into a single I/O or that the disk is fragmented.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.LogicalDisk.Free Megabytes(Logary.WinPerfCounter.Instance)">
<summary>
 Free Megabytes: Free Megabytes displays the unallocated space, in megabytes, on the disk drive in megabytes. One megabyte is equal to 1,048,576 bytes.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.LogicalDisk.Disk Writes/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Disk Writes/sec: Disk Writes/sec is the rate of write operations on the disk.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.LogicalDisk.Disk Write Bytes/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Disk Write Bytes/sec: Disk Write Bytes/sec is rate at which bytes are transferred to the disk during write operations.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.LogicalDisk.Disk Transfers/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Disk Transfers/sec: Disk Transfers/sec is the rate of read and write operations on the disk.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.LogicalDisk.Disk Reads/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Disk Reads/sec: Disk Reads/sec is the rate of read operations on the disk.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.LogicalDisk.Disk Read Bytes/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Disk Read Bytes/sec: Disk Read Bytes/sec is the rate at which bytes are transferred from the disk during read operations.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.LogicalDisk.Disk Bytes/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Disk Bytes/sec: Disk Bytes/sec is the rate bytes are transferred to or from the disk during write or read operations.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.LogicalDisk.Current Disk Queue Length(Logary.WinPerfCounter.Instance)">
<summary>
 Current Disk Queue Length: Current Disk Queue Length is the number of requests outstanding on the disk at the time the performance data is collected. It also includes requests in service at the time of the collection. This is a instantaneous snapshot, not an average over the time interval. Multi-spindle disk devices can have multiple requests that are active at one time, but other concurrent requests are awaiting service. This counter might reflect a transitory high or low queue length, but if there is a sustained load on the disk drive, it is likely that this will be consistently high. Requests experience delays proportional to the length of this queue minus the number of spindles on the disks. For good performance, this difference should average less than two.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.LogicalDisk.Avg. Disk sec/Write(Logary.WinPerfCounter.Instance)">
<summary>
 Avg. Disk sec/Write: Avg. Disk sec/Write is the average time, in seconds, of a write of data to the disk.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.LogicalDisk.Avg. Disk sec/Transfer(Logary.WinPerfCounter.Instance)">
<summary>
 Avg. Disk sec/Transfer: Avg. Disk sec/Transfer is the time, in seconds, of the average disk transfer.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.LogicalDisk.Avg. Disk sec/Read(Logary.WinPerfCounter.Instance)">
<summary>
 Avg. Disk sec/Read: Avg. Disk sec/Read is the average time, in seconds, of a read of data from the disk.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.LogicalDisk.Avg. Disk Write Queue Length(Logary.WinPerfCounter.Instance)">
<summary>
 Avg. Disk Write Queue Length: Avg. Disk Write Queue Length is the average number of write requests that were queued for the selected disk during the sample interval.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.LogicalDisk.Avg. Disk Read Queue Length(Logary.WinPerfCounter.Instance)">
<summary>
 Avg. Disk Read Queue Length: Avg. Disk Read Queue Length is the average number of read requests that were queued for the selected disk during the sample interval.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.LogicalDisk.Avg. Disk Queue Length(Logary.WinPerfCounter.Instance)">
<summary>
 Avg. Disk Queue Length: Avg. Disk Queue Length is the average number of both read and write requests that were queued for the selected disk during the sample interval.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.LogicalDisk.Avg. Disk Bytes/Write(Logary.WinPerfCounter.Instance)">
<summary>
 Avg. Disk Bytes/Write: Avg. Disk Bytes/Write is the average number of bytes transferred to the disk during write operations.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.LogicalDisk.Avg. Disk Bytes/Transfer(Logary.WinPerfCounter.Instance)">
<summary>
 Avg. Disk Bytes/Transfer: Avg. Disk Bytes/Transfer is the average number of bytes transferred to or from the disk during write or read operations.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.LogicalDisk.Avg. Disk Bytes/Read(Logary.WinPerfCounter.Instance)">
<summary>
 Avg. Disk Bytes/Read: Avg. Disk Bytes/Read is the average number of bytes transferred from the disk during read operations.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.LogicalDisk.% Idle Time(Logary.WinPerfCounter.Instance)">
<summary>
 % Idle Time: % Idle Time reports the percentage of time during the sample interval that the disk was idle.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.LogicalDisk.% Free Space(Logary.WinPerfCounter.Instance)">
<summary>
 % Free Space: % Free Space is the percentage of total usable space on the selected logical disk drive that was free.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.LogicalDisk.% Disk Write Time(Logary.WinPerfCounter.Instance)">
<summary>
 % Disk Write Time: % Disk Write Time is the percentage of elapsed time that the selected disk drive was busy servicing write requests.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.LogicalDisk.% Disk Time(Logary.WinPerfCounter.Instance)">
<summary>
 % Disk Time: % Disk Time is the percentage of elapsed time that the selected disk drive was busy servicing read or write requests.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.LogicalDisk.% Disk Read Time(Logary.WinPerfCounter.Instance)">
<summary>
 % Disk Read Time: % Disk Read Time is the percentage of elapsed time that the selected disk drive was busy servicing read requests.
</summary>
</member>
<member name="T:Logary.WinPerfCounters.LogicalDisk">
<summary>
 LogicalDisk: The Logical Disk performance object consists of counters that monitor logical partitions of a hard or fixed disk drives.  Performance Monitor identifies logical disks by their a drive letter, such as C.

 This performance counter does not have non-instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Job Object Details.Working Set Peak(Logary.WinPerfCounter.Instance)">
<summary>
 Working Set Peak: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Job Object Details.Working Set(Logary.WinPerfCounter.Instance)">
<summary>
 Working Set: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Job Object Details.Virtual Bytes Peak(Logary.WinPerfCounter.Instance)">
<summary>
 Virtual Bytes Peak: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Job Object Details.Virtual Bytes(Logary.WinPerfCounter.Instance)">
<summary>
 Virtual Bytes: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Job Object Details.Thread Count(Logary.WinPerfCounter.Instance)">
<summary>
 Thread Count: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Job Object Details.Private Bytes(Logary.WinPerfCounter.Instance)">
<summary>
 Private Bytes: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Job Object Details.Priority Base(Logary.WinPerfCounter.Instance)">
<summary>
 Priority Base: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Job Object Details.Pool Paged Bytes(Logary.WinPerfCounter.Instance)">
<summary>
 Pool Paged Bytes: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Job Object Details.Pool Nonpaged Bytes(Logary.WinPerfCounter.Instance)">
<summary>
 Pool Nonpaged Bytes: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Job Object Details.Page File Bytes Peak(Logary.WinPerfCounter.Instance)">
<summary>
 Page File Bytes Peak: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Job Object Details.Page File Bytes(Logary.WinPerfCounter.Instance)">
<summary>
 Page File Bytes: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Job Object Details.Page Faults/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Page Faults/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Job Object Details.IO Write Operations/sec(Logary.WinPerfCounter.Instance)">
<summary>
 IO Write Operations/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Job Object Details.IO Write Bytes/sec(Logary.WinPerfCounter.Instance)">
<summary>
 IO Write Bytes/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Job Object Details.IO Read Operations/sec(Logary.WinPerfCounter.Instance)">
<summary>
 IO Read Operations/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Job Object Details.IO Read Bytes/sec(Logary.WinPerfCounter.Instance)">
<summary>
 IO Read Bytes/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Job Object Details.IO Other Operations/sec(Logary.WinPerfCounter.Instance)">
<summary>
 IO Other Operations/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Job Object Details.IO Other Bytes/sec(Logary.WinPerfCounter.Instance)">
<summary>
 IO Other Bytes/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Job Object Details.IO Data Operations/sec(Logary.WinPerfCounter.Instance)">
<summary>
 IO Data Operations/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Job Object Details.IO Data Bytes/sec(Logary.WinPerfCounter.Instance)">
<summary>
 IO Data Bytes/sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Job Object Details.ID Process(Logary.WinPerfCounter.Instance)">
<summary>
 ID Process: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Job Object Details.Handle Count(Logary.WinPerfCounter.Instance)">
<summary>
 Handle Count: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Job Object Details.Elapsed Time(Logary.WinPerfCounter.Instance)">
<summary>
 Elapsed Time: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Job Object Details.Creating Process ID(Logary.WinPerfCounter.Instance)">
<summary>
 Creating Process ID: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Job Object Details.% User Time(Logary.WinPerfCounter.Instance)">
<summary>
 % User Time: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Job Object Details.% Processor Time(Logary.WinPerfCounter.Instance)">
<summary>
 % Processor Time: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Job Object Details.% Privileged Time(Logary.WinPerfCounter.Instance)">
<summary>
 % Privileged Time: -
</summary>
</member>
<member name="T:Logary.WinPerfCounters.Job Object Details">
<summary>
 Job Object Details: % Job object Details shows detailed performance information about the active processes that make up a Job object.

 This performance counter does not have instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Job Object.Total mSec - User Mode(Logary.WinPerfCounter.Instance)">
<summary>
 Total mSec - User Mode: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Job Object.Total mSec - Processor(Logary.WinPerfCounter.Instance)">
<summary>
 Total mSec - Processor: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Job Object.Total mSec - Kernel Mode(Logary.WinPerfCounter.Instance)">
<summary>
 Total mSec - Kernel Mode: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Job Object.This Period mSec - User Mode(Logary.WinPerfCounter.Instance)">
<summary>
 This Period mSec - User Mode: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Job Object.This Period mSec - Processor(Logary.WinPerfCounter.Instance)">
<summary>
 This Period mSec - Processor: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Job Object.This Period mSec - Kernel Mode(Logary.WinPerfCounter.Instance)">
<summary>
 This Period mSec - Kernel Mode: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Job Object.Process Count - Total(Logary.WinPerfCounter.Instance)">
<summary>
 Process Count - Total: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Job Object.Process Count - Terminated(Logary.WinPerfCounter.Instance)">
<summary>
 Process Count - Terminated: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Job Object.Process Count - Active(Logary.WinPerfCounter.Instance)">
<summary>
 Process Count - Active: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Job Object.Pages/Sec(Logary.WinPerfCounter.Instance)">
<summary>
 Pages/Sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Job Object.Current % User Mode Time(Logary.WinPerfCounter.Instance)">
<summary>
 Current % User Mode Time: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Job Object.Current % Processor Time(Logary.WinPerfCounter.Instance)">
<summary>
 Current % Processor Time: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Job Object.Current % Kernel Mode Time(Logary.WinPerfCounter.Instance)">
<summary>
 Current % Kernel Mode Time: -
</summary>
</member>
<member name="T:Logary.WinPerfCounters.Job Object">
<summary>
 Job Object: Reports the accounting and processor usage data collected by each active named Job object.

 This performance counter does not have instance based counters
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPv6.Fragments Received/sec">
<summary>
 Fragments Received/sec: Fragments Received/sec is the rate, in incidents per second, at which IP fragments that need to be reassembled at this entity are received.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPv6.Fragments Re-assembled/sec">
<summary>
 Fragments Re-assembled/sec: Fragments Re-assembled/sec is the rate, in incidents per second, at which IP fragments were successfully reassembled.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPv6.Fragments Created/sec">
<summary>
 Fragments Created/sec: Fragments Created/sec is the rate, in incidents per second, at which IP datagram fragments were generated as a result of fragmentation.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPv6.Fragmented Datagrams/sec">
<summary>
 Fragmented Datagrams/sec: Fragmented Datagrams/sec is the rate, in incidents per second, at which datagrams are successfully fragmented.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPv6.Fragmentation Failures">
<summary>
 Fragmentation Failures: Fragmentation Failures is the number of IP datagrams that were discarded because they needed to be fragmented at but could not be (for example, because the `Don&apos;t Fragment&apos; flag was set).
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPv6.Fragment Re-assembly Failures">
<summary>
 Fragment Re-assembly Failures: Fragment Re-assembly Failures is the number of failures detected by the IP reassembly algorithm, such as time outs, errors, etc.  This is not necessarily a count of discarded IP fragments since some algorithms (notably RFC 815) lose track of the number of fragments by combining them as they are received.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPv6.Datagrams/sec">
<summary>
 Datagrams/sec: Datagrams/sec is the rate, in incidents per second, at which IP datagrams were received from or sent to the interfaces, including those in error. Forwarded datagrams are not included in this rate.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPv6.Datagrams Sent/sec">
<summary>
 Datagrams Sent/sec: Datagrams Sent/sec is the rate, in incidents per second, at which IP datagrams were supplied for transmission by local IP user-protocols (including ICMP). This counter does not include any datagrams counted in Datagrams Forwarded/sec. Datagrams Sent/sec is a subset of Datagrams/sec.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPv6.Datagrams Received/sec">
<summary>
 Datagrams Received/sec: Datagrams Received/sec is the rate, in incidents per second, at which IP datagrams are received from the interfaces, including those in error. Datagrams Received/sec is a subset of Datagrams/sec.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPv6.Datagrams Received Unknown Protocol">
<summary>
 Datagrams Received Unknown Protocol: Datagrams Received Unknown Protocol is the number of locally-addressed datagrams that were successfully received but were discarded because of an unknown or unsupported protocol.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPv6.Datagrams Received Header Errors">
<summary>
 Datagrams Received Header Errors: Datagrams Received Header Errors is the number of input datagrams that were discarded due to errors in the IP headers, including bad checksums, version number mismatch, other format errors, time-to-live exceeded, errors discovered in processing their IP options, etc.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPv6.Datagrams Received Discarded">
<summary>
 Datagrams Received Discarded: Datagrams Received Discarded is the number of input IP datagrams that were discarded even though problems prevented their continued processing (for example, lack of buffer space). This counter does not include any datagrams discarded while awaiting re-assembly.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPv6.Datagrams Received Delivered/sec">
<summary>
 Datagrams Received Delivered/sec: Datagrams Received Delivered/sec is the rate, in incidents per second, at which input datagrams were successfully delivered to IP user-protocols, including Internet Control Message Protocol (ICMP).
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPv6.Datagrams Received Address Errors">
<summary>
 Datagrams Received Address Errors: Datagrams Received Address Errors is the number of input datagrams that were discarded because the IP address in their IP header destination field was not valid for the computer. This count includes invalid addresses (for example, 0.0.  0.0) and addresses of unsupported Classes (for example, Class E). For entities that are not IP gateways and do not forward datagrams, this counter includes datagrams that were discarded because the destination address was not a local address.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPv6.Datagrams Outbound No Route">
<summary>
 Datagrams Outbound No Route: Datagrams Outbound No Route is the number of IP datagrams that were discarded because no route could be found to transmit them to their destination.  This counter includes any packets counted in Datagrams Forwarded/sec that meet this `no route&apos; criterion.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPv6.Datagrams Outbound Discarded">
<summary>
 Datagrams Outbound Discarded: Datagrams Outbound Discarded is the number of output IP datagrams that were discarded even though no problems were encountered to prevent their transmission to their destination (for example, lack of buffer space). This counter includes datagrams counted in Datagrams Forwarded/sec that meet this criterion.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPv6.Datagrams Forwarded/sec">
<summary>
 Datagrams Forwarded/sec: Datagrams Forwarded/sec is the rate, in incidents per second, at which attemps were made to find routes to forward input datagrams their final destination, because the local server was not the final IP destination. In servers that do not act as IP Gateways, this rate includes only packets that were source-routed via this entity, where the source-route option processing was successful.
</summary>
</member>
<member name="T:Logary.WinPerfCounters.IPv6">
<summary>
 IPv6: The IP performance object consists of counters that measure the rates at which IP datagrams are sent and received by using IP protocols.  It also includes counters that monitor IP protocol errors.

 This performance counter does not have instance based counters
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPv4.Fragments Received/sec">
<summary>
 Fragments Received/sec: Fragments Received/sec is the rate, in incidents per second, at which IP fragments that need to be reassembled at this entity are received.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPv4.Fragments Re-assembled/sec">
<summary>
 Fragments Re-assembled/sec: Fragments Re-assembled/sec is the rate, in incidents per second, at which IP fragments were successfully reassembled.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPv4.Fragments Created/sec">
<summary>
 Fragments Created/sec: Fragments Created/sec is the rate, in incidents per second, at which IP datagram fragments were generated as a result of fragmentation.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPv4.Fragmented Datagrams/sec">
<summary>
 Fragmented Datagrams/sec: Fragmented Datagrams/sec is the rate, in incidents per second, at which datagrams are successfully fragmented.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPv4.Fragmentation Failures">
<summary>
 Fragmentation Failures: Fragmentation Failures is the number of IP datagrams that were discarded because they needed to be fragmented at but could not be (for example, because the `Don&apos;t Fragment&apos; flag was set).
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPv4.Fragment Re-assembly Failures">
<summary>
 Fragment Re-assembly Failures: Fragment Re-assembly Failures is the number of failures detected by the IP reassembly algorithm, such as time outs, errors, etc.  This is not necessarily a count of discarded IP fragments since some algorithms (notably RFC 815) lose track of the number of fragments by combining them as they are received.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPv4.Datagrams/sec">
<summary>
 Datagrams/sec: Datagrams/sec is the rate, in incidents per second, at which IP datagrams were received from or sent to the interfaces, including those in error. Forwarded datagrams are not included in this rate.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPv4.Datagrams Sent/sec">
<summary>
 Datagrams Sent/sec: Datagrams Sent/sec is the rate, in incidents per second, at which IP datagrams were supplied for transmission by local IP user-protocols (including ICMP). This counter does not include any datagrams counted in Datagrams Forwarded/sec. Datagrams Sent/sec is a subset of Datagrams/sec.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPv4.Datagrams Received/sec">
<summary>
 Datagrams Received/sec: Datagrams Received/sec is the rate, in incidents per second, at which IP datagrams are received from the interfaces, including those in error. Datagrams Received/sec is a subset of Datagrams/sec.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPv4.Datagrams Received Unknown Protocol">
<summary>
 Datagrams Received Unknown Protocol: Datagrams Received Unknown Protocol is the number of locally-addressed datagrams that were successfully received but were discarded because of an unknown or unsupported protocol.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPv4.Datagrams Received Header Errors">
<summary>
 Datagrams Received Header Errors: Datagrams Received Header Errors is the number of input datagrams that were discarded due to errors in the IP headers, including bad checksums, version number mismatch, other format errors, time-to-live exceeded, errors discovered in processing their IP options, etc.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPv4.Datagrams Received Discarded">
<summary>
 Datagrams Received Discarded: Datagrams Received Discarded is the number of input IP datagrams that were discarded even though problems prevented their continued processing (for example, lack of buffer space). This counter does not include any datagrams discarded while awaiting re-assembly.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPv4.Datagrams Received Delivered/sec">
<summary>
 Datagrams Received Delivered/sec: Datagrams Received Delivered/sec is the rate, in incidents per second, at which input datagrams were successfully delivered to IP user-protocols, including Internet Control Message Protocol (ICMP).
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPv4.Datagrams Received Address Errors">
<summary>
 Datagrams Received Address Errors: Datagrams Received Address Errors is the number of input datagrams that were discarded because the IP address in their IP header destination field was not valid for the computer. This count includes invalid addresses (for example, 0.0.  0.0) and addresses of unsupported Classes (for example, Class E). For entities that are not IP gateways and do not forward datagrams, this counter includes datagrams that were discarded because the destination address was not a local address.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPv4.Datagrams Outbound No Route">
<summary>
 Datagrams Outbound No Route: Datagrams Outbound No Route is the number of IP datagrams that were discarded because no route could be found to transmit them to their destination.  This counter includes any packets counted in Datagrams Forwarded/sec that meet this `no route&apos; criterion.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPv4.Datagrams Outbound Discarded">
<summary>
 Datagrams Outbound Discarded: Datagrams Outbound Discarded is the number of output IP datagrams that were discarded even though no problems were encountered to prevent their transmission to their destination (for example, lack of buffer space). This counter includes datagrams counted in Datagrams Forwarded/sec that meet this criterion.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPv4.Datagrams Forwarded/sec">
<summary>
 Datagrams Forwarded/sec: Datagrams Forwarded/sec is the rate, in incidents per second, at which attemps were made to find routes to forward input datagrams their final destination, because the local server was not the final IP destination. In servers that do not act as IP Gateways, this rate includes only packets that were source-routed via this entity, where the source-route option processing was successful.
</summary>
</member>
<member name="T:Logary.WinPerfCounters.IPv4">
<summary>
 IPv4: The IP performance object consists of counters that measure the rates at which IP datagrams are sent and received by using IP protocols.  It also includes counters that monitor IP protocol errors.

 This performance counter does not have instance based counters
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec IKEv2 IPv6.Successful Quick Mode Negotiations/sec">
<summary>
 Successful Quick Mode Negotiations/sec: Successful Quick Mode Negotiations per Second is the rate of quick mode negotiations completed.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec IKEv2 IPv6.Successful Quick Mode Negotiations">
<summary>
 Successful Quick Mode Negotiations: Successful Quick Mode Negotiations is the number of quick mode negotiations completed since IPsec was last started.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec IKEv2 IPv6.Successful Main Mode Negotiations/sec">
<summary>
 Successful Main Mode Negotiations/sec: Successful Main Mode Negotiations per Second is the rate of main mode negotiations completed.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec IKEv2 IPv6.Successful Main Mode Negotiations">
<summary>
 Successful Main Mode Negotiations: Successful Main Mode Negotiations is the number of main mode negotiations completed since IPsec was last started.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec IKEv2 IPv6.Quick Mode Negotiations/sec">
<summary>
 Quick Mode Negotiations/sec: Quick Mode Negotiations per Second is the rate at which quick mode negotiations are being attempted.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec IKEv2 IPv6.Quick Mode Negotiations">
<summary>
 Quick Mode Negotiations: Quick Mode Negotiations is the number of quick mode negotiations attempted since IPsec was last started.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec IKEv2 IPv6.Pending Quick Mode Negotiations">
<summary>
 Pending Quick Mode Negotiations: Pending Quick Mode Negotiations is the number of pending quick mode negotiations.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec IKEv2 IPv6.Pending Main Mode Negotiations">
<summary>
 Pending Main Mode Negotiations: Pending Main Mode Negotiations is the number of pending main mode negotiations.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec IKEv2 IPv6.Main Mode Negotiations/sec">
<summary>
 Main Mode Negotiations/sec: Main Mode Negotiations per Second is the rate at which main mode negotiations are being attempted.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec IKEv2 IPv6.Main Mode Negotiations">
<summary>
 Main Mode Negotiations: Main Mode Negotiations is the number of main mode negotiations attempted since IPsec was last started.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec IKEv2 IPv6.Main Mode Negotiation Requests Received/sec">
<summary>
 Main Mode Negotiation Requests Received/sec: Main Mode Negotiation Requests Received per Second is the rate of main mode negotiations initiated by a peer.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec IKEv2 IPv6.Main Mode Negotiation Requests Received">
<summary>
 Main Mode Negotiation Requests Received: Main Mode Negotiation Requests Received is the number of main mode negotiations initiated by a peer since IPsec was last started.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec IKEv2 IPv6.Failed Quick Mode Negotiations/sec">
<summary>
 Failed Quick Mode Negotiations/sec: Failed Quick Mode Negotiations per Second is the rate of failed quick mode negotiations.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec IKEv2 IPv6.Failed Quick Mode Negotiations">
<summary>
 Failed Quick Mode Negotiations: Failed Quick Mode Negotiations is the number of failed quick mode negotiations since IPsec was last started.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec IKEv2 IPv6.Failed Main Mode Negotiations/sec">
<summary>
 Failed Main Mode Negotiations/sec: Failed Main Mode Negotiations per Second is the rate of failed main mode negotiations.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec IKEv2 IPv6.Failed Main Mode Negotiations">
<summary>
 Failed Main Mode Negotiations: Failed Main Mode Negotiations is the number of failed main mode negotiations since IPsec was last started.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec IKEv2 IPv6.Active Quick Mode SAs">
<summary>
 Active Quick Mode SAs: Active Quick Mode SAs is the number of currently active quick mode security associations.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec IKEv2 IPv6.Active Main Mode SAs">
<summary>
 Active Main Mode SAs: Active Main Mode SAs is the number of currently active main mode security associations.
</summary>
</member>
<member name="T:Logary.WinPerfCounters.IPsec IKEv2 IPv6">
<summary>
 IPsec IKEv2 IPv6: IPsec IKEv2 IPv6 is the set of Internet Protocol security (IPsec) Internet Key Exchange version 2 (IKEv2) counters that apply to traffic and connections over Internet Protocol version 6.

 This performance counter does not have instance based counters
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec IKEv2 IPv4.Successful Quick Mode Negotiations/sec">
<summary>
 Successful Quick Mode Negotiations/sec: Successful Quick Mode Negotiations per Second is the rate of quick mode negotiations completed.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec IKEv2 IPv4.Successful Quick Mode Negotiations">
<summary>
 Successful Quick Mode Negotiations: Successful Quick Mode Negotiations is the number of quick mode negotiations completed since IPsec was last started.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec IKEv2 IPv4.Successful Main Mode Negotiations/sec">
<summary>
 Successful Main Mode Negotiations/sec: Successful Main Mode Negotiations per Second is the rate of main mode negotiations completed.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec IKEv2 IPv4.Successful Main Mode Negotiations">
<summary>
 Successful Main Mode Negotiations: Successful Main Mode Negotiations is the number of main mode negotiations completed since IPsec was last started.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec IKEv2 IPv4.Quick Mode Negotiations/sec">
<summary>
 Quick Mode Negotiations/sec: Quick Mode Negotiations per Second is the rate at which quick mode negotiations are being attempted.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec IKEv2 IPv4.Quick Mode Negotiations">
<summary>
 Quick Mode Negotiations: Quick Mode Negotiations is the number of quick mode negotiations attempted since IPsec was last started.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec IKEv2 IPv4.Pending Quick Mode Negotiations">
<summary>
 Pending Quick Mode Negotiations: Pending Quick Mode Negotiations is the number of pending quick mode negotiations.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec IKEv2 IPv4.Pending Main Mode Negotiations">
<summary>
 Pending Main Mode Negotiations: Pending Main Mode Negotiations is the number of pending main mode negotiations.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec IKEv2 IPv4.Main Mode Negotiations/sec">
<summary>
 Main Mode Negotiations/sec: Main Mode Negotiations per Second is the rate at which main mode negotiations are being attempted.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec IKEv2 IPv4.Main Mode Negotiations">
<summary>
 Main Mode Negotiations: Main Mode Negotiations is the number of main mode negotiations attempted since IPsec was last started.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec IKEv2 IPv4.Main Mode Negotiation Requests Received/sec">
<summary>
 Main Mode Negotiation Requests Received/sec: Main Mode Negotiation Requests Received per Second is the rate of main mode negotiations initiated by a peer.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec IKEv2 IPv4.Main Mode Negotiation Requests Received">
<summary>
 Main Mode Negotiation Requests Received: Main Mode Negotiation Requests Received is the number of main mode negotiations initiated by a peer since IPsec was last started.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec IKEv2 IPv4.Failed Quick Mode Negotiations/sec">
<summary>
 Failed Quick Mode Negotiations/sec: Failed Quick Mode Negotiations per Second is the rate of failed quick mode negotiations.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec IKEv2 IPv4.Failed Quick Mode Negotiations">
<summary>
 Failed Quick Mode Negotiations: Failed Quick Mode Negotiations is the number of failed quick mode negotiations since IPsec was last started.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec IKEv2 IPv4.Failed Main Mode Negotiations/sec">
<summary>
 Failed Main Mode Negotiations/sec: Failed Main Mode Negotiations per Second is the rate of failed main mode negotiations.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec IKEv2 IPv4.Failed Main Mode Negotiations">
<summary>
 Failed Main Mode Negotiations: Failed Main Mode Negotiations is the number of failed main mode negotiations since IPsec was last started.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec IKEv2 IPv4.Active Quick Mode SAs">
<summary>
 Active Quick Mode SAs: Active Quick Mode SAs is the number of currently active quick mode security associations.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec IKEv2 IPv4.Active Main Mode SAs">
<summary>
 Active Main Mode SAs: Active Main Mode SAs is the number of currently active main mode security associations.
</summary>
</member>
<member name="T:Logary.WinPerfCounters.IPsec IKEv2 IPv4">
<summary>
 IPsec IKEv2 IPv4: IPsec IKEv2 IPv4 is the set of Internet Protocol security (IPsec) Internet Key Exchange version 2 (IKEv2) counters that apply to traffic and connections over Internet Protocol version 4.

 This performance counter does not have instance based counters
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec IKEv1 IPv6.Successful Quick Mode Negotiations/sec">
<summary>
 Successful Quick Mode Negotiations/sec: Successful Quick Mode Negotiations per Second is the rate of quick mode negotiations completed.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec IKEv1 IPv6.Successful Quick Mode Negotiations">
<summary>
 Successful Quick Mode Negotiations: Successful Quick Mode Negotiations is the number of quick mode negotiations completed since IPsec was last started.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec IKEv1 IPv6.Successful Main Mode Negotiations/sec">
<summary>
 Successful Main Mode Negotiations/sec: Successful Main Mode Negotiations per Second is the rate of main mode negotiations completed.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec IKEv1 IPv6.Successful Main Mode Negotiations">
<summary>
 Successful Main Mode Negotiations: Successful Main Mode Negotiations is the number of main mode negotiations completed since IPsec was last started.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec IKEv1 IPv6.Quick Mode Negotiations/sec">
<summary>
 Quick Mode Negotiations/sec: Quick Mode Negotiations per Second is the rate at which quick mode negotiations are being attempted.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec IKEv1 IPv6.Quick Mode Negotiations">
<summary>
 Quick Mode Negotiations: Quick Mode Negotiations is the number of quick mode negotiations attempted since IPsec was last started.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec IKEv1 IPv6.Pending Quick Mode Negotiations">
<summary>
 Pending Quick Mode Negotiations: Pending Quick Mode Negotiations is the number of pending quick mode negotiations.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec IKEv1 IPv6.Pending Main Mode Negotiations">
<summary>
 Pending Main Mode Negotiations: Pending Main Mode Negotiations is the number of pending main mode negotiations.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec IKEv1 IPv6.Main Mode Negotiations/sec">
<summary>
 Main Mode Negotiations/sec: Main Mode Negotiations per Second is the rate at which main mode negotiations are being attempted.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec IKEv1 IPv6.Main Mode Negotiations">
<summary>
 Main Mode Negotiations: Main Mode Negotiations is the number of main mode negotiations attempted since IPsec was last started.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec IKEv1 IPv6.Main Mode Negotiation Requests Received/sec">
<summary>
 Main Mode Negotiation Requests Received/sec: Main Mode Negotiation Requests Received per Second is the rate of main mode negotiations initiated by a peer.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec IKEv1 IPv6.Main Mode Negotiation Requests Received">
<summary>
 Main Mode Negotiation Requests Received: Main Mode Negotiation Requests Received is the number of main mode negotiations initiated by a peer since IPsec was last started.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec IKEv1 IPv6.Failed Quick Mode Negotiations/sec">
<summary>
 Failed Quick Mode Negotiations/sec: Failed Quick Mode Negotiations per Second is the rate of failed quick mode negotiations.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec IKEv1 IPv6.Failed Quick Mode Negotiations">
<summary>
 Failed Quick Mode Negotiations: Failed Quick Mode Negotiations is the number of failed quick mode negotiations since IPsec was last started.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec IKEv1 IPv6.Failed Main Mode Negotiations/sec">
<summary>
 Failed Main Mode Negotiations/sec: Failed Main Mode Negotiations per Second is the rate of failed main mode negotiations.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec IKEv1 IPv6.Failed Main Mode Negotiations">
<summary>
 Failed Main Mode Negotiations: Failed Main Mode Negotiations is the number of failed main mode negotiations since IPsec was last started.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec IKEv1 IPv6.Active Quick Mode SAs">
<summary>
 Active Quick Mode SAs: Active Quick Mode SAs is the number of currently active quick mode security associations.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec IKEv1 IPv6.Active Main Mode SAs">
<summary>
 Active Main Mode SAs: Active Main Mode SAs is the number of currently active main mode security associations.
</summary>
</member>
<member name="T:Logary.WinPerfCounters.IPsec IKEv1 IPv6">
<summary>
 IPsec IKEv1 IPv6: IPsec IKEv1 IPv6 is the set of Internet Protocol security (IPsec) Internet Key Exchange version 1 (IKEv1) counters that apply to traffic and connections over Internet Protocol version 6.

 This performance counter does not have instance based counters
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec IKEv1 IPv4.Successful Quick Mode Negotiations/sec">
<summary>
 Successful Quick Mode Negotiations/sec: Successful Quick Mode Negotiations per Second is the rate of quick mode negotiations completed.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec IKEv1 IPv4.Successful Quick Mode Negotiations">
<summary>
 Successful Quick Mode Negotiations: Successful Quick Mode Negotiations is the number of quick mode negotiations completed since IPsec was last started.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec IKEv1 IPv4.Successful Main Mode Negotiations/sec">
<summary>
 Successful Main Mode Negotiations/sec: Successful Main Mode Negotiations per Second is the rate of main mode negotiations completed.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec IKEv1 IPv4.Successful Main Mode Negotiations">
<summary>
 Successful Main Mode Negotiations: Successful Main Mode Negotiations is the number of main mode negotiations completed since IPsec was last started.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec IKEv1 IPv4.Quick Mode Negotiations/sec">
<summary>
 Quick Mode Negotiations/sec: Quick Mode Negotiations per Second is the rate at which quick mode negotiations are being attempted.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec IKEv1 IPv4.Quick Mode Negotiations">
<summary>
 Quick Mode Negotiations: Quick Mode Negotiations is the number of quick mode negotiations attempted since IPsec was last started.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec IKEv1 IPv4.Pending Quick Mode Negotiations">
<summary>
 Pending Quick Mode Negotiations: Pending Quick Mode Negotiations is the number of pending quick mode negotiations.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec IKEv1 IPv4.Pending Main Mode Negotiations">
<summary>
 Pending Main Mode Negotiations: Pending Main Mode Negotiations is the number of pending main mode negotiations.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec IKEv1 IPv4.Main Mode Negotiations/sec">
<summary>
 Main Mode Negotiations/sec: Main Mode Negotiations per Second is the rate at which main mode negotiations are being attempted.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec IKEv1 IPv4.Main Mode Negotiations">
<summary>
 Main Mode Negotiations: Main Mode Negotiations is the number of main mode negotiations attempted since IPsec was last started.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec IKEv1 IPv4.Main Mode Negotiation Requests Received/sec">
<summary>
 Main Mode Negotiation Requests Received/sec: Main Mode Negotiation Requests Received per Second is the rate of main mode negotiations initiated by a peer.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec IKEv1 IPv4.Main Mode Negotiation Requests Received">
<summary>
 Main Mode Negotiation Requests Received: Main Mode Negotiation Requests Received is the number of main mode negotiations initiated by a peer since IPsec was last started.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec IKEv1 IPv4.Failed Quick Mode Negotiations/sec">
<summary>
 Failed Quick Mode Negotiations/sec: Failed Quick Mode Negotiations per Second is the rate of failed quick mode negotiations.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec IKEv1 IPv4.Failed Quick Mode Negotiations">
<summary>
 Failed Quick Mode Negotiations: Failed Quick Mode Negotiations is the number of failed quick mode negotiations since IPsec was last started.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec IKEv1 IPv4.Failed Main Mode Negotiations/sec">
<summary>
 Failed Main Mode Negotiations/sec: Failed Main Mode Negotiations per Second is the rate of failed main mode negotiations.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec IKEv1 IPv4.Failed Main Mode Negotiations">
<summary>
 Failed Main Mode Negotiations: Failed Main Mode Negotiations is the number of failed main mode negotiations since IPsec was last started.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec IKEv1 IPv4.Active Quick Mode SAs">
<summary>
 Active Quick Mode SAs: Active Quick Mode SAs is the number of currently active quick mode security associations.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec IKEv1 IPv4.Active Main Mode SAs">
<summary>
 Active Main Mode SAs: Active Main Mode SAs is the number of currently active main mode security associations.
</summary>
</member>
<member name="T:Logary.WinPerfCounters.IPsec IKEv1 IPv4">
<summary>
 IPsec IKEv1 IPv4: IPsec IKEv1 IPv4 is the set of Internet Protocol security (IPsec) Internet Key Exchange version 1 (IKEv1) counters that apply to traffic and connections over Internet Protocol version 4.

 This performance counter does not have instance based counters
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec Driver.Total Inbound Packets Received">
<summary>
 Total Inbound Packets Received: Total Inbound Packets Received is the total number of inbound packets successfully processed by IPsec, since the computer was last started.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec Driver.Total Inbound Packets Dropped">
<summary>
 Total Inbound Packets Dropped: Total Inbound Packets Dropped is the total number of inbound packets dropped by IPsec, since the computer was last started.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec Driver.Security Associations Added">
<summary>
 Security Associations Added: Security Associations Added is the number of security associations added since the computer was last started.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec Driver.SA Rekeys">
<summary>
 SA Rekeys: SA Rekeys is the number of successful rekey operations for quick mode security associations since the computer was last started.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec Driver.Plaintext Packets Received/sec">
<summary>
 Plaintext Packets Received/sec: Plaintext Packets Received per Second is the rate of clear text packets received since the computer was last started.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec Driver.Plaintext Packets Received">
<summary>
 Plaintext Packets Received: Plaintext Packets Received is the number of clear text packets received since the computer was last started.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec Driver.Pending Security Associations">
<summary>
 Pending Security Associations: Pending Security Associations is the number of pending quick mode security associations.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec Driver.Packets That Failed UDP-ESP Validation/sec">
<summary>
 Packets That Failed UDP-ESP Validation/sec: Packets That Failed UDP-ESP Validation per Second is the rate of packets received that failed UDP-ESP validation (used for NAT traversal) since the computer was last started.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec Driver.Packets That Failed UDP-ESP Validation">
<summary>
 Packets That Failed UDP-ESP Validation: Packets That Failed UDP-ESP Validation is the number of packets received that failed UDP-ESP validation (used for NAT traversal) since the computer was last started.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec Driver.Packets That Failed Replay Detection/sec">
<summary>
 Packets That Failed Replay Detection/sec: Packets That Failed Replay Detection per Second is the rate of packets that contained an invalid sequence number since the computer was last started. Increases in this counter might indicate a network problem or replay attack.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec Driver.Packets That Failed Replay Detection">
<summary>
 Packets That Failed Replay Detection: Packets That Failed Replay Detection is the number of packets that contained an invalid sequence number since the computer was last started. Increases in this counter might indicate a network problem or replay attack.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec Driver.Packets That Failed ESP Validation/sec">
<summary>
 Packets That Failed ESP Validation/sec: Packets That Failed ESP Validation per Second is the rate of packets received that failed ESP validation since the computer was last started.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec Driver.Packets That Failed ESP Validation">
<summary>
 Packets That Failed ESP Validation: Packets That Failed ESP Validation is the number of packets received that failed ESP validation since the computer was last started.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec Driver.Packets Received Over Wrong SA/sec">
<summary>
 Packets Received Over Wrong SA/sec: Packets Received Over Wrong SA per Second is the rate of packets received over the wrong security association since the computer was last started.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec Driver.Packets Received Over Wrong SA">
<summary>
 Packets Received Over Wrong SA: Packets Received Over Wrong SA is the number of packets received over the wrong security association since the computer was last started.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec Driver.Packets Not Decrypted/sec">
<summary>
 Packets Not Decrypted/sec: Packets Not Decrypted per Second is the rate of packets that could not be decrypted since the computer was last started. A packet might not be decrypted if it fails a validation check.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec Driver.Packets Not Decrypted">
<summary>
 Packets Not Decrypted: Packets Not Decrypted is the number of packets that could not be decrypted since the computer was last started. A packet might not be decrypted if it fails a validation check.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec Driver.Packets Not Authenticated/sec">
<summary>
 Packets Not Authenticated/sec: Packets Not Authenticated per Second is the rate of packets for which data could not be verified (for which the integrity hash verification failed) since the computer was last started. Increases in this counter might indicate an IPsec packet spoofing or modification attack, or packet corruption by network devices.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec Driver.Packets Not Authenticated">
<summary>
 Packets Not Authenticated: Packets Not Authenticated is the number of packets for which data could not be verified (for which the integrity hash verification failed) since the computer was last started. Increases in this counter might indicate an IPsec packet spoofing or modification attack, or packet corruption by network devices.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec Driver.Offloaded Security Associations">
<summary>
 Offloaded Security Associations: Offloaded Security Associations is the number of active quick mode security associations offloaded to hardware. Certain network adapters can accelerate IPsec processing by performing hardware offload of IPsec cryptographic functions.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec Driver.Offloaded Bytes Sent/sec">
<summary>
 Offloaded Bytes Sent/sec: Offloaded Bytes Sent per Second is the rate of bytes sent using IPsec hardware offload. Certain network adapters can accelerate IPsec processing by performing hardware offload of IPsec cryptographic functions.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec Driver.Offloaded Bytes Received/sec">
<summary>
 Offloaded Bytes Received/sec: Offloaded Bytes Received per Second is the rate of bytes received using IPsec hardware offload. Certain network adapters can accelerate IPsec processing by performing hardware offload of IPsec cryptographic functions.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec Driver.Incorrect SPI Packets/sec">
<summary>
 Incorrect SPI Packets/sec: Incorrect SPI packets per Second is the rate of packets for which the Security Parameter Index (SPI) was incorrect since the computer was last started. A large number of packets with bad SPIs within a short amount of time might indicate a packet spoofing attack.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec Driver.Incorrect SPI Packets">
<summary>
 Incorrect SPI Packets: Incorrect SPI packets is the number of packets for which the Security Parameter Index (SPI) was incorrect since the computer was last started. A large number of packets with bad SPIs within a short amount of time might indicate a packet spoofing attack.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec Driver.Inbound Packets Received/sec">
<summary>
 Inbound Packets Received/sec: Inbound Packets Received per Second is the rate of inbound packets successfully processed by IPsec.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec Driver.Inbound Packets Dropped/sec">
<summary>
 Inbound Packets Dropped/sec: Inbound Packets Dropped per Second is the rate of inbound packets dropped by IPsec.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec Driver.Bytes Sent in Tunnel Mode/sec">
<summary>
 Bytes Sent in Tunnel Mode/sec: Bytes Sent in Tunnel Mode per Second is the rate of bytes sent using tunnel mode.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec Driver.Bytes Sent in Transport Mode/sec">
<summary>
 Bytes Sent in Transport Mode/sec: Bytes Sent in Transport Mode per Second is the rate of bytes sent using transport mode.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec Driver.Bytes Received in Tunnel Mode/sec">
<summary>
 Bytes Received in Tunnel Mode/sec: Bytes Received in Tunnel Mode per Second is the rate of bytes received using tunnel mode.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec Driver.Bytes Received in Transport Mode/sec">
<summary>
 Bytes Received in Transport Mode/sec: Bytes Received in Transport Mode per Second is the rate of bytes received using transport mode.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec Driver.Active Security Associations">
<summary>
 Active Security Associations: Active Security Associations is the number of active quick mode security associations.
</summary>
</member>
<member name="T:Logary.WinPerfCounters.IPsec Driver">
<summary>
 IPsec Driver: IPsec Driver is the set of Internet Protocol security (IPsec) driver counters that apply to traffic over Internet Protocol version 4 and Internet Protocol version 6.

 This performance counter does not have instance based counters
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec Connections.Total number of cumulative connections since boot">
<summary>
 Total number of cumulative connections since boot: Total number of cumulative connections since boot
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec Connections.Total Number current Connections">
<summary>
 Total Number current Connections: Total Number current Connections
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec Connections.Total Bytes Out since start">
<summary>
 Total Bytes Out since start: Total Bytes Out since boot
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec Connections.Total Bytes In since start">
<summary>
 Total Bytes In since start: Total Bytes In since boot
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec Connections.Number of failed authentications">
<summary>
 Number of failed authentications: Number of failed authentications
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec Connections.Max number of connections since boot">
<summary>
 Max number of connections since boot: Max number of connections since boot
</summary>
</member>
<member name="T:Logary.WinPerfCounters.IPsec Connections">
<summary>
 IPsec Connections: IPsec Connections is the set of Internet Protocol security (IPsec) counters that apply to IPsec encapsulated connections.

 This performance counter does not have instance based counters
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec AuthIP IPv6.Successful Quick Mode Negotiations/sec">
<summary>
 Successful Quick Mode Negotiations/sec: Successful Quick Mode Negotiations per Second is the rate of quick mode negotiations completed.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec AuthIP IPv6.Successful Quick Mode Negotiations">
<summary>
 Successful Quick Mode Negotiations: Successful Quick Mode Negotiations is the number of quick mode negotiations completed since IPsec was last started.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec AuthIP IPv6.Successful Main Mode Negotiations/sec">
<summary>
 Successful Main Mode Negotiations/sec: Successful Main Mode Negotiations per Second is the rate of main mode negotiations completed.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec AuthIP IPv6.Successful Main Mode Negotiations">
<summary>
 Successful Main Mode Negotiations: Successful Main Mode Negotiations is the number of main mode negotiations completed since IPsec was last started.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec AuthIP IPv6.Successful Extended Mode Negotiations/sec">
<summary>
 Successful Extended Mode Negotiations/sec: Successful Extended Mode Negotiations per Second is the rate of extended mode negotiations completed.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec AuthIP IPv6.Successful Extended Mode Negotiations">
<summary>
 Successful Extended Mode Negotiations: Successful Extended Mode Negotiations is the number of extended mode negotiations completed since IPsec was last started.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec AuthIP IPv6.Quick Mode Negotiations/sec">
<summary>
 Quick Mode Negotiations/sec: Quick Mode Negotiations per Second is the rate at which quick mode negotiations are being attempted.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec AuthIP IPv6.Quick Mode Negotiations">
<summary>
 Quick Mode Negotiations: Quick Mode Negotiations is the number of quick mode negotiations attempted since IPsec was last started.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec AuthIP IPv6.Pending Quick Mode Negotiations">
<summary>
 Pending Quick Mode Negotiations: Pending Quick Mode Negotiations is the number of pending quick mode negotiations.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec AuthIP IPv6.Pending Main Mode Negotiations">
<summary>
 Pending Main Mode Negotiations: Pending Main Mode Negotiations is the number of pending main mode negotiations.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec AuthIP IPv6.Pending Extended Mode Negotiations">
<summary>
 Pending Extended Mode Negotiations: Pending Extended Mode Negotiations is the number of pending extended mode negotiations.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec AuthIP IPv6.Main Mode SAs That Used Impersonation/sec">
<summary>
 Main Mode SAs That Used Impersonation/sec: Main Mode SAs That Used Impersonation per Second is the rate of main mode security associations completed using impersonation.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec AuthIP IPv6.Main Mode SAs That Used Impersonation">
<summary>
 Main Mode SAs That Used Impersonation: Main Mode SAs That Used Impersonation is the number of main mode security associations completed using impersonation since IPsec was last started.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec AuthIP IPv6.Main Mode Negotiations/sec">
<summary>
 Main Mode Negotiations/sec: Main Mode Negotiations per Second is the rate at which main mode negotiations are being attempted.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec AuthIP IPv6.Main Mode Negotiations">
<summary>
 Main Mode Negotiations: Main Mode Negotiations is the number of main mode negotiations attempted since IPsec was last started.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec AuthIP IPv6.Main Mode Negotiation Requests Received/sec">
<summary>
 Main Mode Negotiation Requests Received/sec: Main Mode Negotiation Requests Received per Second is the rate of main mode negotiations initiated by a peer.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec AuthIP IPv6.Main Mode Negotiation Requests Received">
<summary>
 Main Mode Negotiation Requests Received: Main Mode Negotiation Requests Received is the number of main mode negotiations initiated by a peer since IPsec was last started.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec AuthIP IPv6.Failed Quick Mode Negotiations/sec">
<summary>
 Failed Quick Mode Negotiations/sec: Failed Quick Mode Negotiations per Second is the rate of failed quick mode negotiations.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec AuthIP IPv6.Failed Quick Mode Negotiations">
<summary>
 Failed Quick Mode Negotiations: Failed Quick Mode Negotiations is the number of failed quick mode negotiations since IPsec was last started.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec AuthIP IPv6.Failed Main Mode Negotiations/sec">
<summary>
 Failed Main Mode Negotiations/sec: Failed Main Mode Negotiations per Second is the rate of failed main mode negotiations.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec AuthIP IPv6.Failed Main Mode Negotiations">
<summary>
 Failed Main Mode Negotiations: Failed Main Mode Negotiations is the number of failed main mode negotiations since IPsec was last started.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec AuthIP IPv6.Failed Extended Mode Negotiations/sec">
<summary>
 Failed Extended Mode Negotiations/sec: Failed Extended Mode Negotiations per Second is the rate of failed extended mode negotiations.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec AuthIP IPv6.Failed Extended Mode Negotiations">
<summary>
 Failed Extended Mode Negotiations: Failed Extended Mode Negotiations is the number of failed extended mode negotiations since IPsec was last started.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec AuthIP IPv6.Extended Mode SAs That Used Impersonation">
<summary>
 Extended Mode SAs That Used Impersonation: Extended Mode SAs That Used Impersonation is the number of extended mode security associations completed using impersonation since IPsec was last started.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec AuthIP IPv6.Extended Mode Negotiations/sec">
<summary>
 Extended Mode Negotiations/sec: Extended Mode Negotiations per Second is the rate at which extended mode negotiations are being attempted.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec AuthIP IPv6.Extended Mode Negotiations">
<summary>
 Extended Mode Negotiations: Extended Mode Negotiations is the number of extended mode negotiations attempted since IPsec was last started.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec AuthIP IPv6.Active Quick Mode SAs">
<summary>
 Active Quick Mode SAs: Active Quick Mode SAs is the number of currently active quick mode security associations.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec AuthIP IPv6.Active Main Mode SAs">
<summary>
 Active Main Mode SAs: Active Main Mode SAs is the number of currently active main mode security associations.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec AuthIP IPv6.Active Extended Mode SAs">
<summary>
 Active Extended Mode SAs: Active Extended Mode SAs is the number of currently active extended mode security associations.
</summary>
</member>
<member name="T:Logary.WinPerfCounters.IPsec AuthIP IPv6">
<summary>
 IPsec AuthIP IPv6: IPsec AuthIP IPv6 is the set of Internet Protocol security (IPsec) Authenticated IP (AuthIP) counters that apply to traffic and connections over Internet Protocol version 6.

 This performance counter does not have instance based counters
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec AuthIP IPv4.Successful Quick Mode Negotiations/sec">
<summary>
 Successful Quick Mode Negotiations/sec: Successful Quick Mode Negotiations per Second is the rate of quick mode negotiations completed.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec AuthIP IPv4.Successful Quick Mode Negotiations">
<summary>
 Successful Quick Mode Negotiations: Successful Quick Mode Negotiations is the number of quick mode negotiations completed since IPsec was last started.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec AuthIP IPv4.Successful Main Mode Negotiations/sec">
<summary>
 Successful Main Mode Negotiations/sec: Successful Main Mode Negotiations per Second is the rate of main mode negotiations completed.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec AuthIP IPv4.Successful Main Mode Negotiations">
<summary>
 Successful Main Mode Negotiations: Successful Main Mode Negotiations is the number of main mode negotiations completed since IPsec was last started.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec AuthIP IPv4.Successful Extended Mode Negotiations/sec">
<summary>
 Successful Extended Mode Negotiations/sec: Successful Extended Mode Negotiations per Second is the rate of extended mode negotiations completed.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec AuthIP IPv4.Successful Extended Mode Negotiations">
<summary>
 Successful Extended Mode Negotiations: Successful Extended Mode Negotiations is the number of extended mode negotiations completed since IPsec was last started.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec AuthIP IPv4.Quick Mode Negotiations/sec">
<summary>
 Quick Mode Negotiations/sec: Quick Mode Negotiations per Second is the rate at which quick mode negotiations are being attempted.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec AuthIP IPv4.Quick Mode Negotiations">
<summary>
 Quick Mode Negotiations: Quick Mode Negotiations is the number of quick mode negotiations attempted since IPsec was last started.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec AuthIP IPv4.Pending Quick Mode Negotiations">
<summary>
 Pending Quick Mode Negotiations: Pending Quick Mode Negotiations is the number of pending quick mode negotiations.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec AuthIP IPv4.Pending Main Mode Negotiations">
<summary>
 Pending Main Mode Negotiations: Pending Main Mode Negotiations is the number of pending main mode negotiations.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec AuthIP IPv4.Pending Extended Mode Negotiations">
<summary>
 Pending Extended Mode Negotiations: Pending Extended Mode Negotiations is the number of pending extended mode negotiations.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec AuthIP IPv4.Main Mode SAs That Used Impersonation/sec">
<summary>
 Main Mode SAs That Used Impersonation/sec: Main Mode SAs That Used Impersonation per Second is the rate of main mode security associations completed using impersonation.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec AuthIP IPv4.Main Mode SAs That Used Impersonation">
<summary>
 Main Mode SAs That Used Impersonation: Main Mode SAs That Used Impersonation is the number of main mode security associations completed using impersonation since IPsec was last started.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec AuthIP IPv4.Main Mode Negotiations/sec">
<summary>
 Main Mode Negotiations/sec: Main Mode Negotiations per Second is the rate at which main mode negotiations are being attempted.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec AuthIP IPv4.Main Mode Negotiations">
<summary>
 Main Mode Negotiations: Main Mode Negotiations is the number of main mode negotiations attempted since IPsec was last started.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec AuthIP IPv4.Main Mode Negotiation Requests Received/sec">
<summary>
 Main Mode Negotiation Requests Received/sec: Main Mode Negotiation Requests Received per Second is the rate of main mode negotiations initiated by a peer.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec AuthIP IPv4.Main Mode Negotiation Requests Received">
<summary>
 Main Mode Negotiation Requests Received: Main Mode Negotiation Requests Received is the number of main mode negotiations initiated by a peer since IPsec was last started.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec AuthIP IPv4.Failed Quick Mode Negotiations/sec">
<summary>
 Failed Quick Mode Negotiations/sec: Failed Quick Mode Negotiations per Second is the rate of failed quick mode negotiations.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec AuthIP IPv4.Failed Quick Mode Negotiations">
<summary>
 Failed Quick Mode Negotiations: Failed Quick Mode Negotiations is the number of failed quick mode negotiations since IPsec was last started.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec AuthIP IPv4.Failed Main Mode Negotiations/sec">
<summary>
 Failed Main Mode Negotiations/sec: Failed Main Mode Negotiations per Second is the rate of failed main mode negotiations.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec AuthIP IPv4.Failed Main Mode Negotiations">
<summary>
 Failed Main Mode Negotiations: Failed Main Mode Negotiations is the number of failed main mode negotiations since IPsec was last started.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec AuthIP IPv4.Failed Extended Mode Negotiations/sec">
<summary>
 Failed Extended Mode Negotiations/sec: Failed Extended Mode Negotiations per Second is the rate of failed extended mode negotiations.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec AuthIP IPv4.Failed Extended Mode Negotiations">
<summary>
 Failed Extended Mode Negotiations: Failed Extended Mode Negotiations is the number of failed extended mode negotiations since IPsec was last started.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec AuthIP IPv4.Extended Mode SAs That Used Impersonation">
<summary>
 Extended Mode SAs That Used Impersonation: Extended Mode SAs That Used Impersonation is the number of extended mode security associations completed using impersonation since IPsec was last started.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec AuthIP IPv4.Extended Mode Negotiations/sec">
<summary>
 Extended Mode Negotiations/sec: Extended Mode Negotiations per Second is the rate at which extended mode negotiations are being attempted.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec AuthIP IPv4.Extended Mode Negotiations">
<summary>
 Extended Mode Negotiations: Extended Mode Negotiations is the number of extended mode negotiations attempted since IPsec was last started.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec AuthIP IPv4.Active Quick Mode SAs">
<summary>
 Active Quick Mode SAs: Active Quick Mode SAs is the number of currently active quick mode security associations.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec AuthIP IPv4.Active Main Mode SAs">
<summary>
 Active Main Mode SAs: Active Main Mode SAs is the number of currently active main mode security associations.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.IPsec AuthIP IPv4.Active Extended Mode SAs">
<summary>
 Active Extended Mode SAs: Active Extended Mode SAs is the number of currently active extended mode security associations.
</summary>
</member>
<member name="T:Logary.WinPerfCounters.IPsec AuthIP IPv4">
<summary>
 IPsec AuthIP IPv4: IPsec AuthIP IPv4 is the set of Internet Protocol security (IPsec) Authenticated IP (AuthIP) counters that apply to traffic and connections over Internet Protocol version 4.

 This performance counter does not have instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.IPHTTPS Session.Packets sent on this session(Logary.WinPerfCounter.Instance)">
<summary>
 Packets sent on this session: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.IPHTTPS Session.Packets received on this session(Logary.WinPerfCounter.Instance)">
<summary>
 Packets received on this session: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.IPHTTPS Session.Errors - Transmit errors on this session(Logary.WinPerfCounter.Instance)">
<summary>
 Errors - Transmit errors on this session: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.IPHTTPS Session.Errors - Receive errors on this session(Logary.WinPerfCounter.Instance)">
<summary>
 Errors - Receive errors on this session: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.IPHTTPS Session.Duration - Duration of the session (Seconds)(Logary.WinPerfCounter.Instance)">
<summary>
 Duration - Duration of the session (Seconds): -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.IPHTTPS Session.Bytes sent on this session(Logary.WinPerfCounter.Instance)">
<summary>
 Bytes sent on this session: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.IPHTTPS Session.Bytes received on this session(Logary.WinPerfCounter.Instance)">
<summary>
 Bytes received on this session: -
</summary>
</member>
<member name="T:Logary.WinPerfCounters.IPHTTPS Session">
<summary>
 IPHTTPS Session: Per session statistics on this IPHTTPS server.

 This performance counter does not have instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.IPHTTPS Global.Sessions - Total sessions(Logary.WinPerfCounter.Instance)">
<summary>
 Sessions - Total sessions: Total number of sessions on the server.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.IPHTTPS Global.Out - Total packets sent(Logary.WinPerfCounter.Instance)">
<summary>
 Out - Total packets sent: Total packets sent from the server.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.IPHTTPS Global.Out - Total bytes sent(Logary.WinPerfCounter.Instance)">
<summary>
 Out - Total bytes sent: Total bytes sent on the IPHTTPS server.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.IPHTTPS Global.Out - Total bytes forwarded(Logary.WinPerfCounter.Instance)">
<summary>
 Out - Total bytes forwarded: Total bytes forwarded at link layer.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.IPHTTPS Global.In - Total packets received(Logary.WinPerfCounter.Instance)">
<summary>
 In - Total packets received: Total packets received on the server.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.IPHTTPS Global.In - Total bytes received(Logary.WinPerfCounter.Instance)">
<summary>
 In - Total bytes received: Total bytes received on the IPHTTPS server.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.IPHTTPS Global.Errors - Transmit errors on the server(Logary.WinPerfCounter.Instance)">
<summary>
 Errors - Transmit errors on the server: Total transmit errors on the server.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.IPHTTPS Global.Errors - Receive errors on the server(Logary.WinPerfCounter.Instance)">
<summary>
 Errors - Receive errors on the server: Total receive errors on the server.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.IPHTTPS Global.Errors - Authentication Errors(Logary.WinPerfCounter.Instance)">
<summary>
 Errors - Authentication Errors: Total authentication errors.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.IPHTTPS Global.Drops - Neighbor resolution timeouts(Logary.WinPerfCounter.Instance)">
<summary>
 Drops - Neighbor resolution timeouts: Total packets dropped waiting for neighbor resolution.
</summary>
</member>
<member name="T:Logary.WinPerfCounters.IPHTTPS Global">
<summary>
 IPHTTPS Global: Statistics of IPHTTPS server on this machine.

 This performance counter does not have non-instance based counters
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ICMPv6.Sent Time Exceeded">
<summary>
 Sent Time Exceeded: Sent Time Exceeded is the number of ICMP Time Exceeded messages sent.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ICMPv6.Sent Router Solicit">
<summary>
 Sent Router Solicit: Sent Router Solicit is the number of packets sent thatsolicit the router.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ICMPv6.Sent Router Advert">
<summary>
 Sent Router Advert: Sent Router Advert is the number of packets sent thatadvert the router.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ICMPv6.Sent Redirect/sec">
<summary>
 Sent Redirect/sec: Sent Redirect/sec is the rate, in incidents per second, at which ICMP Redirect messages were sent.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ICMPv6.Sent Parameter Problem">
<summary>
 Sent Parameter Problem: Sent Parameter Problem is the number of ICMP Parameter Problem messages sent.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ICMPv6.Sent Packet Too Big">
<summary>
 Sent Packet Too Big: Sent Packet Too Big is the number of sent packets thatare larger than anticipated.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ICMPv6.Sent Neighbor Solicit">
<summary>
 Sent Neighbor Solicit: Sent Neighbor Solicit is the number of packets sent thatsolicit a neighbor.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ICMPv6.Sent Neighbor Advert">
<summary>
 Sent Neighbor Advert: Sent Neighbor Advert is the number of packets sent thatadvert a neighbor.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ICMPv6.Sent Membership Report">
<summary>
 Sent Membership Report: Sent Membership Report is the number of packets sent thatreport their membership to a group.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ICMPv6.Sent Membership Reduction">
<summary>
 Sent Membership Reduction: Sent Membership Reduction is the number of packets sent thatcancelled their membership to a group.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ICMPv6.Sent Membership Query">
<summary>
 Sent Membership Query: Sent Membership Query is the number of packets sent thatquery their membership to a group.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ICMPv6.Sent Echo/sec">
<summary>
 Sent Echo/sec: Sent Echo/sec is the rate of ICMP Echo messages sent.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ICMPv6.Sent Echo Reply/sec">
<summary>
 Sent Echo Reply/sec: Sent Echo Reply/sec is the rate, in incidents per second, at which ICMP Echo Reply messages were sent.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ICMPv6.Sent Destination Unreachable">
<summary>
 Sent Destination Unreachable: Sent Destination Unreachable is the number of ICMP Destination Unreachable messages sent.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ICMPv6.Received Time Exceeded">
<summary>
 Received Time Exceeded: Received Time Exceeded is the number of ICMP Time Exceeded messages received.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ICMPv6.Received Router Solicit">
<summary>
 Received Router Solicit: Received Router Solicit is the number of packets received thatsolicit the router.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ICMPv6.Received Router Advert">
<summary>
 Received Router Advert: Received Router Advert is the number of packets received thatadvert the router.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ICMPv6.Received Redirect/sec">
<summary>
 Received Redirect/sec: Received Redirect/sec is the rate, in incidents per second, at which ICMP Redirect messages were received.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ICMPv6.Received Parameter Problem">
<summary>
 Received Parameter Problem: Received Parameter Problem is the number of ICMP Parameter Problem messages received.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ICMPv6.Received Packet Too Big">
<summary>
 Received Packet Too Big: Received Packet Too Big is the number of received packets thatare larger than anticipated.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ICMPv6.Received Neighbor Solicit">
<summary>
 Received Neighbor Solicit: Received Neighbor Solicit is the number of packets received thatsolicit a neighbor.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ICMPv6.Received Neighbor Advert">
<summary>
 Received Neighbor Advert: Received Neighbor Advert is the number of packets received thatadvert a neighbor.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ICMPv6.Received Membership Report">
<summary>
 Received Membership Report: Received Membership Report is the number of packets received thatreport their membership to a group.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ICMPv6.Received Membership Reduction">
<summary>
 Received Membership Reduction: Received Membership Reduction is the number of packets received thatcancelled their membership to a group.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ICMPv6.Received Membership Query">
<summary>
 Received Membership Query: Received Membership Query is the number of packets received thatquery their membership to a group.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ICMPv6.Received Echo/sec">
<summary>
 Received Echo/sec: Received Echo/sec is the rate, in incidents per second, at which ICMP Echo messages were received.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ICMPv6.Received Echo Reply/sec">
<summary>
 Received Echo Reply/sec: Received Echo Reply/sec is the rate, in incidents per second, at which ICMP Echo Reply messages were received.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ICMPv6.Received Dest. Unreachable">
<summary>
 Received Dest. Unreachable: Received Destination Unreachable is the number of ICMP Destination Unreachable messages received.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ICMPv6.Messages/sec">
<summary>
 Messages/sec: Messages/sec is the total rate, in incidents per second, at which ICMP messages were sent and received by the entity. The rate includes messages received or sent in error.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ICMPv6.Messages Sent/sec">
<summary>
 Messages Sent/sec: Messages Sent/sec is the rate, in incidents per second, at which the server attempted to send. The rate includes those messages sent in error.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ICMPv6.Messages Received/sec">
<summary>
 Messages Received/sec: Messages Received/sec is the rate, in incidents per second at which ICMP messages were received. The rate includes messages received in error.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ICMPv6.Messages Received Errors">
<summary>
 Messages Received Errors: Messages Received Errors is the number of ICMP messages that the entity received but had errors, such as bad ICMP checksums, bad length, etc.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ICMPv6.Messages Outbound Errors">
<summary>
 Messages Outbound Errors: Messages Outbound Errors is the number of ICMP messages that were not send due to problems within ICMP, such as lack of buffers.  This value does not include errors discovered outside the ICMP layer, such as those recording the failure of IP to route the resultant datagram.  In some implementations, none of the error types are included in the value of this counter.
</summary>
</member>
<member name="T:Logary.WinPerfCounters.ICMPv6">
<summary>
 ICMPv6: The ICMP performance object consists of counters that measure the rates at which messages are sent and received by using ICMP protocols.  It also includes counters that monitor ICMP protocol errors.

 This performance counter does not have instance based counters
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ICMP.Sent Timestamp/sec">
<summary>
 Sent Timestamp/sec: Sent Timestamp/sec is the rate, in incidents per second, at which ICMP Timestamp Request messages were sent.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ICMP.Sent Timestamp Reply/sec">
<summary>
 Sent Timestamp Reply/sec: Sent Timestamp Reply/sec is the rate, in incidents per second,  at which ICMP Timestamp Reply messages were sent.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ICMP.Sent Time Exceeded">
<summary>
 Sent Time Exceeded: Sent Time Exceeded is the number of ICMP Time Exceeded messages sent.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ICMP.Sent Source Quench">
<summary>
 Sent Source Quench: Sent Source Quench is the number of ICMP Source Quench messages sent.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ICMP.Sent Redirect/sec">
<summary>
 Sent Redirect/sec: Sent Redirect/sec is the rate, in incidents per second, at which ICMP Redirect messages were sent.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ICMP.Sent Parameter Problem">
<summary>
 Sent Parameter Problem: Sent Parameter Problem is the number of ICMP Parameter Problem messages sent.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ICMP.Sent Echo/sec">
<summary>
 Sent Echo/sec: Sent Echo/sec is the rate of ICMP Echo messages sent.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ICMP.Sent Echo Reply/sec">
<summary>
 Sent Echo Reply/sec: Sent Echo Reply/sec is the rate, in incidents per second, at which ICMP Echo Reply messages were sent.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ICMP.Sent Destination Unreachable">
<summary>
 Sent Destination Unreachable: Sent Destination Unreachable is the number of ICMP Destination Unreachable messages sent.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ICMP.Sent Address Mask Reply">
<summary>
 Sent Address Mask Reply: Sent Address Mask Reply is the number of ICMP Address Mask Reply messages sent.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ICMP.Sent Address Mask">
<summary>
 Sent Address Mask: Sent Address Mask is the number of ICMP Address Mask Request messages sent.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ICMP.Received Timestamp/sec">
<summary>
 Received Timestamp/sec: Received Timestamp/sec is the rate, in incidents per second at which ICMP Timestamp Request messages were received.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ICMP.Received Timestamp Reply/sec">
<summary>
 Received Timestamp Reply/sec: Received Timestamp Reply/sec is the rate of ICMP Timestamp Reply messages received.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ICMP.Received Time Exceeded">
<summary>
 Received Time Exceeded: Received Time Exceeded is the number of ICMP Time Exceeded messages received.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ICMP.Received Source Quench">
<summary>
 Received Source Quench: Received Source Quench is the number of ICMP Source Quench messages received.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ICMP.Received Redirect/sec">
<summary>
 Received Redirect/sec: Received Redirect/sec is the rate, in incidents per second, at which ICMP Redirect messages were received.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ICMP.Received Parameter Problem">
<summary>
 Received Parameter Problem: Received Parameter Problem is the number of ICMP Parameter Problem messages received.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ICMP.Received Echo/sec">
<summary>
 Received Echo/sec: Received Echo/sec is the rate, in incidents per second, at which ICMP Echo messages were received.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ICMP.Received Echo Reply/sec">
<summary>
 Received Echo Reply/sec: Received Echo Reply/sec is the rate, in incidents per second, at which ICMP Echo Reply messages were received.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ICMP.Received Dest. Unreachable">
<summary>
 Received Dest. Unreachable: Received Destination Unreachable is the number of ICMP Destination Unreachable messages received.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ICMP.Received Address Mask Reply">
<summary>
 Received Address Mask Reply: Received Address Mask Reply is the number of ICMP Address Mask Reply messages received.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ICMP.Received Address Mask">
<summary>
 Received Address Mask: Received Address Mask is the number of ICMP Address Mask Request messages received.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ICMP.Messages/sec">
<summary>
 Messages/sec: Messages/sec is the total rate, in incidents per second, at which ICMP messages were sent and received by the entity. The rate includes messages received or sent in error.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ICMP.Messages Sent/sec">
<summary>
 Messages Sent/sec: Messages Sent/sec is the rate, in incidents per second, at which the server attempted to send. The rate includes those messages sent in error.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ICMP.Messages Received/sec">
<summary>
 Messages Received/sec: Messages Received/sec is the rate, in incidents per second at which ICMP messages were received. The rate includes messages received in error.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ICMP.Messages Received Errors">
<summary>
 Messages Received Errors: Messages Received Errors is the number of ICMP messages that the entity received but had errors, such as bad ICMP checksums, bad length, etc.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ICMP.Messages Outbound Errors">
<summary>
 Messages Outbound Errors: Messages Outbound Errors is the number of ICMP messages that were not send due to problems within ICMP, such as lack of buffers.  This value does not include errors discovered outside the ICMP layer, such as those recording the failure of IP to route the resultant datagram.  In some implementations, none of the error types are included in the value of this counter.
</summary>
</member>
<member name="T:Logary.WinPerfCounters.ICMP">
<summary>
 ICMP: The ICMP performance object consists of counters that measure the rates at which messages are sent and received by using ICMP protocols.  It also includes counters that monitor ICMP protocol errors.

 This performance counter does not have instance based counters
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Hyper-V Dynamic Memory Integration Service.Maximum Memory, Mbytes">
<summary>
 Maximum Memory, Mbytes: 
</summary>
</member>
<member name="T:Logary.WinPerfCounters.Hyper-V Dynamic Memory Integration Service">
<summary>
 Hyper-V Dynamic Memory Integration Service: This counter set represents the statistics for Dynamic Memory Integration Services

 This performance counter does not have instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.HTTP Service Url Groups.MaxConnections(Logary.WinPerfCounter.Instance)">
<summary>
 MaxConnections: Maximum number of concurrent connections established for this site
</summary>
</member>
<member name="M:Logary.WinPerfCounters.HTTP Service Url Groups.HeadRequests(Logary.WinPerfCounter.Instance)">
<summary>
 HeadRequests: Rate at which HEAD method requests are made for this site
</summary>
</member>
<member name="M:Logary.WinPerfCounters.HTTP Service Url Groups.GetRequests(Logary.WinPerfCounter.Instance)">
<summary>
 GetRequests: Rate at which GET method requests are made for this site
</summary>
</member>
<member name="M:Logary.WinPerfCounters.HTTP Service Url Groups.CurrentConnections(Logary.WinPerfCounter.Instance)">
<summary>
 CurrentConnections: Number of current connections established for this site
</summary>
</member>
<member name="M:Logary.WinPerfCounters.HTTP Service Url Groups.ConnectionAttempts(Logary.WinPerfCounter.Instance)">
<summary>
 ConnectionAttempts: Rate at which connection attempts are being made for this site
</summary>
</member>
<member name="M:Logary.WinPerfCounters.HTTP Service Url Groups.BytesTransferredRate(Logary.WinPerfCounter.Instance)">
<summary>
 BytesTransferredRate: Rate of total bytes transferred (sent and received) by HTTP service for this site
</summary>
</member>
<member name="M:Logary.WinPerfCounters.HTTP Service Url Groups.BytesSentRate(Logary.WinPerfCounter.Instance)">
<summary>
 BytesSentRate: Rate of sending data by HTTP service for this site
</summary>
</member>
<member name="M:Logary.WinPerfCounters.HTTP Service Url Groups.BytesReceivedRate(Logary.WinPerfCounter.Instance)">
<summary>
 BytesReceivedRate: Rate of received data by HTTP service for this site
</summary>
</member>
<member name="M:Logary.WinPerfCounters.HTTP Service Url Groups.AllRequests(Logary.WinPerfCounter.Instance)">
<summary>
 AllRequests: Total number of HTTP requests made for this site
</summary>
</member>
<member name="T:Logary.WinPerfCounters.HTTP Service Url Groups">
<summary>
 HTTP Service Url Groups: Set of URL Group-specific counters

 This performance counter does not have non-instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.HTTP Service Request Queues.RejectionRate(Logary.WinPerfCounter.Instance)">
<summary>
 RejectionRate: Rate at which requests are rejected from the queue
</summary>
</member>
<member name="M:Logary.WinPerfCounters.HTTP Service Request Queues.RejectedRequests(Logary.WinPerfCounter.Instance)">
<summary>
 RejectedRequests: Total number of requests rejected from the queue
</summary>
</member>
<member name="M:Logary.WinPerfCounters.HTTP Service Request Queues.MaxQueueItemAge(Logary.WinPerfCounter.Instance)">
<summary>
 MaxQueueItemAge: Age of the oldest request in the queue
</summary>
</member>
<member name="M:Logary.WinPerfCounters.HTTP Service Request Queues.CurrentQueueSize(Logary.WinPerfCounter.Instance)">
<summary>
 CurrentQueueSize: Number of requests in the queue
</summary>
</member>
<member name="M:Logary.WinPerfCounters.HTTP Service Request Queues.CacheHitRate(Logary.WinPerfCounter.Instance)">
<summary>
 CacheHitRate: Rate of cache hits for the queue
</summary>
</member>
<member name="M:Logary.WinPerfCounters.HTTP Service Request Queues.ArrivalRate(Logary.WinPerfCounter.Instance)">
<summary>
 ArrivalRate: Rate at which requests are arriving in the queue
</summary>
</member>
<member name="T:Logary.WinPerfCounters.HTTP Service Request Queues">
<summary>
 HTTP Service Request Queues: Set of request queue counters

 This performance counter does not have non-instance based counters
</summary>
</member>
<member name="P:Logary.WinPerfCounters.HTTP Service.UriCacheMisses">
<summary>
 UriCacheMisses: Total number of unsuccessful lookups in the kernel URI cache
</summary>
</member>
<member name="P:Logary.WinPerfCounters.HTTP Service.UriCacheHits">
<summary>
 UriCacheHits: Total number of successful lookups in the kernel URI cache
</summary>
</member>
<member name="P:Logary.WinPerfCounters.HTTP Service.UriCacheFlushes">
<summary>
 UriCacheFlushes: Total number of kernel URI cache flushes (complete or partial) since service startup
</summary>
</member>
<member name="P:Logary.WinPerfCounters.HTTP Service.TotalUrisCached">
<summary>
 TotalUrisCached: Total number of URIs added to the kernel since service startup
</summary>
</member>
<member name="P:Logary.WinPerfCounters.HTTP Service.TotalFlushedUris">
<summary>
 TotalFlushedUris: Total number of URIs that have been removed from the kernel URI cache since service startup
</summary>
</member>
<member name="P:Logary.WinPerfCounters.HTTP Service.CurrentUrisCached">
<summary>
 CurrentUrisCached: Total number of URIs currently cached by the kernel
</summary>
</member>
<member name="T:Logary.WinPerfCounters.HTTP Service">
<summary>
 HTTP Service: Set of HTTP service counters

 This performance counter does not have instance based counters
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Generic IKEv1_ AuthIP_ and IKEv2.Successful Negotiations/sec">
<summary>
 Successful Negotiations/sec: Successful Negotiations per Second is the rate of negotiations completed for IKEv1, AuthIP, and IKEv2.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Generic IKEv1_ AuthIP_ and IKEv2.Successful Negotiations">
<summary>
 Successful Negotiations: Successful Negotiations is the number of negotiations completed for IKEv1, AuthIP, and IKEv2 since IPsec was last started.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Generic IKEv1_ AuthIP_ and IKEv2.Packets Received/sec">
<summary>
 Packets Received/sec: Packets Received per Second is the rate at which validated IPsec packets are being received.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Generic IKEv1_ AuthIP_ and IKEv2.Invalid Packets Received/sec">
<summary>
 Invalid Packets Received/sec: Invalid Packets Received per Second is the rate at which invalid IPsec packets are being received.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Generic IKEv1_ AuthIP_ and IKEv2.IKEv2 Quick Mode Negotiation Time">
<summary>
 IKEv2 Quick Mode Negotiation Time: IKEv2 Quick Mode Negotiation Time is the number of milliseconds taken for the last IKEv2 quick mode security association negotiated.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Generic IKEv1_ AuthIP_ and IKEv2.IKEv2 Main Mode Negotiation Time">
<summary>
 IKEv2 Main Mode Negotiation Time: IKEv2 Main Mode Negotiation Time is the number of milliseconds taken for the last IKEv2 main mode security association negotiated.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Generic IKEv1_ AuthIP_ and IKEv2.IKEv1 Quick Mode Negotiation Time">
<summary>
 IKEv1 Quick Mode Negotiation Time: IKEv1 Quick Mode Negotiation Time is the number of milliseconds taken for the last IKEv1 quick mode security association negotiated.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Generic IKEv1_ AuthIP_ and IKEv2.IKEv1 Main Mode Negotiation Time">
<summary>
 IKEv1 Main Mode Negotiation Time: IKEv1 Main Mode Negotiation Time is the number of milliseconds taken for the last IKEv1 main mode security association negotiated.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Generic IKEv1_ AuthIP_ and IKEv2.Failed Negotiations/sec">
<summary>
 Failed Negotiations/sec: Failed Negotiations per Second is the rate of failed negotiations attempted for IKEv1, AuthIP, and IKEv2.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Generic IKEv1_ AuthIP_ and IKEv2.Failed Negotiations">
<summary>
 Failed Negotiations: Failed Negotiations is the number of failed negotiations for IKEv1, AuthIP, and IKEv2 since IPsec was last started.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Generic IKEv1_ AuthIP_ and IKEv2.Extended Mode Negotiation Time">
<summary>
 Extended Mode Negotiation Time: Extended Mode Negotiation Time is the number of milliseconds taken for the last extended mode security association negotiated.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Generic IKEv1_ AuthIP_ and IKEv2.AuthIP Quick Mode Negotiation Time">
<summary>
 AuthIP Quick Mode Negotiation Time: AuthIP Quick Mode Negotiation Time is the number of milliseconds taken for the last Authenticated IP quick mode security association negotiated.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Generic IKEv1_ AuthIP_ and IKEv2.AuthIP Main Mode Negotiation Time">
<summary>
 AuthIP Main Mode Negotiation Time: AuthIP Main Mode Negotiation Time is the number of milliseconds taken for the last Authenticated IP main mode security association negotiated.
</summary>
</member>
<member name="T:Logary.WinPerfCounters.Generic IKEv1_ AuthIP_ and IKEv2">
<summary>
 Generic IKEv1, AuthIP, and IKEv2: Generic IKEv1, AuthIP, and IKEv2 is the set of Internet Protocol security (IPsec) Internet Key Exchange Version 1 (IKEv1), Authenticated IP (AuthIP), and Internet Key Exchange Version 2 (IKEv2) counters that are generic and do not apply to a specific Internet Protocol version.

 This performance counter does not have instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.FileSystem Disk Activity.FileSystem Bytes Written(Logary.WinPerfCounter.Instance)">
<summary>
 FileSystem Bytes Written: Total Bytes Written by the FileSystem from disk drive
</summary>
</member>
<member name="M:Logary.WinPerfCounters.FileSystem Disk Activity.FileSystem Bytes Read(Logary.WinPerfCounter.Instance)">
<summary>
 FileSystem Bytes Read: Total Bytes Read by the FileSystem from disk drive
</summary>
</member>
<member name="T:Logary.WinPerfCounters.FileSystem Disk Activity">
<summary>
 FileSystem Disk Activity: The FileSystem Disk Activity performance counter set consists of counters that measure the aspect of filesystem&apos;s IO Activity.  This counter set measures the number of bytes filesystem read from and wrote to the disk drive.

 This performance counter does not have non-instance based counters
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Fax Service.Total pages">
<summary>
 Total pages: Total number of pages sent and received.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Fax Service.Total minutes sending and receiving">
<summary>
 Total minutes sending and receiving: Total number of minutes that the service sent and received faxes.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Fax Service.Total faxes sent and received">
<summary>
 Total faxes sent and received: Total number of faxes sent and received.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Fax Service.Total bytes">
<summary>
 Total bytes: Total number of bytes sent and received.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Fax Service.Received pages">
<summary>
 Received pages: Number of pages received.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Fax Service.Received faxes">
<summary>
 Received faxes: Number of successfully received faxes.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Fax Service.Pages sent">
<summary>
 Pages sent: Number of pages sent.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Fax Service.Minutes sending">
<summary>
 Minutes sending: Number of minutes that the service spent in sending successfully transmitted faxes.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Fax Service.Minutes receiving">
<summary>
 Minutes receiving: Number of minutes that the service received faxes.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Fax Service.Faxes sent">
<summary>
 Faxes sent: Number of faxes successfully sent.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Fax Service.Failed receptions">
<summary>
 Failed receptions: Number of faxes that service failed to receive.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Fax Service.Failed outgoing connections">
<summary>
 Failed outgoing connections: Number of outgoing connections that failed.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Fax Service.Failed faxes transmissions">
<summary>
 Failed faxes transmissions: Number of faxes that failed.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Fax Service.Bytes sent">
<summary>
 Bytes sent: Number of bytes sent.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Fax Service.Bytes received">
<summary>
 Bytes received: Number of bytes received.
</summary>
</member>
<member name="T:Logary.WinPerfCounters.Fax Service">
<summary>
 Fax Service: Fax Service Counter Set

 This performance counter does not have instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Event Tracing for Windows Session.Number of Real-Time Consumers(Logary.WinPerfCounter.Instance)">
<summary>
 Number of Real-Time Consumers: Number of consumers currently reading events from this session in real-time mode.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Event Tracing for Windows Session.Events Lost(Logary.WinPerfCounter.Instance)">
<summary>
 Events Lost: Total number of events that were not successfully logged since the start of the tracing session.  Events are lost due to limited space in the session&apos;s buffers.  To avoid lost events, consider increasing the buffer size or the number of buffers.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Event Tracing for Windows Session.Events Logged per sec(Logary.WinPerfCounter.Instance)">
<summary>
 Events Logged per sec: Rate at which events are logged to this session by providers that are enabled to this session (events/sec).
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Event Tracing for Windows Session.Buffer Memory Usage -- Paged Pool(Logary.WinPerfCounter.Instance)">
<summary>
 Buffer Memory Usage -- Paged Pool: Current size of paged memory allocated for the buffers associated with this session (in bytes).
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Event Tracing for Windows Session.Buffer Memory Usage -- Non-Paged Pool(Logary.WinPerfCounter.Instance)">
<summary>
 Buffer Memory Usage -- Non-Paged Pool: Current size of non-paged memory allocated for the buffers associated with this session (in bytes).
</summary>
</member>
<member name="T:Logary.WinPerfCounters.Event Tracing for Windows Session">
<summary>
 Event Tracing for Windows Session: The counters in this collection are related to individual Event Tracing for Windows sessions.

 This performance counter does not have non-instance based counters
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Event Tracing for Windows.Total Number of Distinct Pre-Enabled Providers">
<summary>
 Total Number of Distinct Pre-Enabled Providers: Number of unique tracing providers that have been enabled to a trace session but have not yet registered with ETW.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Event Tracing for Windows.Total Number of Distinct Enabled Providers">
<summary>
 Total Number of Distinct Enabled Providers: Number of distinct event providers that are enabled to ETW sessions; multiple instances of a provider are counted only once.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Event Tracing for Windows.Total Number of Distinct Disabled Providers">
<summary>
 Total Number of Distinct Disabled Providers: Number of unique tracing providers that are registered with the tracing subsystem but are not actively enabled to any trace session; multiple registered instances of a provider are counted only once.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Event Tracing for Windows.Total Number of Active Sessions">
<summary>
 Total Number of Active Sessions: Number of ETW tracing sessions currently active.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Event Tracing for Windows.Total Memory Usage --- Paged Pool">
<summary>
 Total Memory Usage --- Paged Pool: Current size of paged memory allocated for the buffers associated with all active sessions (in bytes).
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Event Tracing for Windows.Total Memory Usage --- Non-Paged Pool">
<summary>
 Total Memory Usage --- Non-Paged Pool: Current size of non-paged memory allocated for the buffers associated with all active sessions (in bytes).
</summary>
</member>
<member name="T:Logary.WinPerfCounters.Event Tracing for Windows">
<summary>
 Event Tracing for Windows: The counters in this collection refer to system-wide metrics about the performance of the Event Tracing for Windows subsystem.

 This performance counter does not have instance based counters
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Distributed Transaction Coordinator.Transactions/sec">
<summary>
 Transactions/sec: Transactions performed per second
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Distributed Transaction Coordinator.Response Time -- Minimum">
<summary>
 Response Time -- Minimum: Minimum time delta between transaction begin and commit
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Distributed Transaction Coordinator.Response Time -- Maximum">
<summary>
 Response Time -- Maximum: Maximum time delta between transaction begin and commit
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Distributed Transaction Coordinator.Response Time -- Average">
<summary>
 Response Time -- Average: Average time delta between transaction begin and commit
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Distributed Transaction Coordinator.In Doubt Transactions">
<summary>
 In Doubt Transactions: Number of in doubt transactions
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Distributed Transaction Coordinator.Force Committed Transactions">
<summary>
 Force Committed Transactions: Number of transactions committed by the system administrator
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Distributed Transaction Coordinator.Force Aborted Transactions">
<summary>
 Force Aborted Transactions: Number of transactions aborted by the system administrator
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Distributed Transaction Coordinator.Committed Transactions/sec">
<summary>
 Committed Transactions/sec: Transactions committed per second
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Distributed Transaction Coordinator.Committed Transactions">
<summary>
 Committed Transactions: Number of committed transactions
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Distributed Transaction Coordinator.Active Transactions Maximum">
<summary>
 Active Transactions Maximum: Maximum number of transactions ever concurrently active
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Distributed Transaction Coordinator.Active Transactions">
<summary>
 Active Transactions: Number of currently active transactions
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Distributed Transaction Coordinator.Aborted Transactions/sec">
<summary>
 Aborted Transactions/sec: Transactions aborted per second
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Distributed Transaction Coordinator.Aborted Transactions">
<summary>
 Aborted Transactions: Number of aborted transactions
</summary>
</member>
<member name="T:Logary.WinPerfCounters.Distributed Transaction Coordinator">
<summary>
 Distributed Transaction Coordinator: Microsoft Distributed Transaction Coordinator performance counters

 This performance counter does not have instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Distributed Routing Table.Unrecognized Messages Received(Logary.WinPerfCounter.Instance)">
<summary>
 Unrecognized Messages Received: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Distributed Routing Table.Stale Cache Entries(Logary.WinPerfCounter.Instance)">
<summary>
 Stale Cache Entries: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Distributed Routing Table.Solicit Messages Sent/second(Logary.WinPerfCounter.Instance)">
<summary>
 Solicit Messages Sent/second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Distributed Routing Table.Solicit Messages Received/second(Logary.WinPerfCounter.Instance)">
<summary>
 Solicit Messages Received/second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Distributed Routing Table.Send Failures(Logary.WinPerfCounter.Instance)">
<summary>
 Send Failures: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Distributed Routing Table.Searches(Logary.WinPerfCounter.Instance)">
<summary>
 Searches: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Distributed Routing Table.Request Messages Sent/second(Logary.WinPerfCounter.Instance)">
<summary>
 Request Messages Sent/second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Distributed Routing Table.Request Messages Received/second(Logary.WinPerfCounter.Instance)">
<summary>
 Request Messages Received/second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Distributed Routing Table.Registrations(Logary.WinPerfCounter.Instance)">
<summary>
 Registrations: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Distributed Routing Table.Receive Failures(Logary.WinPerfCounter.Instance)">
<summary>
 Receive Failures: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Distributed Routing Table.Lookup Messages Sent/second(Logary.WinPerfCounter.Instance)">
<summary>
 Lookup Messages Sent/second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Distributed Routing Table.Lookup Messages Received/second(Logary.WinPerfCounter.Instance)">
<summary>
 Lookup Messages Received/second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Distributed Routing Table.Inquire Messages Sent/second(Logary.WinPerfCounter.Instance)">
<summary>
 Inquire Messages Sent/second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Distributed Routing Table.Inquire Messages Received/second(Logary.WinPerfCounter.Instance)">
<summary>
 Inquire Messages Received/second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Distributed Routing Table.Flood Messages Sent/second(Logary.WinPerfCounter.Instance)">
<summary>
 Flood Messages Sent/second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Distributed Routing Table.Flood Messages Received/second(Logary.WinPerfCounter.Instance)">
<summary>
 Flood Messages Received/second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Distributed Routing Table.Estimated cloud size(Logary.WinPerfCounter.Instance)">
<summary>
 Estimated cloud size: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Distributed Routing Table.Cache Entries(Logary.WinPerfCounter.Instance)">
<summary>
 Cache Entries: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Distributed Routing Table.Average Bytes/second Sent(Logary.WinPerfCounter.Instance)">
<summary>
 Average Bytes/second Sent: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Distributed Routing Table.Average Bytes/second Received(Logary.WinPerfCounter.Instance)">
<summary>
 Average Bytes/second Received: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Distributed Routing Table.Authority Sent/second(Logary.WinPerfCounter.Instance)">
<summary>
 Authority Sent/second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Distributed Routing Table.Authority Messages Received/second(Logary.WinPerfCounter.Instance)">
<summary>
 Authority Messages Received/second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Distributed Routing Table.Advertise Messages Sent/second(Logary.WinPerfCounter.Instance)">
<summary>
 Advertise Messages Sent/second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Distributed Routing Table.Advertise Messages Received/second(Logary.WinPerfCounter.Instance)">
<summary>
 Advertise Messages Received/second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Distributed Routing Table.Ack Messages Sent/second(Logary.WinPerfCounter.Instance)">
<summary>
 Ack Messages Sent/second: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Distributed Routing Table.Ack Messages Received/second(Logary.WinPerfCounter.Instance)">
<summary>
 Ack Messages Received/second: -
</summary>
</member>
<member name="T:Logary.WinPerfCounters.Distributed Routing Table">
<summary>
 Distributed Routing Table: The Distributed Routing Table (DRT) performance object consists of counters that monitor the local DRT cache as well as counters that measure the rates at which DRT protocol messages are sent and received.

 This performance counter does not have instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.DNS64 Global.Other queries - Successful(Logary.WinPerfCounter.Instance)">
<summary>
 Other queries - Successful: Number of successfully served pass-through queries.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.DNS64 Global.Other queries - Failed(Logary.WinPerfCounter.Instance)">
<summary>
 Other queries - Failed: Number of unsuccessfully served pass-through queries.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.DNS64 Global.IP6.ARPA queries - Matched(Logary.WinPerfCounter.Instance)">
<summary>
 IP6.ARPA queries - Matched: Number of IP6.ARPA PTR queries, matched configured prefixes.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.DNS64 Global.AAAA queries - Successful(Logary.WinPerfCounter.Instance)">
<summary>
 AAAA queries - Successful: Number of AAAA queries successfully served by the DNS64 server.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.DNS64 Global.AAAA queries - Failed(Logary.WinPerfCounter.Instance)">
<summary>
 AAAA queries - Failed: Number of AAAA queries unsuccessfully served by the DNS64 server.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.DNS64 Global.AAAA - Synthesized records(Logary.WinPerfCounter.Instance)">
<summary>
 AAAA - Synthesized records: Number of synthesized AAAA records.
</summary>
</member>
<member name="T:Logary.WinPerfCounters.DNS64 Global">
<summary>
 DNS64 Global: Statistics of DNS64 on this machine.

 This performance counter does not have non-instance based counters
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Client Side Caching.SMB BranchCache Hashes Requested">
<summary>
 SMB BranchCache Hashes Requested: Count of hash requests sent to the server for BranchCache lookup
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Client Side Caching.SMB BranchCache Hashes Received">
<summary>
 SMB BranchCache Hashes Received: Count of hash requests successfully receieved back from the server for BranchCache lookup
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Client Side Caching.SMB BranchCache Hash Bytes Received">
<summary>
 SMB BranchCache Hash Bytes Received: Bytes of hash data successfully received back from the server for BranchCache lookup
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Client Side Caching.SMB BranchCache Bytes Requested From Server">
<summary>
 SMB BranchCache Bytes Requested From Server: Bytes not found in BranchCache and retrieved from the server
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Client Side Caching.SMB BranchCache Bytes Requested">
<summary>
 SMB BranchCache Bytes Requested: Bytes requested from BranchCache
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Client Side Caching.SMB BranchCache Bytes Received">
<summary>
 SMB BranchCache Bytes Received: Bytes received from BranchCache
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Client Side Caching.SMB BranchCache Bytes Published">
<summary>
 SMB BranchCache Bytes Published: Bytes published back to BranchCache
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Client Side Caching.Prefetch Operations Queued">
<summary>
 Prefetch Operations Queued: Count of prefetch operations queued to retrieve or publish BranchCache data
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Client Side Caching.Prefetch Bytes Read From Server">
<summary>
 Prefetch Bytes Read From Server: Bytes read by the BranchCache prefetcher from the server
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Client Side Caching.Prefetch Bytes Read From Cache">
<summary>
 Prefetch Bytes Read From Cache: Bytes read by the BranchCache prefetcher service from the Client Side Cache
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Client Side Caching.Application Bytes Read From Server (Not Cached)">
<summary>
 Application Bytes Read From Server (Not Cached): Transparently cached bytes read by applications from the server and not cached by the client
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Client Side Caching.Application Bytes Read From Server">
<summary>
 Application Bytes Read From Server: Transparently cached bytes read by applications from the server
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Client Side Caching.Application Bytes Read From Cache">
<summary>
 Application Bytes Read From Cache: Transparently cached bytes read by applications from the Client Side Cache
</summary>
</member>
<member name="T:Logary.WinPerfCounters.Client Side Caching">
<summary>
 Client Side Caching: Performance counters for SMB BranchCache for reduced bandwidth consumption

 This performance counter does not have instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Classification Engine: Rule Package Cache.Unrecoverable Cache Misses(Logary.WinPerfCounter.Instance)">
<summary>
 Unrecoverable Cache Misses: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Classification Engine: Rule Package Cache.Successful Cache Hits(Logary.WinPerfCounter.Instance)">
<summary>
 Successful Cache Hits: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Classification Engine: Rule Package Cache.Rule Package Memory Evictions(Logary.WinPerfCounter.Instance)">
<summary>
 Rule Package Memory Evictions: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Classification Engine: Rule Package Cache.Rule Package Count Evictions(Logary.WinPerfCounter.Instance)">
<summary>
 Rule Package Count Evictions: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Classification Engine: Rule Package Cache.Recoverable Cache Misses(Logary.WinPerfCounter.Instance)">
<summary>
 Recoverable Cache Misses: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Classification Engine: Rule Package Cache.Forced Rule Package Retrievals(Logary.WinPerfCounter.Instance)">
<summary>
 Forced Rule Package Retrievals: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Classification Engine: Rule Package Cache.Average Time to Retrieve Rules(Logary.WinPerfCounter.Instance)">
<summary>
 Average Time to Retrieve Rules: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Classification Engine: Rule Package Cache.Average Time to Load Rules(Logary.WinPerfCounter.Instance)">
<summary>
 Average Time to Load Rules: -
</summary>
</member>
<member name="T:Logary.WinPerfCounters.Classification Engine: Rule Package Cache">
<summary>
 Classification Engine: Rule Package Cache: Classification Engine: Rule Package Cache

 This performance counter does not have instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Classification Engine: Content Analysis Session.Average Time to Retrieve Data(Logary.WinPerfCounter.Instance)">
<summary>
 Average Time to Retrieve Data: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Classification Engine: Content Analysis Session.Average Time to Classify OOB Rules(Logary.WinPerfCounter.Instance)">
<summary>
 Average Time to Classify OOB Rules: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Classification Engine: Content Analysis Session.Average Time to Classify All Rules(Logary.WinPerfCounter.Instance)">
<summary>
 Average Time to Classify All Rules: -
</summary>
</member>
<member name="T:Logary.WinPerfCounters.Classification Engine: Content Analysis Session">
<summary>
 Classification Engine: Content Analysis Session: Classification Engine: Content Analysis Session

 This performance counter does not have instance based counters
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Cache.Sync Pin Reads/sec">
<summary>
 Sync Pin Reads/sec: Sync Pin Reads/sec is the frequency of reading data into the file system cache preparatory to writing the data back to disk.  Pages read in this fashion are pinned in memory at the completion of the read.  The file system will not regain control until the page is pinned in the file system cache, in particular if the disk must be accessed to retrieve the page.  While pinned, a page&apos;s physical address in the file system cache will not be altered.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Cache.Sync MDL Reads/sec">
<summary>
 Sync MDL Reads/sec: Sync MDL Reads/sec is the frequency of reads from the file system cache that use a Memory Descriptor List (MDL) to access the pages.  The MDL contains the physical address of each page in the transfer, thus permitting Direct Memory Access (DMA) of the pages.  If the accessed page(s) are not in main memory, the caller will wait for the pages to fault in from the disk.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Cache.Sync Fast Reads/sec">
<summary>
 Sync Fast Reads/sec: Sync Fast Reads/sec is the frequency of reads from the file system cache that bypass the installed file system and retrieve the data directly from the cache.  Normally, file I/O requests invoke the appropriate file system to retrieve data from a file, but this path permits direct retrieval of data from the cache without file system involvement if the data is in the cache.  Even if the data is not in the cache, one invocation of the file system is avoided.  If the data is not in the cache, the request (application program call) will wait until the data has been retrieved from disk.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Cache.Sync Data Maps/sec">
<summary>
 Sync Data Maps/sec: Sync Data Maps/sec counts the frequency that a file system, such as NTFS, maps a page of a file into the file system cache to read the page, and wishes to wait for the page to be retrieved if it is not in main memory.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Cache.Sync Copy Reads/sec">
<summary>
 Sync Copy Reads/sec: Sync Copy Reads/sec is the frequency of reads from pages of the file system cache that involve a memory copy of the data from the cache to the application&apos;s buffer.  The file system will not regain control until the copy operation is complete, even if the disk must be accessed to retrieve the page.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Cache.Read Aheads/sec">
<summary>
 Read Aheads/sec: Read Aheads/sec is the frequency of reads from the file system cache in which the Cache detects sequential access to a file.  The read aheads permit the data to be transferred in larger blocks than those being requested by the application, reducing the overhead per access.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Cache.Pin Reads/sec">
<summary>
 Pin Reads/sec: Pin Reads/sec is the frequency of reading data into the file system cache preparatory to writing the data back to disk.  Pages read in this fashion are pinned in memory at the completion of the read.  While pinned, a page&apos;s physical address in the file system cache will not be altered.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Cache.Pin Read Hits %">
<summary>
 Pin Read Hits %: Pin Read Hits is the percentage of pin read requests that hit the file system cache, i.e., did not require a disk read in order to provide access to the page in the file system cache.  While pinned, a page&apos;s physical address in the file system cache will not be altered.  The LAN Redirector uses this method for retrieving data from the cache, as does the LAN Server for small transfers.  This is usually the method used by the disk file systems as well.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Cache.MDL Reads/sec">
<summary>
 MDL Reads/sec: MDL Reads/sec is the frequency of reads from the file system cache that use a Memory Descriptor List (MDL) to access the data.  The MDL contains the physical address of each page involved in the transfer, and thus can employ a hardware Direct Memory Access (DMA) device to effect the copy.  The LAN Server uses this method for large transfers out of the server.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Cache.MDL Read Hits %">
<summary>
 MDL Read Hits %: MDL Read Hits is the percentage of Memory Descriptor List (MDL) Read requests to the file system cache that hit the cache, i.e., did not require disk accesses in order to provide memory access to the page(s) in the cache.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Cache.Lazy Write Pages/sec">
<summary>
 Lazy Write Pages/sec: Lazy Write Pages/sec is the rate at which the Lazy Writer thread has written to disk.  Lazy Writing is the process of updating the disk after the page has been changed in memory, so that the application that changed the file does not have to wait for the disk write to be complete before proceeding.  More than one page can be transferred on a single disk write operation.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Cache.Lazy Write Flushes/sec">
<summary>
 Lazy Write Flushes/sec: Lazy Write Flushes/sec is the rate at which the Lazy Writer thread has written to disk.  Lazy Writing is the process of updating the disk after the page has been changed in memory, so that the application that changed the file does not have to wait for the disk write to be complete before proceeding.  More than one page can be transferred by each write operation.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Cache.Fast Reads/sec">
<summary>
 Fast Reads/sec: Fast Reads/sec is the frequency of reads from the file system cache that bypass the installed file system and retrieve the data directly from the cache.  Normally, file I/O requests invoke the appropriate file system to retrieve data from a file, but this path permits direct retrieval of data from the cache without file system involvement if the data is in the cache.  Even if the data is not in the cache, one invocation of the file system is avoided.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Cache.Fast Read Resource Misses/sec">
<summary>
 Fast Read Resource Misses/sec: Fast Read Resource Misses/sec is the frequency of cache misses necessitated by the lack of available resources to satisfy the request.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Cache.Fast Read Not Possibles/sec">
<summary>
 Fast Read Not Possibles/sec: Fast Read Not Possibles/sec is the frequency of attempts by an Application Program Interface (API) function call to bypass the file system to get to data in the file system cache that could not be honored without invoking the file system.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Cache.Dirty Pages">
<summary>
 Dirty Pages: Total number of dirty pages on the system cache
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Cache.Dirty Page Threshold">
<summary>
 Dirty Page Threshold: Threshold for number of dirty pages on system cache
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Cache.Data Maps/sec">
<summary>
 Data Maps/sec: Data Maps/sec is the frequency that a file system such as NTFS, maps a page of a file into the file system cache to read the page.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Cache.Data Map Pins/sec">
<summary>
 Data Map Pins/sec: Data Map Pins/sec is the frequency of data maps in the file system cache that resulted in pinning a page in main memory, an action usually preparatory to writing to the file on disk.   While pinned, a page&apos;s physical address in main memory and virtual address in the file system cache will not be altered.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Cache.Data Map Hits %">
<summary>
 Data Map Hits %: Data Map Hits is the percentage of data maps in the file system cache that could be resolved without having to retrieve a page from the disk, because the page was already in physical memory.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Cache.Data Flushes/sec">
<summary>
 Data Flushes/sec: Data Flushes/sec is the rate at which the file system cache has flushed its contents to disk as the result of a request to flush or to satisfy a write-through file write request.  More than one page can be transferred on each flush operation.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Cache.Data Flush Pages/sec">
<summary>
 Data Flush Pages/sec: Data Flush Pages/sec is the number of pages the file system cache has flushed to disk as a result of a request to flush or to satisfy a write-through file write request.  More than one page can be transferred on each flush operation.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Cache.Copy Reads/sec">
<summary>
 Copy Reads/sec: Copy Reads/sec is the frequency of reads from pages of the file system cache that involve a memory copy of the data from the cache to the application&apos;s buffer.  The LAN Redirector uses this method for retrieving information from the file system cache, as does the LAN Server for small transfers.  This is a method used by the disk file systems as well.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Cache.Copy Read Hits %">
<summary>
 Copy Read Hits %: Copy Read Hits is the percentage of cache copy read requests that hit the cache, that is, they did not require a disk read in order to provide access to the page in the cache.  A copy read is a file read operation that is satisfied by a memory copy from a page in the cache to the application&apos;s buffer.  The LAN Redirector uses this method for retrieving information from the cache, as does the LAN Server for small transfers.  This is a method used by the disk file systems as well.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Cache.Async Pin Reads/sec">
<summary>
 Async Pin Reads/sec: Async Pin Reads/sec is the frequency of reading data into the file system cache preparatory to writing the data back to disk.  Pages read in this fashion are pinned in memory at the completion of the read.  The file system will regain control immediately even if the disk must be accessed to retrieve the page.  While pinned, a page&apos;s physical address will not be altered.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Cache.Async MDL Reads/sec">
<summary>
 Async MDL Reads/sec: Async MDL Reads/sec is the frequency of reads from the file system cache that use a Memory Descriptor List (MDL) to access the pages.  The MDL contains the physical address of each page in the transfer, thus permitting Direct Memory Access (DMA) of the pages.  If the accessed page(s) are not in main memory, the calling application program will not wait for the pages to fault in from disk.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Cache.Async Fast Reads/sec">
<summary>
 Async Fast Reads/sec: Async Fast Reads/sec is the frequency of reads from the file system cache that bypass the installed file system and retrieve the data directly from the cache.  Normally, file I/O requests will invoke the appropriate file system to retrieve data from a file, but this path permits data to be retrieved from the cache directly (without file system involvement) if the data is in the cache.  Even if the data is not in the cache, one invocation of the file system is avoided.  If the data is not in the cache, the request (application program call) will not wait until the data has been retrieved from disk, but will get control immediately.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Cache.Async Data Maps/sec">
<summary>
 Async Data Maps/sec: Async Data Maps/sec is the frequency that an application using a file system, such as NTFS, to map a page of a file into the file system cache to read the page, and does not wait for the page to be retrieved if it is not in main memory.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Cache.Async Copy Reads/sec">
<summary>
 Async Copy Reads/sec: Async Copy Reads/sec is the frequency of reads from pages of the file system cache that involve a memory copy of the data from the cache to the application&apos;s buffer.  The application will regain control immediately even if the disk must be accessed to retrieve the page.
</summary>
</member>
<member name="T:Logary.WinPerfCounters.Cache">
<summary>
 Cache: The Cache performance object  consists of counters that monitor the file system cache, an area of physical memory that stores recently used data as long as possible to permit access to the data without having to read from the disk.  Because applications typically use the cache, the cache is monitored as an indicator of application I/O operations.  When memory is plentiful, the cache can grow, but when memory is scarce, the cache can become too small to be effective.

 This performance counter does not have instance based counters
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Browser.Server List Requests/sec">
<summary>
 Server List Requests/sec: Server List Requests/sec is the rate at which requests to retrieve a list of browser servers have been processed by this workstation.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Browser.Server Announce Allocations Failed/sec">
<summary>
 Server Announce Allocations Failed/sec: Server Announce Allocations Failed/sec is the rate at which server (or domain) announcements have failed due to lack of memory.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Browser.Missed Server List Requests">
<summary>
 Missed Server List Requests: Missed Server List Requests is the number of requests to retrieve a list of browser servers that were received by this workstation, but could not be processed.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Browser.Missed Server Announcements">
<summary>
 Missed Server Announcements: Missed Server Announcements is the number of server announcements that have been missed due to configuration or allocation limits.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Browser.Missed Mailslot Datagrams">
<summary>
 Missed Mailslot Datagrams: Missed Mailslot Datagrams is the number of Mailslot Datagrams that have been discarded due to configuration or allocation limits.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Browser.Mailslot Writes/sec">
<summary>
 Mailslot Writes/sec: Mailslot Writes/sec is the rate at which mailslot messages have been successfully received.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Browser.Mailslot Writes Failed">
<summary>
 Mailslot Writes Failed: Mailslot Writes Failed is the total number of mailslot messages that have been successfully received, but that could not be written to the mailslot.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Browser.Mailslot Receives Failed">
<summary>
 Mailslot Receives Failed: Mailslot Receives Failed indicates the number of mailslot messages that could not be received due to transport failures.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Browser.Mailslot Opens Failed/sec">
<summary>
 Mailslot Opens Failed/sec: Mailslot Opens Failed/sec indicates the rate at which mailslot messages to be delivered to mailslots that are not present are received by this workstation.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Browser.Mailslot Allocations Failed">
<summary>
 Mailslot Allocations Failed: Mailslot Allocations Failed is the number of times the datagram receiver has failed to allocate a buffer to hold a user mailslot write.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Browser.Illegal Datagrams/sec">
<summary>
 Illegal Datagrams/sec: Illegal Datagrams/sec is the rate at which incorrectly formatted datagrams have been received by the workstation.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Browser.Enumerations Total/sec">
<summary>
 Enumerations Total/sec: Enumerations Total/sec is the rate at which browse requests have been processed by this workstation.  This is the sum of Enumerations Server/sec, Enumerations Domain/sec, and Enumerations Other/sec.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Browser.Enumerations Server/sec">
<summary>
 Enumerations Server/sec: Enumerations Server/sec is the rate at which server browse requests have been processed by this workstation.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Browser.Enumerations Other/sec">
<summary>
 Enumerations Other/sec: Enumerations Other/sec is the rate at which browse requests processed by this workstation are not domain or server browse requests.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Browser.Enumerations Domain/sec">
<summary>
 Enumerations Domain/sec: Enumerations Domain/sec is the rate at which domain browse requests have been processed by this workstation.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Browser.Election Packets/sec">
<summary>
 Election Packets/sec: Election Packets/sec is the rate at which browser election packets have been received by this workstation.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Browser.Duplicate Master Announcements">
<summary>
 Duplicate Master Announcements: Duplicate Master Announcements indicates the number of times that the master browser has detected another master browser on the same domain.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Browser.Announcements Total/sec">
<summary>
 Announcements Total/sec: Announcements Total/sec is the sum of Announcements Server/sec and Announcements Domain/sec.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Browser.Announcements Server/sec">
<summary>
 Announcements Server/sec: Announcements Server/sec is the rate at which the servers in this domain have announced themselves to this server.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.Browser.Announcements Domain/sec">
<summary>
 Announcements Domain/sec: Announcements Domain/sec is the rate at which a domain has announced itself to the network.
</summary>
</member>
<member name="T:Logary.WinPerfCounters.Browser">
<summary>
 Browser: The Browser performance object consists of counters that measure the rates of announcements, enumerations, and other Browser transmissions.

 This performance counter does not have instance based counters
</summary>
</member>
<member name="P:Logary.WinPerfCounters.BranchCache.WININET: Bytes from server">
<summary>
 WININET: Bytes from server: Total number of bytes received from the original content source.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.BranchCache.WININET: Bytes from cache">
<summary>
 WININET: Bytes from cache: Total number of bytes received from the local cache or peers.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.BranchCache.WINHTTP: Bytes from server">
<summary>
 WINHTTP: Bytes from server: Total number of bytes received from the original content source.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.BranchCache.WINHTTP: Bytes from cache">
<summary>
 WINHTTP: Bytes from cache: Total number of bytes received from the local cache or peers.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.BranchCache.SMB: Bytes from server">
<summary>
 SMB: Bytes from server: Total number of bytes received from the original content source.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.BranchCache.SMB: Bytes from cache">
<summary>
 SMB: Bytes from cache: Total number of bytes received from the local cache or peers.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.BranchCache.Retrieval: Bytes served">
<summary>
 Retrieval: Bytes served: Total number of bytes served by this peer to other peers.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.BranchCache.Retrieval: Bytes from server">
<summary>
 Retrieval: Bytes from server: Total number of bytes received from the original content source.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.BranchCache.Retrieval: Bytes from cache">
<summary>
 Retrieval: Bytes from cache: Total number of bytes received from the local cache or peers.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.BranchCache.Retrieval: Average branch rate">
<summary>
 Retrieval: Average branch rate: Average byte rate observed by the current peer while downloading contents from other peers in the branch.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.BranchCache.Publication Cache: Published contents">
<summary>
 Publication Cache: Published contents: Count of complete, hash persisted, published contents.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.BranchCache.OTHER: Bytes from server">
<summary>
 OTHER: Bytes from server: Total number of bytes received from the original content source.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.BranchCache.OTHER: Bytes from cache">
<summary>
 OTHER: Bytes from cache: Total number of bytes received from the local cache or peers.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.BranchCache.Local Cache: Cache partial file segments">
<summary>
 Local Cache: Cache partial file segments: Count of incomplete file segments that need additional data and/or validation.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.BranchCache.Local Cache: Cache complete file segments">
<summary>
 Local Cache: Cache complete file segments: Count of complete, content validated, file segments.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.BranchCache.Local Cache: Average access time">
<summary>
 Local Cache: Average access time: Average local cache access time when serving content to other clients or Hosted Caches.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.BranchCache.Hosted Cache: Segment offers queue size">
<summary>
 Hosted Cache: Segment offers queue size: Total number of segment offers queued for processing by the Hosted Cache.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.BranchCache.Hosted Cache: Client file segment offers made">
<summary>
 Hosted Cache: Client file segment offers made: Count of file segment offers made by peers.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.BranchCache.Discovery: Weighted average discovery time">
<summary>
 Discovery: Weighted average discovery time: Weighted average of time between when a peer discovery query was sent and when the first response arrived.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.BranchCache.Discovery: Successful discoveries">
<summary>
 Discovery: Successful discoveries: Total number of successful discoveries.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.BranchCache.Discovery: Attempted discoveries">
<summary>
 Discovery: Attempted discoveries: Total number of attempted peer discoveries.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.BranchCache.BITS: Bytes from server">
<summary>
 BITS: Bytes from server: Total number of bytes received from the original content source.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.BranchCache.BITS: Bytes from cache">
<summary>
 BITS: Bytes from cache: Total number of bytes received from the local cache or peers.
</summary>
</member>
<member name="T:Logary.WinPerfCounters.BranchCache">
<summary>
 BranchCache: Counters for measuring bandwidth and latency for BranchCache.

 This performance counter does not have instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.BitLocker.Write Subrequests/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Write Subrequests/sec: Number of write subrequests issued over the last second
</summary>
</member>
<member name="M:Logary.WinPerfCounters.BitLocker.Write Requests/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Write Requests/sec: Number of write requests received over the last second
</summary>
</member>
<member name="M:Logary.WinPerfCounters.BitLocker.Read Subrequests/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Read Subrequests/sec: Number of read subrequests issued over the last second
</summary>
</member>
<member name="M:Logary.WinPerfCounters.BitLocker.Read Requests/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Read Requests/sec: Number of read requests received over the last second
</summary>
</member>
<member name="M:Logary.WinPerfCounters.BitLocker.Min Write Split Size(Logary.WinPerfCounter.Instance)">
<summary>
 Min Write Split Size: Minimum write buffer split size in bytes during last interval
</summary>
</member>
<member name="M:Logary.WinPerfCounters.BitLocker.Min Read Split Size(Logary.WinPerfCounter.Instance)">
<summary>
 Min Read Split Size: Minimum read buffer split size in bytes during last interval
</summary>
</member>
<member name="M:Logary.WinPerfCounters.BitLocker.Max Write Split Size(Logary.WinPerfCounter.Instance)">
<summary>
 Max Write Split Size: Maximum write buffer split size in bytes during last interval
</summary>
</member>
<member name="M:Logary.WinPerfCounters.BitLocker.Max Read Split Size(Logary.WinPerfCounter.Instance)">
<summary>
 Max Read Split Size: Maximum read buffer split size in bytes during last interval
</summary>
</member>
<member name="T:Logary.WinPerfCounters.BitLocker">
<summary>
 BitLocker: BitLocker Drive Encryption performance counters

 This performance counter does not have non-instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Authorization Manager Applications.Total number of scopes(Logary.WinPerfCounter.Instance)">
<summary>
 Total number of scopes: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters.Authorization Manager Applications.Number of Scopes loaded in memory(Logary.WinPerfCounter.Instance)">
<summary>
 Number of Scopes loaded in memory: -
</summary>
</member>
<member name="T:Logary.WinPerfCounters.Authorization Manager Applications">
<summary>
 Authorization Manager Applications: The set of Counters for Authorization Manager application object

 This performance counter does not have instance based counters
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ASP_NET v4_0_30319.Worker Processes Running">
<summary>
 Worker Processes Running: Number of worker processes running on the machine.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ASP_NET v4_0_30319.Worker Process Restarts">
<summary>
 Worker Process Restarts: Number of times a worker process has restarted on the machine.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ASP_NET v4_0_30319.State Server Sessions Total">
<summary>
 State Server Sessions Total: The number of sessions total.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ASP_NET v4_0_30319.State Server Sessions Timed Out">
<summary>
 State Server Sessions Timed Out: The number of sessions timed out.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ASP_NET v4_0_30319.State Server Sessions Active">
<summary>
 State Server Sessions Active: The current number of sessions currently active.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ASP_NET v4_0_30319.State Server Sessions Abandoned">
<summary>
 State Server Sessions Abandoned: The number of sessions that have been explicitly abandoned.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ASP_NET v4_0_30319.Requests Rejected">
<summary>
 Requests Rejected: The number of requests rejected because the request queue was full.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ASP_NET v4_0_30319.Requests Queued">
<summary>
 Requests Queued: The number of requests waiting to be processed.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ASP_NET v4_0_30319.Requests In Native Queue">
<summary>
 Requests In Native Queue: Requests queued because the concurrency limits have been exceeded.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ASP_NET v4_0_30319.Requests Disconnected">
<summary>
 Requests Disconnected: The number of requests disconnected due to communication errors or user terminated.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ASP_NET v4_0_30319.Requests Current">
<summary>
 Requests Current: The current number of requests, including those that are queued, currently executing, or waiting to be written to the client.  Under the ASP.NET process model, when this counter exceeds the requestQueueLimit defined in the processModel configuration section, ASP.NET will begin rejecting requests.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ASP_NET v4_0_30319.Request Wait Time">
<summary>
 Request Wait Time: The number of milliseconds the most recent request was waiting in the queue.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ASP_NET v4_0_30319.Request Execution Time">
<summary>
 Request Execution Time: The number of milliseconds that it took to execute the most recent request.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ASP_NET v4_0_30319.Request Error Events Raised">
<summary>
 Request Error Events Raised: Number of runtime error events raised since the application was started.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ASP_NET v4_0_30319.Infrastructure Error Events Raised">
<summary>
 Infrastructure Error Events Raised: Number of HTTP error events raised since the application was started.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ASP_NET v4_0_30319.Error Events Raised">
<summary>
 Error Events Raised: Number of error events raised since the application was started.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ASP_NET v4_0_30319.Audit Success Events Raised">
<summary>
 Audit Success Events Raised: Number of audit successes in the application since it was started.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ASP_NET v4_0_30319.Audit Failure Events Raised">
<summary>
 Audit Failure Events Raised: Number of audit failures in the application since it was started.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ASP_NET v4_0_30319.Applications Running">
<summary>
 Applications Running: Number of currently running web applications.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ASP_NET v4_0_30319.Application Restarts">
<summary>
 Application Restarts: Number of times the application has been restarted during the web server&apos;s lifetime.
</summary>
</member>
<member name="T:Logary.WinPerfCounters.ASP_NET v4_0_30319">
<summary>
 ASP.NET v4.0.30319: ASP.NET global performance counters

 This performance counter does not have instance based counters
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ASP_NET State Service.State Server Sessions Total">
<summary>
 State Server Sessions Total: The number of sessions total.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ASP_NET State Service.State Server Sessions Timed Out">
<summary>
 State Server Sessions Timed Out: The number of sessions timed out.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ASP_NET State Service.State Server Sessions Active">
<summary>
 State Server Sessions Active: The current number of sessions currently active.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ASP_NET State Service.State Server Sessions Abandoned">
<summary>
 State Server Sessions Abandoned: The number of sessions that have been explicitly abandoned.
</summary>
</member>
<member name="T:Logary.WinPerfCounters.ASP_NET State Service">
<summary>
 ASP.NET State Service: ASP.NET State Service

 This performance counter does not have instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Apps v4_0_30319.Viewstate MAC Validation Failure(Logary.WinPerfCounter.Instance)">
<summary>
 Viewstate MAC Validation Failure: Number of viewstate MAC validations that failed since the application was started.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Apps v4_0_30319.Transactions/Sec(Logary.WinPerfCounter.Instance)">
<summary>
 Transactions/Sec: Transactions started per second.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Apps v4_0_30319.Transactions Total(Logary.WinPerfCounter.Instance)">
<summary>
 Transactions Total: The total number of transactions since the application was started.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Apps v4_0_30319.Transactions Pending(Logary.WinPerfCounter.Instance)">
<summary>
 Transactions Pending: Number of transactions in progress.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Apps v4_0_30319.Transactions Committed(Logary.WinPerfCounter.Instance)">
<summary>
 Transactions Committed: The number of transactions committed.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Apps v4_0_30319.Transactions Aborted(Logary.WinPerfCounter.Instance)">
<summary>
 Transactions Aborted: The number of transactions aborted.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Apps v4_0_30319.Sessions Total(Logary.WinPerfCounter.Instance)">
<summary>
 Sessions Total: Total number of sessions since the application was started.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Apps v4_0_30319.Sessions Timed Out(Logary.WinPerfCounter.Instance)">
<summary>
 Sessions Timed Out: The number of sessions timed out.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Apps v4_0_30319.Sessions Active(Logary.WinPerfCounter.Instance)">
<summary>
 Sessions Active: The current number of sessions currently active.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Apps v4_0_30319.Sessions Abandoned(Logary.WinPerfCounter.Instance)">
<summary>
 Sessions Abandoned: The number of sessions that have been explicitly abandoned.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Apps v4_0_30319.Session State Server connections total(Logary.WinPerfCounter.Instance)">
<summary>
 Session State Server connections total: The total number of connections to the State Server used by session state.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Apps v4_0_30319.Session SQL Server connections total(Logary.WinPerfCounter.Instance)">
<summary>
 Session SQL Server connections total: The total number of connections to the SQL Server used by session state.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Apps v4_0_30319.Requests/Sec(Logary.WinPerfCounter.Instance)">
<summary>
 Requests/Sec: The number of requests executed per second.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Apps v4_0_30319.Requests Total (WebSockets)(Logary.WinPerfCounter.Instance)">
<summary>
 Requests Total (WebSockets): The total number of WebSocket requests since the application was started.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Apps v4_0_30319.Requests Total(Logary.WinPerfCounter.Instance)">
<summary>
 Requests Total: The total number of requests since the application was started.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Apps v4_0_30319.Requests Timed Out(Logary.WinPerfCounter.Instance)">
<summary>
 Requests Timed Out: The number of requests that timed out.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Apps v4_0_30319.Requests Succeeded (WebSockets)(Logary.WinPerfCounter.Instance)">
<summary>
 Requests Succeeded (WebSockets): Total number of WebSocket requests that completed gracefully.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Apps v4_0_30319.Requests Succeeded(Logary.WinPerfCounter.Instance)">
<summary>
 Requests Succeeded: The number of requests that executed successfully.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Apps v4_0_30319.Requests Rejected(Logary.WinPerfCounter.Instance)">
<summary>
 Requests Rejected: The number of requests rejected because the application request queue was full.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Apps v4_0_30319.Requests Not Found(Logary.WinPerfCounter.Instance)">
<summary>
 Requests Not Found: The number of requests for resources that were not found.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Apps v4_0_30319.Requests Not Authorized(Logary.WinPerfCounter.Instance)">
<summary>
 Requests Not Authorized: Number of requests failed due to unauthorized access.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Apps v4_0_30319.Requests In Application Queue(Logary.WinPerfCounter.Instance)">
<summary>
 Requests In Application Queue: The number of requests in the application request queue.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Apps v4_0_30319.Requests Failed (WebSockets)(Logary.WinPerfCounter.Instance)">
<summary>
 Requests Failed (WebSockets): Total number of WebSocket requests that ended up in an aborted state.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Apps v4_0_30319.Requests Failed(Logary.WinPerfCounter.Instance)">
<summary>
 Requests Failed: Total number of failed requests.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Apps v4_0_30319.Requests Executing (WebSockets)(Logary.WinPerfCounter.Instance)">
<summary>
 Requests Executing (WebSockets): The number of WebSocket requests currently executing.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Apps v4_0_30319.Requests Executing(Logary.WinPerfCounter.Instance)">
<summary>
 Requests Executing: The number of requests currently executing.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Apps v4_0_30319.Requests Disconnected(Logary.WinPerfCounter.Instance)">
<summary>
 Requests Disconnected: The number of requests disconnected due to communication errors or user terminated.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Apps v4_0_30319.Request Wait Time(Logary.WinPerfCounter.Instance)">
<summary>
 Request Wait Time: The number of milliseconds the most recent request was waiting in the queue.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Apps v4_0_30319.Request Execution Time(Logary.WinPerfCounter.Instance)">
<summary>
 Request Execution Time: The number of milliseconds that it took to execute the most recent request.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Apps v4_0_30319.Request Events Raised/Sec(Logary.WinPerfCounter.Instance)">
<summary>
 Request Events Raised/Sec: Number of request events raised per second.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Apps v4_0_30319.Request Events Raised(Logary.WinPerfCounter.Instance)">
<summary>
 Request Events Raised: Number of request events raised since the application was started
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Apps v4_0_30319.Request Error Events Raised/Sec(Logary.WinPerfCounter.Instance)">
<summary>
 Request Error Events Raised/Sec: Number of runtime error events per second.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Apps v4_0_30319.Request Error Events Raised(Logary.WinPerfCounter.Instance)">
<summary>
 Request Error Events Raised: Number of runtime error events raised since the application was started.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Apps v4_0_30319.Request Bytes Out Total (WebSockets)(Logary.WinPerfCounter.Instance)">
<summary>
 Request Bytes Out Total (WebSockets): The total size, in bytes, of data sent to a client on WebSocket connections.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Apps v4_0_30319.Request Bytes Out Total(Logary.WinPerfCounter.Instance)">
<summary>
 Request Bytes Out Total: The total size, in bytes, of responses sent to a client.  This does not include standard HTTP response headers.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Apps v4_0_30319.Request Bytes In Total (WebSockets)(Logary.WinPerfCounter.Instance)">
<summary>
 Request Bytes In Total (WebSockets): The total size, in bytes, of data received by ASP.NET on WebSocket connections.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Apps v4_0_30319.Request Bytes In Total(Logary.WinPerfCounter.Instance)">
<summary>
 Request Bytes In Total: The total size, in bytes, of all requests.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Apps v4_0_30319.Pipeline Instance Count(Logary.WinPerfCounter.Instance)">
<summary>
 Pipeline Instance Count: Number of active pipeline instances.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Apps v4_0_30319.Output Cache Turnover Rate(Logary.WinPerfCounter.Instance)">
<summary>
 Output Cache Turnover Rate: Number of additions and removals to the output cache per second.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Apps v4_0_30319.Output Cache Trims(Logary.WinPerfCounter.Instance)">
<summary>
 Output Cache Trims: Total number of entries forcibly removed from the cache due to memory pressure that were originally inserted into the cache by the output cache feature.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Apps v4_0_30319.Output Cache Misses(Logary.WinPerfCounter.Instance)">
<summary>
 Output Cache Misses: Total number of output cacheable requests not served from the output cache.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Apps v4_0_30319.Output Cache Hits(Logary.WinPerfCounter.Instance)">
<summary>
 Output Cache Hits: Total number of output cacheable requests served from the output cache.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Apps v4_0_30319.Output Cache Hit Ratio Base(Logary.WinPerfCounter.Instance)">
<summary>
 Output Cache Hit Ratio Base: Output Cache Hit Ratio Base
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Apps v4_0_30319.Output Cache Hit Ratio(Logary.WinPerfCounter.Instance)">
<summary>
 Output Cache Hit Ratio: Ratio of hits to requests for output cacheable requests.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Apps v4_0_30319.Output Cache Entries(Logary.WinPerfCounter.Instance)">
<summary>
 Output Cache Entries: Current number of entries in the output cache.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Apps v4_0_30319.Membership Authentication Success(Logary.WinPerfCounter.Instance)">
<summary>
 Membership Authentication Success: Number of successful membership credential validations since the application was started.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Apps v4_0_30319.Membership Authentication Failure(Logary.WinPerfCounter.Instance)">
<summary>
 Membership Authentication Failure: Number of failed membership credential validations since the application was started.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Apps v4_0_30319.Managed Memory Used (estimated)(Logary.WinPerfCounter.Instance)">
<summary>
 Managed Memory Used (estimated): Estimated managed heap memory consumption (in KB) by the application.  The accuracy of this counter varies depending on the duration of elapsed time since the last full managed memory heap collection.  Note that this counter is only updated with new data every five seconds.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Apps v4_0_30319.Infrastructure Error Events Raised/Sec(Logary.WinPerfCounter.Instance)">
<summary>
 Infrastructure Error Events Raised/Sec: Number of HTTP error events raised per second.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Apps v4_0_30319.Infrastructure Error Events Raised(Logary.WinPerfCounter.Instance)">
<summary>
 Infrastructure Error Events Raised: Number of HTTP error events raised since the application was started.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Apps v4_0_30319.Forms Authentication Success(Logary.WinPerfCounter.Instance)">
<summary>
 Forms Authentication Success: Number of successful forms authentication ticket validations since the application was started.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Apps v4_0_30319.Forms Authentication Failure(Logary.WinPerfCounter.Instance)">
<summary>
 Forms Authentication Failure: Number of failed forms authentication ticket validations since the application was started.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Apps v4_0_30319.Events Raised/Sec(Logary.WinPerfCounter.Instance)">
<summary>
 Events Raised/Sec: Total number of instrumentation events per second.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Apps v4_0_30319.Events Raised(Logary.WinPerfCounter.Instance)">
<summary>
 Events Raised: Total number of instrumentation events raised since the application was started.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Apps v4_0_30319.Errors Unhandled During Execution/Sec(Logary.WinPerfCounter.Instance)">
<summary>
 Errors Unhandled During Execution/Sec: Rate of unhandled errors.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Apps v4_0_30319.Errors Unhandled During Execution(Logary.WinPerfCounter.Instance)">
<summary>
 Errors Unhandled During Execution: Number of errors not handled by user code, but by the default error handler.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Apps v4_0_30319.Errors Total/Sec(Logary.WinPerfCounter.Instance)">
<summary>
 Errors Total/Sec: Rate of errors occurred.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Apps v4_0_30319.Errors Total(Logary.WinPerfCounter.Instance)">
<summary>
 Errors Total: Total number of errors occurred.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Apps v4_0_30319.Errors During Preprocessing(Logary.WinPerfCounter.Instance)">
<summary>
 Errors During Preprocessing: Number of errors that have occurred during parsing and configuration.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Apps v4_0_30319.Errors During Execution(Logary.WinPerfCounter.Instance)">
<summary>
 Errors During Execution: Number of errors that have occurred during the processing of a request.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Apps v4_0_30319.Errors During Compilation(Logary.WinPerfCounter.Instance)">
<summary>
 Errors During Compilation: Number of errors that have occurred during compilation.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Apps v4_0_30319.Error Events Raised/Sec(Logary.WinPerfCounter.Instance)">
<summary>
 Error Events Raised/Sec: Number of error events per second.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Apps v4_0_30319.Error Events Raised(Logary.WinPerfCounter.Instance)">
<summary>
 Error Events Raised: Number of error events raised since the application was started.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Apps v4_0_30319.Debugging Requests(Logary.WinPerfCounter.Instance)">
<summary>
 Debugging Requests: Number of debugging requests processed.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Apps v4_0_30319.Compilations Total(Logary.WinPerfCounter.Instance)">
<summary>
 Compilations Total: Number of .asax, .ascx, .ashx, .asmx, or .aspx source files dynamically compiled.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Apps v4_0_30319.Cache Total Turnover Rate(Logary.WinPerfCounter.Instance)">
<summary>
 Cache Total Turnover Rate: Number of additions and removals to the total cache per second.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Apps v4_0_30319.Cache Total Trims(Logary.WinPerfCounter.Instance)">
<summary>
 Cache Total Trims: Total number of entries forcibly removed from the cache due to memory pressure.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Apps v4_0_30319.Cache Total Misses(Logary.WinPerfCounter.Instance)">
<summary>
 Cache Total Misses: Total number of cache misses.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Apps v4_0_30319.Cache Total Hits(Logary.WinPerfCounter.Instance)">
<summary>
 Cache Total Hits: Total number of hits from the cache.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Apps v4_0_30319.Cache Total Hit Ratio Base(Logary.WinPerfCounter.Instance)">
<summary>
 Cache Total Hit Ratio Base: Cache Total Hit Ratio Base
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Apps v4_0_30319.Cache Total Hit Ratio(Logary.WinPerfCounter.Instance)">
<summary>
 Cache Total Hit Ratio: Ratio of hits from all cache calls.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Apps v4_0_30319.Cache Total Entries(Logary.WinPerfCounter.Instance)">
<summary>
 Cache Total Entries: Total number of entries within the cache (both internal and user added)
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Apps v4_0_30319.Cache API Turnover Rate(Logary.WinPerfCounter.Instance)">
<summary>
 Cache API Turnover Rate: Number of additions and removals to the API cache per second.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Apps v4_0_30319.Cache API Trims(Logary.WinPerfCounter.Instance)">
<summary>
 Cache API Trims: Total number of entries forcibly removed from the cache due to memory pressure that were originally inserted into the cache using one of the public cache APIs.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Apps v4_0_30319.Cache API Misses(Logary.WinPerfCounter.Instance)">
<summary>
 Cache API Misses: Number of cache misses called from user code.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Apps v4_0_30319.Cache API Hits(Logary.WinPerfCounter.Instance)">
<summary>
 Cache API Hits: Number of cache hits from user code.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Apps v4_0_30319.Cache API Hit Ratio Base(Logary.WinPerfCounter.Instance)">
<summary>
 Cache API Hit Ratio Base: Cache API Hit Ratio Base
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Apps v4_0_30319.Cache API Hit Ratio(Logary.WinPerfCounter.Instance)">
<summary>
 Cache API Hit Ratio: Ratio of hits called from user code.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Apps v4_0_30319.Cache API Entries(Logary.WinPerfCounter.Instance)">
<summary>
 Cache API Entries: Total number of entries within the cache added by the user.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Apps v4_0_30319.Cache % Process Memory Limit Used Base(Logary.WinPerfCounter.Instance)">
<summary>
 Cache % Process Memory Limit Used Base: Cache % Process Memory Limit Used Base
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Apps v4_0_30319.Cache % Process Memory Limit Used(Logary.WinPerfCounter.Instance)">
<summary>
 Cache % Process Memory Limit Used: The value of private bytes for the worker process divided by the private bytes memory limit for the cache, as a percentage.  When this reaches 100%, half of the cache entries will be forcibly removed.  The __Total__ instance is the average of all instances, and therefore cannot be used to determine when cache entries will be forcibly removed.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Apps v4_0_30319.Cache % Machine Memory Limit Used Base(Logary.WinPerfCounter.Instance)">
<summary>
 Cache % Machine Memory Limit Used Base: Cache % Machine Memory Limit Used Base
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Apps v4_0_30319.Cache % Machine Memory Limit Used(Logary.WinPerfCounter.Instance)">
<summary>
 Cache % Machine Memory Limit Used: The amount of physical memory used by the machine divided by the physical memory limit for the cache, as a percentage.  When this reaches 100%, half of the cache entries will be forcibly removed.  The __Total__ instance is the average of all instances, and therefore cannot be used to determine when cache entries will be forcibly removed.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Apps v4_0_30319.Audit Success Events Raised(Logary.WinPerfCounter.Instance)">
<summary>
 Audit Success Events Raised: Number of audit successes in the application since it was started.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Apps v4_0_30319.Audit Failure Events Raised(Logary.WinPerfCounter.Instance)">
<summary>
 Audit Failure Events Raised: Number of audit failures in the application since it was started.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Apps v4_0_30319.Application Lifetime Events/Sec(Logary.WinPerfCounter.Instance)">
<summary>
 Application Lifetime Events/Sec: Number of application events raised per second.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Apps v4_0_30319.Application Lifetime Events(Logary.WinPerfCounter.Instance)">
<summary>
 Application Lifetime Events: Number of application events raised since the application was started.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Apps v4_0_30319.Anonymous Requests/Sec(Logary.WinPerfCounter.Instance)">
<summary>
 Anonymous Requests/Sec: Number of Authentication Anonymous Requests/Sec
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Apps v4_0_30319.Anonymous Requests(Logary.WinPerfCounter.Instance)">
<summary>
 Anonymous Requests: Number of requests utilizing anonymous authentication.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Apps v4_0_30319.% Managed Processor Time Base (estimated)(Logary.WinPerfCounter.Instance)">
<summary>
 % Managed Processor Time Base (estimated): % Managed Processor Time Base (estimated)
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Apps v4_0_30319.% Managed Processor Time (estimated)(Logary.WinPerfCounter.Instance)">
<summary>
 % Managed Processor Time (estimated): Estimated percentage of elapsed time that the processor spends executing managed application code.  This counter only tracks processor time of managed threads in the application.  It does not include additional processor time spent executing on non-managed threads.  Note that this counter is only updated with new data every five seconds.
</summary>
</member>
<member name="T:Logary.WinPerfCounters.ASP_NET Apps v4_0_30319">
<summary>
 ASP.NET Apps v4.0.30319: ASP.NET application performance counters

 This performance counter does not have non-instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Applications.Viewstate MAC Validation Failure(Logary.WinPerfCounter.Instance)">
<summary>
 Viewstate MAC Validation Failure: Number of viewstate MAC validations that failed since the application was started.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Applications.Transactions/Sec(Logary.WinPerfCounter.Instance)">
<summary>
 Transactions/Sec: Transactions started per second.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Applications.Transactions Total(Logary.WinPerfCounter.Instance)">
<summary>
 Transactions Total: The total number of transactions since the application was started.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Applications.Transactions Pending(Logary.WinPerfCounter.Instance)">
<summary>
 Transactions Pending: Number of transactions in progress.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Applications.Transactions Committed(Logary.WinPerfCounter.Instance)">
<summary>
 Transactions Committed: The number of transactions committed.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Applications.Transactions Aborted(Logary.WinPerfCounter.Instance)">
<summary>
 Transactions Aborted: The number of transactions aborted.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Applications.Sessions Total(Logary.WinPerfCounter.Instance)">
<summary>
 Sessions Total: Total number of sessions since the application was started.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Applications.Sessions Timed Out(Logary.WinPerfCounter.Instance)">
<summary>
 Sessions Timed Out: The number of sessions timed out.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Applications.Sessions Active(Logary.WinPerfCounter.Instance)">
<summary>
 Sessions Active: The current number of sessions currently active.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Applications.Sessions Abandoned(Logary.WinPerfCounter.Instance)">
<summary>
 Sessions Abandoned: The number of sessions that have been explicitly abandoned.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Applications.Session State Server connections total(Logary.WinPerfCounter.Instance)">
<summary>
 Session State Server connections total: The total number of connections to the State Server used by session state.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Applications.Session SQL Server connections total(Logary.WinPerfCounter.Instance)">
<summary>
 Session SQL Server connections total: The total number of connections to the SQL Server used by session state.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Applications.Requests/Sec(Logary.WinPerfCounter.Instance)">
<summary>
 Requests/Sec: The number of requests executed per second.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Applications.Requests Total (WebSockets)(Logary.WinPerfCounter.Instance)">
<summary>
 Requests Total (WebSockets): The total number of WebSocket requests since the application was started.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Applications.Requests Total(Logary.WinPerfCounter.Instance)">
<summary>
 Requests Total: The total number of requests since the application was started.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Applications.Requests Timed Out(Logary.WinPerfCounter.Instance)">
<summary>
 Requests Timed Out: The number of requests that timed out.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Applications.Requests Succeeded (WebSockets)(Logary.WinPerfCounter.Instance)">
<summary>
 Requests Succeeded (WebSockets): Total number of WebSocket requests that completed gracefully.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Applications.Requests Succeeded(Logary.WinPerfCounter.Instance)">
<summary>
 Requests Succeeded: The number of requests that executed successfully.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Applications.Requests Rejected(Logary.WinPerfCounter.Instance)">
<summary>
 Requests Rejected: The number of requests rejected because the application request queue was full.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Applications.Requests Not Found(Logary.WinPerfCounter.Instance)">
<summary>
 Requests Not Found: The number of requests for resources that were not found.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Applications.Requests Not Authorized(Logary.WinPerfCounter.Instance)">
<summary>
 Requests Not Authorized: Number of requests failed due to unauthorized access.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Applications.Requests In Application Queue(Logary.WinPerfCounter.Instance)">
<summary>
 Requests In Application Queue: The number of requests in the application request queue.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Applications.Requests Failed (WebSockets)(Logary.WinPerfCounter.Instance)">
<summary>
 Requests Failed (WebSockets): Total number of WebSocket requests that ended up in an aborted state.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Applications.Requests Failed(Logary.WinPerfCounter.Instance)">
<summary>
 Requests Failed: Total number of failed requests.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Applications.Requests Executing (WebSockets)(Logary.WinPerfCounter.Instance)">
<summary>
 Requests Executing (WebSockets): The number of WebSocket requests currently executing.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Applications.Requests Executing(Logary.WinPerfCounter.Instance)">
<summary>
 Requests Executing: The number of requests currently executing.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Applications.Requests Disconnected(Logary.WinPerfCounter.Instance)">
<summary>
 Requests Disconnected: The number of requests disconnected due to communication errors or user terminated.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Applications.Request Wait Time(Logary.WinPerfCounter.Instance)">
<summary>
 Request Wait Time: The number of milliseconds the most recent request was waiting in the queue.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Applications.Request Execution Time(Logary.WinPerfCounter.Instance)">
<summary>
 Request Execution Time: The number of milliseconds that it took to execute the most recent request.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Applications.Request Events Raised/Sec(Logary.WinPerfCounter.Instance)">
<summary>
 Request Events Raised/Sec: Number of request events raised per second.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Applications.Request Events Raised(Logary.WinPerfCounter.Instance)">
<summary>
 Request Events Raised: Number of request events raised since the application was started
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Applications.Request Error Events Raised/Sec(Logary.WinPerfCounter.Instance)">
<summary>
 Request Error Events Raised/Sec: Number of runtime error events per second.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Applications.Request Error Events Raised(Logary.WinPerfCounter.Instance)">
<summary>
 Request Error Events Raised: Number of runtime error events raised since the application was started.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Applications.Request Bytes Out Total (WebSockets)(Logary.WinPerfCounter.Instance)">
<summary>
 Request Bytes Out Total (WebSockets): The total size, in bytes, of data sent to a client on WebSocket connections.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Applications.Request Bytes Out Total(Logary.WinPerfCounter.Instance)">
<summary>
 Request Bytes Out Total: The total size, in bytes, of responses sent to a client.  This does not include standard HTTP response headers.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Applications.Request Bytes In Total (WebSockets)(Logary.WinPerfCounter.Instance)">
<summary>
 Request Bytes In Total (WebSockets): The total size, in bytes, of data received by ASP.NET on WebSocket connections.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Applications.Request Bytes In Total(Logary.WinPerfCounter.Instance)">
<summary>
 Request Bytes In Total: The total size, in bytes, of all requests.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Applications.Pipeline Instance Count(Logary.WinPerfCounter.Instance)">
<summary>
 Pipeline Instance Count: Number of active pipeline instances.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Applications.Output Cache Turnover Rate(Logary.WinPerfCounter.Instance)">
<summary>
 Output Cache Turnover Rate: Number of additions and removals to the output cache per second.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Applications.Output Cache Trims(Logary.WinPerfCounter.Instance)">
<summary>
 Output Cache Trims: Total number of entries forcibly removed from the cache due to memory pressure that were originally inserted into the cache by the output cache feature.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Applications.Output Cache Misses(Logary.WinPerfCounter.Instance)">
<summary>
 Output Cache Misses: Total number of output cacheable requests not served from the output cache.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Applications.Output Cache Hits(Logary.WinPerfCounter.Instance)">
<summary>
 Output Cache Hits: Total number of output cacheable requests served from the output cache.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Applications.Output Cache Hit Ratio Base(Logary.WinPerfCounter.Instance)">
<summary>
 Output Cache Hit Ratio Base: Output Cache Hit Ratio Base
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Applications.Output Cache Hit Ratio(Logary.WinPerfCounter.Instance)">
<summary>
 Output Cache Hit Ratio: Ratio of hits to requests for output cacheable requests.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Applications.Output Cache Entries(Logary.WinPerfCounter.Instance)">
<summary>
 Output Cache Entries: Current number of entries in the output cache.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Applications.Membership Authentication Success(Logary.WinPerfCounter.Instance)">
<summary>
 Membership Authentication Success: Number of successful membership credential validations since the application was started.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Applications.Membership Authentication Failure(Logary.WinPerfCounter.Instance)">
<summary>
 Membership Authentication Failure: Number of failed membership credential validations since the application was started.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Applications.Managed Memory Used (estimated)(Logary.WinPerfCounter.Instance)">
<summary>
 Managed Memory Used (estimated): Estimated managed heap memory consumption (in KB) by the application.  The accuracy of this counter varies depending on the duration of elapsed time since the last full managed memory heap collection.  Note that this counter is only updated with new data every five seconds.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Applications.Infrastructure Error Events Raised/Sec(Logary.WinPerfCounter.Instance)">
<summary>
 Infrastructure Error Events Raised/Sec: Number of HTTP error events raised per second.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Applications.Infrastructure Error Events Raised(Logary.WinPerfCounter.Instance)">
<summary>
 Infrastructure Error Events Raised: Number of HTTP error events raised since the application was started.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Applications.Forms Authentication Success(Logary.WinPerfCounter.Instance)">
<summary>
 Forms Authentication Success: Number of successful forms authentication ticket validations since the application was started.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Applications.Forms Authentication Failure(Logary.WinPerfCounter.Instance)">
<summary>
 Forms Authentication Failure: Number of failed forms authentication ticket validations since the application was started.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Applications.Events Raised/Sec(Logary.WinPerfCounter.Instance)">
<summary>
 Events Raised/Sec: Total number of instrumentation events per second.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Applications.Events Raised(Logary.WinPerfCounter.Instance)">
<summary>
 Events Raised: Total number of instrumentation events raised since the application was started.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Applications.Errors Unhandled During Execution/Sec(Logary.WinPerfCounter.Instance)">
<summary>
 Errors Unhandled During Execution/Sec: Rate of unhandled errors.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Applications.Errors Unhandled During Execution(Logary.WinPerfCounter.Instance)">
<summary>
 Errors Unhandled During Execution: Number of errors not handled by user code, but by the default error handler.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Applications.Errors Total/Sec(Logary.WinPerfCounter.Instance)">
<summary>
 Errors Total/Sec: Rate of errors occurred.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Applications.Errors Total(Logary.WinPerfCounter.Instance)">
<summary>
 Errors Total: Total number of errors occurred.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Applications.Errors During Preprocessing(Logary.WinPerfCounter.Instance)">
<summary>
 Errors During Preprocessing: Number of errors that have occurred during parsing and configuration.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Applications.Errors During Execution(Logary.WinPerfCounter.Instance)">
<summary>
 Errors During Execution: Number of errors that have occurred during the processing of a request.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Applications.Errors During Compilation(Logary.WinPerfCounter.Instance)">
<summary>
 Errors During Compilation: Number of errors that have occurred during compilation.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Applications.Error Events Raised/Sec(Logary.WinPerfCounter.Instance)">
<summary>
 Error Events Raised/Sec: Number of error events per second.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Applications.Error Events Raised(Logary.WinPerfCounter.Instance)">
<summary>
 Error Events Raised: Number of error events raised since the application was started.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Applications.Debugging Requests(Logary.WinPerfCounter.Instance)">
<summary>
 Debugging Requests: Number of debugging requests processed.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Applications.Compilations Total(Logary.WinPerfCounter.Instance)">
<summary>
 Compilations Total: Number of .asax, .ascx, .ashx, .asmx, or .aspx source files dynamically compiled.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Applications.Cache Total Turnover Rate(Logary.WinPerfCounter.Instance)">
<summary>
 Cache Total Turnover Rate: Number of additions and removals to the total cache per second.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Applications.Cache Total Trims(Logary.WinPerfCounter.Instance)">
<summary>
 Cache Total Trims: Total number of entries forcibly removed from the cache due to memory pressure.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Applications.Cache Total Misses(Logary.WinPerfCounter.Instance)">
<summary>
 Cache Total Misses: Total number of cache misses.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Applications.Cache Total Hits(Logary.WinPerfCounter.Instance)">
<summary>
 Cache Total Hits: Total number of hits from the cache.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Applications.Cache Total Hit Ratio Base(Logary.WinPerfCounter.Instance)">
<summary>
 Cache Total Hit Ratio Base: Cache Total Hit Ratio Base
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Applications.Cache Total Hit Ratio(Logary.WinPerfCounter.Instance)">
<summary>
 Cache Total Hit Ratio: Ratio of hits from all cache calls.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Applications.Cache Total Entries(Logary.WinPerfCounter.Instance)">
<summary>
 Cache Total Entries: Total number of entries within the cache (both internal and user added)
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Applications.Cache API Turnover Rate(Logary.WinPerfCounter.Instance)">
<summary>
 Cache API Turnover Rate: Number of additions and removals to the API cache per second.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Applications.Cache API Trims(Logary.WinPerfCounter.Instance)">
<summary>
 Cache API Trims: Total number of entries forcibly removed from the cache due to memory pressure that were originally inserted into the cache using one of the public cache APIs.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Applications.Cache API Misses(Logary.WinPerfCounter.Instance)">
<summary>
 Cache API Misses: Number of cache misses called from user code.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Applications.Cache API Hits(Logary.WinPerfCounter.Instance)">
<summary>
 Cache API Hits: Number of cache hits from user code.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Applications.Cache API Hit Ratio Base(Logary.WinPerfCounter.Instance)">
<summary>
 Cache API Hit Ratio Base: Cache API Hit Ratio Base
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Applications.Cache API Hit Ratio(Logary.WinPerfCounter.Instance)">
<summary>
 Cache API Hit Ratio: Ratio of hits called from user code.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Applications.Cache API Entries(Logary.WinPerfCounter.Instance)">
<summary>
 Cache API Entries: Total number of entries within the cache added by the user.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Applications.Cache % Process Memory Limit Used Base(Logary.WinPerfCounter.Instance)">
<summary>
 Cache % Process Memory Limit Used Base: Cache % Process Memory Limit Used Base
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Applications.Cache % Process Memory Limit Used(Logary.WinPerfCounter.Instance)">
<summary>
 Cache % Process Memory Limit Used: The value of private bytes for the worker process divided by the private bytes memory limit for the cache, as a percentage.  When this reaches 100%, half of the cache entries will be forcibly removed.  The __Total__ instance is the average of all instances, and therefore cannot be used to determine when cache entries will be forcibly removed.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Applications.Cache % Machine Memory Limit Used Base(Logary.WinPerfCounter.Instance)">
<summary>
 Cache % Machine Memory Limit Used Base: Cache % Machine Memory Limit Used Base
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Applications.Cache % Machine Memory Limit Used(Logary.WinPerfCounter.Instance)">
<summary>
 Cache % Machine Memory Limit Used: The amount of physical memory used by the machine divided by the physical memory limit for the cache, as a percentage.  When this reaches 100%, half of the cache entries will be forcibly removed.  The __Total__ instance is the average of all instances, and therefore cannot be used to determine when cache entries will be forcibly removed.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Applications.Audit Success Events Raised(Logary.WinPerfCounter.Instance)">
<summary>
 Audit Success Events Raised: Number of audit successes in the application since it was started.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Applications.Audit Failure Events Raised(Logary.WinPerfCounter.Instance)">
<summary>
 Audit Failure Events Raised: Number of audit failures in the application since it was started.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Applications.Application Lifetime Events/Sec(Logary.WinPerfCounter.Instance)">
<summary>
 Application Lifetime Events/Sec: Number of application events raised per second.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Applications.Application Lifetime Events(Logary.WinPerfCounter.Instance)">
<summary>
 Application Lifetime Events: Number of application events raised since the application was started.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Applications.Anonymous Requests/Sec(Logary.WinPerfCounter.Instance)">
<summary>
 Anonymous Requests/Sec: Number of Authentication Anonymous Requests/Sec
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Applications.Anonymous Requests(Logary.WinPerfCounter.Instance)">
<summary>
 Anonymous Requests: Number of requests utilizing anonymous authentication.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Applications.% Managed Processor Time Base (estimated)(Logary.WinPerfCounter.Instance)">
<summary>
 % Managed Processor Time Base (estimated): % Managed Processor Time Base (estimated)
</summary>
</member>
<member name="M:Logary.WinPerfCounters.ASP_NET Applications.% Managed Processor Time (estimated)(Logary.WinPerfCounter.Instance)">
<summary>
 % Managed Processor Time (estimated): Estimated percentage of elapsed time that the processor spends executing managed application code.  This counter only tracks processor time of managed threads in the application.  It does not include additional processor time spent executing on non-managed threads.  Note that this counter is only updated with new data every five seconds.
</summary>
</member>
<member name="T:Logary.WinPerfCounters.ASP_NET Applications">
<summary>
 ASP.NET Applications: ASP.NET application performance counters

 This performance counter does not have non-instance based counters
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ASP_NET.Worker Processes Running">
<summary>
 Worker Processes Running: Number of worker processes running on the machine.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ASP_NET.Worker Process Restarts">
<summary>
 Worker Process Restarts: Number of times a worker process has restarted on the machine.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ASP_NET.State Server Sessions Total">
<summary>
 State Server Sessions Total: The number of sessions total.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ASP_NET.State Server Sessions Timed Out">
<summary>
 State Server Sessions Timed Out: The number of sessions timed out.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ASP_NET.State Server Sessions Active">
<summary>
 State Server Sessions Active: The current number of sessions currently active.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ASP_NET.State Server Sessions Abandoned">
<summary>
 State Server Sessions Abandoned: The number of sessions that have been explicitly abandoned.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ASP_NET.Requests Rejected">
<summary>
 Requests Rejected: The number of requests rejected because the request queue was full.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ASP_NET.Requests Queued">
<summary>
 Requests Queued: The number of requests waiting to be processed.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ASP_NET.Requests In Native Queue">
<summary>
 Requests In Native Queue: Requests queued because the concurrency limits have been exceeded.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ASP_NET.Requests Disconnected">
<summary>
 Requests Disconnected: The number of requests disconnected due to communication errors or user terminated.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ASP_NET.Requests Current">
<summary>
 Requests Current: The current number of requests, including those that are queued, currently executing, or waiting to be written to the client.  Under the ASP.NET process model, when this counter exceeds the requestQueueLimit defined in the processModel configuration section, ASP.NET will begin rejecting requests.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ASP_NET.Request Wait Time">
<summary>
 Request Wait Time: The number of milliseconds the most recent request was waiting in the queue.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ASP_NET.Request Execution Time">
<summary>
 Request Execution Time: The number of milliseconds that it took to execute the most recent request.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ASP_NET.Request Error Events Raised">
<summary>
 Request Error Events Raised: Number of runtime error events raised since the application was started.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ASP_NET.Infrastructure Error Events Raised">
<summary>
 Infrastructure Error Events Raised: Number of HTTP error events raised since the application was started.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ASP_NET.Error Events Raised">
<summary>
 Error Events Raised: Number of error events raised since the application was started.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ASP_NET.Audit Success Events Raised">
<summary>
 Audit Success Events Raised: Number of audit successes in the application since it was started.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ASP_NET.Audit Failure Events Raised">
<summary>
 Audit Failure Events Raised: Number of audit failures in the application since it was started.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ASP_NET.Applications Running">
<summary>
 Applications Running: Number of currently running web applications.
</summary>
</member>
<member name="P:Logary.WinPerfCounters.ASP_NET.Application Restarts">
<summary>
 Application Restarts: Number of times the application has been restarted during the web server&apos;s lifetime.
</summary>
</member>
<member name="T:Logary.WinPerfCounters.ASP_NET">
<summary>
 ASP.NET: ASP.NET global performance counters

 This performance counter does not have instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters.APP_POOL_WAS.Total Worker Processes Created(Logary.WinPerfCounter.Instance)">
<summary>
 Total Worker Processes Created: The number of worker processes created for the application pool since Windows Process Activation Service (WAS) started.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.APP_POOL_WAS.Total Worker Process Startup Failures(Logary.WinPerfCounter.Instance)">
<summary>
 Total Worker Process Startup Failures: The number of times that Windows Process Activation Service (WAS) failed to start a worker process.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.APP_POOL_WAS.Total Worker Process Shutdown Failures(Logary.WinPerfCounter.Instance)">
<summary>
 Total Worker Process Shutdown Failures: The number of times that Windows Process Activation Service (WAS) failed to shut down a worker process.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.APP_POOL_WAS.Total Worker Process Ping Failures(Logary.WinPerfCounter.Instance)">
<summary>
 Total Worker Process Ping Failures: The number of times that Windows Process Activation Service (WAS) did not receive a response to ping messages sent to a worker process.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.APP_POOL_WAS.Total Worker Process Failures(Logary.WinPerfCounter.Instance)">
<summary>
 Total Worker Process Failures: The number of times that worker processes have crashed since the application pool was started.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.APP_POOL_WAS.Total Application Pool Uptime(Logary.WinPerfCounter.Instance)">
<summary>
 Total Application Pool Uptime: The length of time, in seconds, that the application pool has been running since Windows Process Activation Service (WAS) started.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.APP_POOL_WAS.Total Application Pool Recycles(Logary.WinPerfCounter.Instance)">
<summary>
 Total Application Pool Recycles: The number of times that the application pool has been recycled since Windows Process Activation Service (WAS) started.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.APP_POOL_WAS.Time Since Last Worker Process Failure(Logary.WinPerfCounter.Instance)">
<summary>
 Time Since Last Worker Process Failure: The length of time, in seconds, since the last worker process failure occurred for the application pool.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.APP_POOL_WAS.Recent Worker Process Failures(Logary.WinPerfCounter.Instance)">
<summary>
 Recent Worker Process Failures: The number of times that worker processes for the application pool failed during the rapid-fail protection interval.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.APP_POOL_WAS.Maximum Worker Processes(Logary.WinPerfCounter.Instance)">
<summary>
 Maximum Worker Processes: The maximum number of worker processes that have been created for the application pool since Windows Process Activation Service (WAS) started.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.APP_POOL_WAS.Current Worker Processes(Logary.WinPerfCounter.Instance)">
<summary>
 Current Worker Processes: The current number of worker processes that are running in the application pool.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.APP_POOL_WAS.Current Application Pool Uptime(Logary.WinPerfCounter.Instance)">
<summary>
 Current Application Pool Uptime: The length of time, in seconds, that the application pool has been running since it was started.
</summary>
</member>
<member name="M:Logary.WinPerfCounters.APP_POOL_WAS.Current Application Pool State(Logary.WinPerfCounter.Instance)">
<summary>
 Current Application Pool State: The current status of the application pool (1 - Uninitialized, 2 - Initialized, 3 - Running, 4 - Disabling, 5 - Disabled, 6 - Shutdown Pending, 7 - Delete Pending).
</summary>
</member>
<member name="T:Logary.WinPerfCounters.APP_POOL_WAS">
<summary>
 APP_POOL_WAS: This counter set exposes WAS related counters for IIS Application Pools.

 This performance counter does not have non-instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET Data Provider for SqlServer.SoftDisconnectsPerSecond(Logary.WinPerfCounter.Instance)">
<summary>
 SoftDisconnectsPerSecond: The number of connections we return to the pool per second
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET Data Provider for SqlServer.SoftConnectsPerSecond(Logary.WinPerfCounter.Instance)">
<summary>
 SoftConnectsPerSecond: The number of connections we get from the pool per second
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET Data Provider for SqlServer.NumberOfStasisConnections(Logary.WinPerfCounter.Instance)">
<summary>
 NumberOfStasisConnections: The number of connections currently waiting to be made ready for use
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET Data Provider for SqlServer.NumberOfReclaimedConnections(Logary.WinPerfCounter.Instance)">
<summary>
 NumberOfReclaimedConnections: The number of connections we reclaim from GCed external connections
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET Data Provider for SqlServer.NumberOfPooledConnections(Logary.WinPerfCounter.Instance)">
<summary>
 NumberOfPooledConnections: The number of connections that are managed by the connection pooler
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET Data Provider for SqlServer.NumberOfNonPooledConnections(Logary.WinPerfCounter.Instance)">
<summary>
 NumberOfNonPooledConnections: The number of connections that are not using connection pooling
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET Data Provider for SqlServer.NumberOfInactiveConnectionPools(Logary.WinPerfCounter.Instance)">
<summary>
 NumberOfInactiveConnectionPools: The number of inactive connection pools
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET Data Provider for SqlServer.NumberOfInactiveConnectionPoolGroups(Logary.WinPerfCounter.Instance)">
<summary>
 NumberOfInactiveConnectionPoolGroups: The number of unique connection strings waiting for pruning
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET Data Provider for SqlServer.NumberOfFreeConnections(Logary.WinPerfCounter.Instance)">
<summary>
 NumberOfFreeConnections: The number of connections currently available for use
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET Data Provider for SqlServer.NumberOfActiveConnections(Logary.WinPerfCounter.Instance)">
<summary>
 NumberOfActiveConnections: The number of connections currently in-use
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET Data Provider for SqlServer.NumberOfActiveConnectionPools(Logary.WinPerfCounter.Instance)">
<summary>
 NumberOfActiveConnectionPools: The number of active connection pools
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET Data Provider for SqlServer.NumberOfActiveConnectionPoolGroups(Logary.WinPerfCounter.Instance)">
<summary>
 NumberOfActiveConnectionPoolGroups: The number of unique connection strings
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET Data Provider for SqlServer.HardDisconnectsPerSecond(Logary.WinPerfCounter.Instance)">
<summary>
 HardDisconnectsPerSecond: The number of actual disconnects per second that are being made to servers
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET Data Provider for SqlServer.HardConnectsPerSecond(Logary.WinPerfCounter.Instance)">
<summary>
 HardConnectsPerSecond: The number of actual connections per second that are being made to servers
</summary>
</member>
<member name="T:Logary.WinPerfCounters._NET Data Provider for SqlServer">
<summary>
 .NET Data Provider for SqlServer: Counters for System.Data.SqlClient

 This performance counter does not have non-instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET Data Provider for Oracle.SoftDisconnectsPerSecond(Logary.WinPerfCounter.Instance)">
<summary>
 SoftDisconnectsPerSecond: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET Data Provider for Oracle.SoftConnectsPerSecond(Logary.WinPerfCounter.Instance)">
<summary>
 SoftConnectsPerSecond: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET Data Provider for Oracle.NumberOfStasisConnections(Logary.WinPerfCounter.Instance)">
<summary>
 NumberOfStasisConnections: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET Data Provider for Oracle.NumberOfReclaimedConnections(Logary.WinPerfCounter.Instance)">
<summary>
 NumberOfReclaimedConnections: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET Data Provider for Oracle.NumberOfPooledConnections(Logary.WinPerfCounter.Instance)">
<summary>
 NumberOfPooledConnections: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET Data Provider for Oracle.NumberOfNonPooledConnections(Logary.WinPerfCounter.Instance)">
<summary>
 NumberOfNonPooledConnections: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET Data Provider for Oracle.NumberOfInactiveConnectionPools(Logary.WinPerfCounter.Instance)">
<summary>
 NumberOfInactiveConnectionPools: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET Data Provider for Oracle.NumberOfInactiveConnectionPoolGroups(Logary.WinPerfCounter.Instance)">
<summary>
 NumberOfInactiveConnectionPoolGroups: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET Data Provider for Oracle.NumberOfFreeConnections(Logary.WinPerfCounter.Instance)">
<summary>
 NumberOfFreeConnections: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET Data Provider for Oracle.NumberOfActiveConnections(Logary.WinPerfCounter.Instance)">
<summary>
 NumberOfActiveConnections: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET Data Provider for Oracle.NumberOfActiveConnectionPools(Logary.WinPerfCounter.Instance)">
<summary>
 NumberOfActiveConnectionPools: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET Data Provider for Oracle.NumberOfActiveConnectionPoolGroups(Logary.WinPerfCounter.Instance)">
<summary>
 NumberOfActiveConnectionPoolGroups: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET Data Provider for Oracle.HardDisconnectsPerSecond(Logary.WinPerfCounter.Instance)">
<summary>
 HardDisconnectsPerSecond: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET Data Provider for Oracle.HardConnectsPerSecond(Logary.WinPerfCounter.Instance)">
<summary>
 HardConnectsPerSecond: -
</summary>
</member>
<member name="T:Logary.WinPerfCounters._NET Data Provider for Oracle">
<summary>
 .NET Data Provider for Oracle: Counters for System.Data.OracleClient

 This performance counter does not have instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Security.Total Runtime Checks(Logary.WinPerfCounter.Instance)">
<summary>
 Total Runtime Checks: This counter displays the total number of runtime Code Access Security (CAS) checks performed since the start of the application. Runtime CAS checks are performed when a caller makes a call to a callee demanding a particular permission; the runtime check is made on every call by the caller; the check is done by examining the current thread stack of the caller. This counter used together with &quot;Stack Walk Depth&quot; is indicative of performance penalty for security checks.
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Security.Stack Walk Depth(Logary.WinPerfCounter.Instance)">
<summary>
 Stack Walk Depth: This counter displays the depth of the stack during that last runtime Code Access Security check. Runtime Code Access Security check is performed by crawling the stack. This counter is not an average; it just displays the last observed value.
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Security.Not Displayed(Logary.WinPerfCounter.Instance)">
<summary>
 Not Displayed: Not Displayed.
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Security.% Time in RT checks(Logary.WinPerfCounter.Instance)">
<summary>
 % Time in RT checks: This counter displays the percentage of elapsed time spent in performing runtime Code Access Security (CAS) checks since the last such check. CAS allows code to be trusted to varying degrees and enforces these varying levels of trust depending on code identity. This counter is updated at the end of a runtime security check; it represents the last observed value; its not an average.
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Security.% Time Sig. Authenticating(Logary.WinPerfCounter.Instance)">
<summary>
 % Time Sig. Authenticating: Reserved for future use.
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Security.# Link Time Checks(Logary.WinPerfCounter.Instance)">
<summary>
 # Link Time Checks: This counter displays the total number of linktime Code Access Security (CAS) checks since the start of the application. Linktime CAS checks are performed when a caller makes a call to a callee demanding a particular permission at JIT compile time; linktime check is performed once per caller. This count is not indicative of serious performance issues; its indicative of the security system activity.
</summary>
</member>
<member name="T:Logary.WinPerfCounters._NET CLR Security">
<summary>
 .NET CLR Security: Stats for CLR Security.

 This performance counter does not have non-instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Remoting.Total Remote Calls(Logary.WinPerfCounter.Instance)">
<summary>
 Total Remote Calls: This counter displays the total number of remote procedure calls invoked since the start of this application. A remote procedure call is a call on any object outside the caller;s AppDomain.
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Remoting.Remote Calls/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Remote Calls/sec: This counter displays the number of remote procedure calls invoked per second. A remote procedure call is a call on any object outside the caller;s AppDomain. This counter is not an average over time; it displays the difference between the values observed in the last two samples divided by the duration of the sample interval.
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Remoting.Contexts(Logary.WinPerfCounter.Instance)">
<summary>
 Contexts: This counter displays the current number of remoting contexts in the application. A context is a boundary containing a collection of objects with the same usage rules like synchronization; thread affinity; transactions etc.
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Remoting.Context-Bound Objects Alloc / sec(Logary.WinPerfCounter.Instance)">
<summary>
 Context-Bound Objects Alloc / sec: This counter displays the number of context-bound objects allocated per second. Instances of classes that can be bound to a context are called context-bound objects; context-bound classes are marked with Context Attributes which provide usage rules for synchronization; thread affinity; transactions etc. This counter is not an average over time; it displays the difference between the values observed in the last two samples divided by the duration of the sample interval.
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Remoting.Context-Bound Classes Loaded(Logary.WinPerfCounter.Instance)">
<summary>
 Context-Bound Classes Loaded: This counter displays the current number of context-bound classes loaded. Classes that can be bound to a context are called context-bound classes; context-bound classes are marked with Context Attributes which provide usage rules for synchronization; thread affinity; transactions etc.
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Remoting.Context Proxies(Logary.WinPerfCounter.Instance)">
<summary>
 Context Proxies: This counter displays the total number of remoting proxy objects created in this process since the start of the process. Proxy object acts as a representative of the remote objects and ensures that all calls made on the proxy are forwarded to the correct remote object instance.
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Remoting.Channels(Logary.WinPerfCounter.Instance)">
<summary>
 Channels: This counter displays the total number of remoting channels registered across all AppDomains since the start of the application. Channels are used to transport messages to and from remote objects.
</summary>
</member>
<member name="T:Logary.WinPerfCounters._NET CLR Remoting">
<summary>
 .NET CLR Remoting: Stats for CLR Remoting.

 This performance counter does not have non-instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Networking 4_0_0_0.HttpWebRequests Queued/Sec(Logary.WinPerfCounter.Instance)">
<summary>
 HttpWebRequests Queued/Sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Networking 4_0_0_0.HttpWebRequests Failed/Sec(Logary.WinPerfCounter.Instance)">
<summary>
 HttpWebRequests Failed/Sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Networking 4_0_0_0.HttpWebRequests Created/Sec(Logary.WinPerfCounter.Instance)">
<summary>
 HttpWebRequests Created/Sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Networking 4_0_0_0.HttpWebRequests Average Queue Time Base(Logary.WinPerfCounter.Instance)">
<summary>
 HttpWebRequests Average Queue Time Base: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Networking 4_0_0_0.HttpWebRequests Average Queue Time(Logary.WinPerfCounter.Instance)">
<summary>
 HttpWebRequests Average Queue Time: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Networking 4_0_0_0.HttpWebRequests Average Lifetime Base(Logary.WinPerfCounter.Instance)">
<summary>
 HttpWebRequests Average Lifetime Base: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Networking 4_0_0_0.HttpWebRequests Average Lifetime(Logary.WinPerfCounter.Instance)">
<summary>
 HttpWebRequests Average Lifetime: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Networking 4_0_0_0.HttpWebRequests Aborted/Sec(Logary.WinPerfCounter.Instance)">
<summary>
 HttpWebRequests Aborted/Sec: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Networking 4_0_0_0.Datagrams Sent(Logary.WinPerfCounter.Instance)">
<summary>
 Datagrams Sent: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Networking 4_0_0_0.Datagrams Received(Logary.WinPerfCounter.Instance)">
<summary>
 Datagrams Received: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Networking 4_0_0_0.Connections Established(Logary.WinPerfCounter.Instance)">
<summary>
 Connections Established: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Networking 4_0_0_0.Bytes Sent(Logary.WinPerfCounter.Instance)">
<summary>
 Bytes Sent: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Networking 4_0_0_0.Bytes Received(Logary.WinPerfCounter.Instance)">
<summary>
 Bytes Received: -
</summary>
</member>
<member name="T:Logary.WinPerfCounters._NET CLR Networking 4_0_0_0">
<summary>
 .NET CLR Networking 4.0.0.0: Counters for classes in the System.Net namespace.

 This performance counter does not have instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Networking.Datagrams Sent(Logary.WinPerfCounter.Instance)">
<summary>
 Datagrams Sent: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Networking.Datagrams Received(Logary.WinPerfCounter.Instance)">
<summary>
 Datagrams Received: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Networking.Connections Established(Logary.WinPerfCounter.Instance)">
<summary>
 Connections Established: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Networking.Bytes Sent(Logary.WinPerfCounter.Instance)">
<summary>
 Bytes Sent: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Networking.Bytes Received(Logary.WinPerfCounter.Instance)">
<summary>
 Bytes Received: -
</summary>
</member>
<member name="T:Logary.WinPerfCounters._NET CLR Networking">
<summary>
 .NET CLR Networking: Help not available.

 This performance counter does not have instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Memory.Promoted Memory from Gen 1(Logary.WinPerfCounter.Instance)">
<summary>
 Promoted Memory from Gen 1: This counter displays the bytes of memory that survive garbage collection (GC) and are promoted from generation 1 to generation 2; objects that are promoted just because they are waiting to be finalized are not included in this counter. This counter displays the value observed at the end of the last GC; its not a cumulative counter. This counter is reset to 0 if the last GC was a Gen 0 GC only.
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Memory.Promoted Memory from Gen 0(Logary.WinPerfCounter.Instance)">
<summary>
 Promoted Memory from Gen 0: This counter displays the bytes of memory that survive garbage collection (GC) and are promoted from generation 0 to generation 1; objects that are promoted just because they are waiting to be finalized are not included in this counter. This counter displays the value observed at the end of the last GC; its not a cumulative counter.
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Memory.Promoted Finalization-Memory from Gen 0(Logary.WinPerfCounter.Instance)">
<summary>
 Promoted Finalization-Memory from Gen 0: This counter displays the bytes of memory that are promoted from generation 0 to generation 1 just because they are waiting to be finalized. This counter displays the value observed at the end of the last GC; its not a cumulative counter.
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Memory.Process ID(Logary.WinPerfCounter.Instance)">
<summary>
 Process ID: This counter displays the process ID of the CLR process instance being monitored. The value displayed will be 0 until after the first garbage collection.
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Memory.Not Displayed(Logary.WinPerfCounter.Instance)">
<summary>
 Not Displayed: Not Displayed.
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Memory.Large Object Heap size(Logary.WinPerfCounter.Instance)">
<summary>
 Large Object Heap size: This counter displays the current size of the Large Object Heap in bytes. Objects greater than a threshold are treated as large objects by the Garbage Collector and are directly allocated in a special heap; they are not promoted through the generations. In CLR v1.1 and above this threshold is equal to 85000 bytes. This counter is updated at the end of a GC; it’s not updated on every allocation.
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Memory.Gen 2 heap size(Logary.WinPerfCounter.Instance)">
<summary>
 Gen 2 heap size: This counter displays the current number of bytes in generation 2 (Gen 2). Objects are not directly allocated in this generation; they are promoted from Gen 1 during previous Gen 1 GCs. This counter is updated at the end of a GC; its not updated on every allocation.
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Memory.Gen 1 heap size(Logary.WinPerfCounter.Instance)">
<summary>
 Gen 1 heap size: This counter displays the current number of bytes in generation 1 (Gen 1); this counter does not display the maximum size of Gen 1. Objects are not directly allocated in this generation; they are promoted from previous Gen 0 GCs. This counter is updated at the end of a GC; its not updated on every allocation.
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Memory.Gen 1 Promoted Bytes/Sec(Logary.WinPerfCounter.Instance)">
<summary>
 Gen 1 Promoted Bytes/Sec: This counter displays the bytes per second that are promoted from generation 1 to generation 2 (oldest); objects that are promoted just because they are waiting to be finalized are not included in this counter. Memory is promoted when it survives a garbage collection. Nothing is promoted from generation 2 since it is the oldest. This counter was designed as an indicator of very long-lived objects being created per sec. This counter displays the difference between the values observed in the last two samples divided by the duration of the sample interval.
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Memory.Gen 0 heap size(Logary.WinPerfCounter.Instance)">
<summary>
 Gen 0 heap size: This counter displays the maximum bytes that can be allocated in generation 0 (Gen 0); its does not indicate the current number of bytes allocated in Gen 0. A Gen 0 GC is triggered when the allocations since the last GC exceed this size. The Gen 0 size is tuned by the Garbage Collector and can change during the execution of the application. At the end of a Gen 0 collection the size of the Gen 0 heap is infact 0 bytes; this counter displays the size (in bytes) of allocations that would trigger the next Gen 0 GC. This counter is updated at the end of a GC; its not updated on every allocation.
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Memory.Gen 0 Promoted Bytes/Sec(Logary.WinPerfCounter.Instance)">
<summary>
 Gen 0 Promoted Bytes/Sec: This counter displays the bytes per second that are promoted from generation 0 (youngest) to generation 1; objects that are promoted just because they are waiting to be finalized are not included in this counter. Memory is promoted when it survives a garbage collection. This counter was designed as an indicator of relatively long-lived objects being created per sec. This counter displays the difference between the values observed in the last two samples divided by the duration of the sample interval.
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Memory.Finalization Survivors(Logary.WinPerfCounter.Instance)">
<summary>
 Finalization Survivors: This counter displays the number of garbage collected objects that survive a collection because they are waiting to be finalized. If these objects hold references to other objects then those objects also survive but are not counted by this counter; the &quot;Promoted Finalization-Memory from Gen 0&quot; and &quot;Promoted Finalization-Memory from Gen 1&quot; counters represent all the memory that survived due to finalization. This counter is not a cumulative counter; its updated at the end of every GC with count of the survivors during that particular GC only. This counter was designed to indicate the extra overhead that the application might incur because of finalization.
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Memory.Allocated Bytes/sec(Logary.WinPerfCounter.Instance)">
<summary>
 Allocated Bytes/sec: This counter displays the rate of bytes per second allocated on the GC Heap. This counter is updated at the end of every GC; not at each allocation. This counter is not an average over time; it displays the difference between the values observed in the last two samples divided by the duration of the sample interval.
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Memory.% Time in GC(Logary.WinPerfCounter.Instance)">
<summary>
 % Time in GC: % Time in GC is the percentage of elapsed time that was spent in performing a garbage collection (GC) since the last GC cycle. This counter is usually an indicator of the work done by the Garbage Collector on behalf of the application to collect and compact memory. This counter is updated only at the end of every GC and the counter value reflects the last observed value; its not an average.
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Memory.# of Sink Blocks in use(Logary.WinPerfCounter.Instance)">
<summary>
 # of Sink Blocks in use: This counter displays the current number of sync blocks in use. Sync blocks are per-object data structures allocated for storing synchronization information. Sync blocks hold weak references to managed objects and need to be scanned by the Garbage Collector. Sync blocks are not limited to storing synchronization information and can also store COM interop metadata. This counter was designed to indicate performance problems with heavy use of synchronization primitives.
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Memory.# of Pinned Objects(Logary.WinPerfCounter.Instance)">
<summary>
 # of Pinned Objects: This counter displays the number of pinned objects encountered in the last GC. This counter tracks the pinned objects only in the heaps that were garbage collected e.g. a Gen 0 GC would cause enumeration of pinned objects in the generation 0 heap only. A pinned object is one that the Garbage Collector cannot move in memory.
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Memory.# Total reserved Bytes(Logary.WinPerfCounter.Instance)">
<summary>
 # Total reserved Bytes: This counter displays the amount of virtual memory (in bytes) currently reserved by the Garbage Collector. (Reserved memory is the virtual memory space reserved for the application but no disk or main memory pages have been used.)
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Memory.# Total committed Bytes(Logary.WinPerfCounter.Instance)">
<summary>
 # Total committed Bytes: This counter displays the amount of virtual memory (in bytes) currently committed by the Garbage Collector. (Committed memory is the physical memory for which space has been reserved on the disk paging file).
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Memory.# Induced GC(Logary.WinPerfCounter.Instance)">
<summary>
 # Induced GC: This counter displays the peak number of times a garbage collection was performed because of an explicit call to GC.Collect. Its a good practice to let the GC tune the frequency of its collections.
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Memory.# Gen 2 Collections(Logary.WinPerfCounter.Instance)">
<summary>
 # Gen 2 Collections: This counter displays the number of times the generation 2 objects (older) are garbage collected since the start of the application. The counter is incremented at the end of a Gen 2 GC (also called full GC). _Global_ counter value is not accurate and should be ignored. This counter displays the last observed value.
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Memory.# Gen 1 Collections(Logary.WinPerfCounter.Instance)">
<summary>
 # Gen 1 Collections: This counter displays the number of times the generation 1 objects are garbage collected since the start of the application. The counter is incremented at the end of a Gen 1 GC. Higher generation GCs include all lower generation GCs. This counter is explicitly incremented when a higher generation (Gen 2) GC occurs. _Global_ counter value is not accurate and should be ignored. This counter displays the last observed value.
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Memory.# Gen 0 Collections(Logary.WinPerfCounter.Instance)">
<summary>
 # Gen 0 Collections: This counter displays the number of times the generation 0 objects (youngest; most recently allocated) are garbage collected (Gen 0 GC) since the start of the application. Gen 0 GC occurs when the available memory in generation 0 is not sufficient to satisfy an allocation request. This counter is incremented at the end of a Gen 0 GC. Higher generation GCs include all lower generation GCs. This counter is explicitly incremented when a higher generation (Gen 1 or Gen 2) GC occurs. _Global_ counter value is not accurate and should be ignored. This counter displays the last observed value.
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Memory.# GC Handles(Logary.WinPerfCounter.Instance)">
<summary>
 # GC Handles: This counter displays the current number of GC Handles in use. GCHandles are handles to resources external to the CLR and the managed environment. Handles occupy small amounts of memory in the GCHeap but potentially expensive unmanaged resources.
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Memory.# Bytes in all Heaps(Logary.WinPerfCounter.Instance)">
<summary>
 # Bytes in all Heaps: This counter is the sum of four other counters; Gen 0 Heap Size; Gen 1 Heap Size; Gen 2 Heap Size and the Large Object Heap Size. This counter indicates the current memory allocated in bytes on the GC Heaps.
</summary>
</member>
<member name="T:Logary.WinPerfCounters._NET CLR Memory">
<summary>
 .NET CLR Memory: Counters for CLR Garbage Collected heap.

 This performance counter does not have non-instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR LocksAndThreads.rate of recognized threads / sec(Logary.WinPerfCounter.Instance)">
<summary>
 rate of recognized threads / sec: This counter displays the number of threads per second that have been recognized by the CLR; these threads have a corresponding .NET thread object associated with them. These threads are not created by the CLR; they are created outside the CLR but have since run inside the CLR at least once. Only unique threads are tracked; threads with same thread ID re-entering the CLR or recreated after thread exit are not counted twice. This counter is not an average over time; it displays the difference between the values observed in the last two samples divided by the duration of the sample interval.
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR LocksAndThreads.Total # of Contentions(Logary.WinPerfCounter.Instance)">
<summary>
 Total # of Contentions: This counter displays the total number of times threads in the CLR have attempted to acquire a managed lock unsuccessfully. Managed locks can be acquired in many ways; by the &quot;lock&quot; statement in C# or by calling System.Monitor.Enter or by using MethodImplOptions.Synchronized custom attribute.
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR LocksAndThreads.Queue Length Peak(Logary.WinPerfCounter.Instance)">
<summary>
 Queue Length Peak: This counter displays the total number of threads that waited to acquire some managed lock since the start of the application.
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR LocksAndThreads.Queue Length / sec(Logary.WinPerfCounter.Instance)">
<summary>
 Queue Length / sec: This counter displays the number of threads per second waiting to acquire some lock in the application. This counter is not an average over time; it displays the difference between the values observed in the last two samples divided by the duration of the sample interval.
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR LocksAndThreads.Current Queue Length(Logary.WinPerfCounter.Instance)">
<summary>
 Current Queue Length: This counter displays the total number of threads currently waiting to acquire some managed lock in the application. This counter is not an average over time; it displays the last observed value.
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR LocksAndThreads.Contention Rate / sec(Logary.WinPerfCounter.Instance)">
<summary>
 Contention Rate / sec: Rate at which threads in the runtime attempt to acquire a managed lock unsuccessfully. Managed locks can be acquired in many ways; by the &quot;lock&quot; statement in C# or by calling System.Monitor.Enter or by using MethodImplOptions.Synchronized custom attribute.
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR LocksAndThreads.# of total recognized threads(Logary.WinPerfCounter.Instance)">
<summary>
 # of total recognized threads: This counter displays the total number of threads that have been recognized by the CLR since the start of this application; these threads have a corresponding .NET thread object associated with them. These threads are not created by the CLR; they are created outside the CLR but have since run inside the CLR at least once. Only unique threads are tracked; threads with same thread ID re-entering the CLR or recreated after thread exit are not counted twice.
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR LocksAndThreads.# of current recognized threads(Logary.WinPerfCounter.Instance)">
<summary>
 # of current recognized threads: This counter displays the number of threads that are currently recognized by the CLR; they have a corresponding .NET thread object associated with them. These threads are not created by the CLR; they are created outside the CLR but have since run inside the CLR at least once. Only unique threads are tracked; threads with same thread ID re-entering the CLR or recreated after thread exit are not counted twice.
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR LocksAndThreads.# of current physical Threads(Logary.WinPerfCounter.Instance)">
<summary>
 # of current physical Threads: This counter displays the number of native OS threads created and owned by the CLR to act as underlying threads for .NET thread objects. This counters value does not include the threads used by the CLR in its internal operations; it is a subset of the threads in the OS process.
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR LocksAndThreads.# of current logical Threads(Logary.WinPerfCounter.Instance)">
<summary>
 # of current logical Threads: This counter displays the number of current .NET thread objects in the application. A .NET thread object is created either by new System.Threading.Thread or when an unmanaged thread enters the managed environment. This counters maintains the count of both running and stopped threads. This counter is not an average over time; it just displays the last observed value.
</summary>
</member>
<member name="T:Logary.WinPerfCounters._NET CLR LocksAndThreads">
<summary>
 .NET CLR LocksAndThreads: Stats for CLR Locks and Threads.

 This performance counter does not have non-instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Loading.Total appdomains unloaded(Logary.WinPerfCounter.Instance)">
<summary>
 Total appdomains unloaded: This counter displays the total number of AppDomains unloaded since the start of the application. If an AppDomain is loaded and unloaded multiple times this counter would count each of those unloads as separate.
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Loading.Total Classes Loaded(Logary.WinPerfCounter.Instance)">
<summary>
 Total Classes Loaded: This counter displays the cumulative number of classes loaded in all Assemblies since the start of this application.
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Loading.Total Assemblies(Logary.WinPerfCounter.Instance)">
<summary>
 Total Assemblies: This counter displays the total number of Assemblies loaded since the start of this application. If the Assembly is loaded as domain-neutral from multiple AppDomains then this counter is incremented once only. Assemblies can be loaded as domain-neutral when their code can be shared by all AppDomains or they can be loaded as domain-specific when their code is private to the AppDomain.
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Loading.Total Appdomains(Logary.WinPerfCounter.Instance)">
<summary>
 Total Appdomains: This counter displays the peak number of AppDomains loaded since the start of this application. AppDomains (application domains) provide a secure and versatile unit of processing that the CLR can use to provide isolation between applications running in the same process.
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Loading.Total # of Load Failures(Logary.WinPerfCounter.Instance)">
<summary>
 Total # of Load Failures: This counter displays the peak number of classes that have failed to load since the start of the application. These load failures could be due to many reasons like inadequate security or illegal format. Full details can be found in the profiling services help.
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Loading.Rate of appdomains unloaded(Logary.WinPerfCounter.Instance)">
<summary>
 Rate of appdomains unloaded: This counter displays the number of AppDomains unloaded per second. This counter is not an average over time; it displays the difference between the values observed in the last two samples divided by the duration of the sample interval.
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Loading.Rate of appdomains(Logary.WinPerfCounter.Instance)">
<summary>
 Rate of appdomains: This counter displays the number of AppDomains loaded per second. AppDomains (application domains) provide a secure and versatile unit of processing that the CLR can use to provide isolation between applications running in the same process. This counter is not an average over time; it displays the difference between the values observed in the last two samples divided by the duration of the sample interval.
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Loading.Rate of Load Failures(Logary.WinPerfCounter.Instance)">
<summary>
 Rate of Load Failures: This counter displays the number of classes that failed to load per second. This counter is not an average over time; it displays the difference between the values observed in the last two samples divided by the duration of the sample interval. These load failures could be due to many reasons like inadequate security or illegal format. Full details can be found in the profiling services help.
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Loading.Rate of Classes Loaded(Logary.WinPerfCounter.Instance)">
<summary>
 Rate of Classes Loaded: This counter displays the number of classes loaded per second in all Assemblies. This counter is not an average over time; it displays the difference between the values observed in the last two samples divided by the duration of the sample interval.
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Loading.Rate of Assemblies(Logary.WinPerfCounter.Instance)">
<summary>
 Rate of Assemblies: This counter displays the number of Assemblies loaded across all AppDomains per second. If the Assembly is loaded as domain-neutral from multiple AppDomains then this counter is incremented once only. Assemblies can be loaded as domain-neutral when their code can be shared by all AppDomains or they can be loaded as domain-specific when their code is private to the AppDomain. This counter is not an average over time; it displays the difference between the values observed in the last two samples divided by the duration of the sample interval.
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Loading.Current appdomains(Logary.WinPerfCounter.Instance)">
<summary>
 Current appdomains: This counter displays the current number of AppDomains loaded in this application. AppDomains (application domains) provide a secure and versatile unit of processing that the CLR can use to provide isolation between applications running in the same process.
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Loading.Current Classes Loaded(Logary.WinPerfCounter.Instance)">
<summary>
 Current Classes Loaded: This counter displays the current number of classes loaded in all Assemblies.
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Loading.Current Assemblies(Logary.WinPerfCounter.Instance)">
<summary>
 Current Assemblies: This counter displays the current number of Assemblies loaded across all AppDomains in this application. If the Assembly is loaded as domain-neutral from multiple AppDomains then this counter is incremented once only. Assemblies can be loaded as domain-neutral when their code can be shared by all AppDomains or they can be loaded as domain-specific when their code is private to the AppDomain.
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Loading.Bytes in Loader Heap(Logary.WinPerfCounter.Instance)">
<summary>
 Bytes in Loader Heap: This counter displays the current size (in bytes) of the memory committed by the class loader across all AppDomains. (Committed memory is the physical memory for which space has been reserved on the disk paging file.)
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Loading.Assembly Search Length(Logary.WinPerfCounter.Instance)">
<summary>
 Assembly Search Length: Reserved for future use.
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Loading.% Time Loading(Logary.WinPerfCounter.Instance)">
<summary>
 % Time Loading: Reserved for future use.
</summary>
</member>
<member name="T:Logary.WinPerfCounters._NET CLR Loading">
<summary>
 .NET CLR Loading: Statistics for CLR Class Loader.

 This performance counter does not have non-instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Jit.Total # of IL Bytes Jitted(Logary.WinPerfCounter.Instance)">
<summary>
 Total # of IL Bytes Jitted: This counter displays the total IL bytes jitted since the start of the application. This counter is exactly equivalent to the &quot;# of IL Bytes Jitted&quot; counter.
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Jit.Standard Jit Failures(Logary.WinPerfCounter.Instance)">
<summary>
 Standard Jit Failures: This counter displays the peak number of methods the JIT compiler has failed to JIT since the start of the application. This failure can occur if the IL cannot be verified or if there was an internal error in the JIT compiler.
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Jit.Not Displayed(Logary.WinPerfCounter.Instance)">
<summary>
 Not Displayed: Not Displayed.
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Jit.IL Bytes Jitted / sec(Logary.WinPerfCounter.Instance)">
<summary>
 IL Bytes Jitted / sec: This counter displays the rate at which IL bytes are jitted per second. This counter is not an average over time; it displays the difference between the values observed in the last two samples divided by the duration of the sample interval.
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Jit.% Time in Jit(Logary.WinPerfCounter.Instance)">
<summary>
 % Time in Jit: This counter displays the percentage of elapsed time spent in JIT compilation since the last JIT compilation phase. This counter is updated at the end of every JIT compilation phase. A JIT compilation phase is the phase when a method and its dependencies are being compiled.
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Jit.# of Methods Jitted(Logary.WinPerfCounter.Instance)">
<summary>
 # of Methods Jitted: This counter displays the total number of methods compiled Just-In-Time (JIT) by the CLR JIT compiler since the start of the application. This counter does not include the pre-jitted methods.
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Jit.# of IL Bytes Jitted(Logary.WinPerfCounter.Instance)">
<summary>
 # of IL Bytes Jitted: This counter displays the total IL bytes jitted since the start of the application. This counter is exactly equivalent to the &quot;Total # of IL Bytes Jitted&quot; counter.
</summary>
</member>
<member name="T:Logary.WinPerfCounters._NET CLR Jit">
<summary>
 .NET CLR Jit: Stats for CLR Jit.

 This performance counter does not have non-instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Interop.# of marshalling(Logary.WinPerfCounter.Instance)">
<summary>
 # of marshalling: This counter displays the total number of times arguments and return values have been marshaled from managed to unmanaged code and vice versa since the start of the application. This counter is not incremented if the stubs are inlined. (Stubs are responsible for marshalling arguments and return values). Stubs usually get inlined if the marshalling overhead is small.
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Interop.# of TLB imports / sec(Logary.WinPerfCounter.Instance)">
<summary>
 # of TLB imports / sec: Reserved for future use.
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Interop.# of TLB exports / sec(Logary.WinPerfCounter.Instance)">
<summary>
 # of TLB exports / sec: Reserved for future use.
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Interop.# of Stubs(Logary.WinPerfCounter.Instance)">
<summary>
 # of Stubs: This counter displays the current number of stubs created by the CLR. Stubs are responsible for marshalling arguments and return values from managed to unmanaged code and vice versa; during a COM Interop call or PInvoke call.
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Interop.# of CCWs(Logary.WinPerfCounter.Instance)">
<summary>
 # of CCWs: This counter displays the current number of Com-Callable-Wrappers (CCWs). A CCW is a proxy for the .NET managed object being referenced from unmanaged COM client(s). This counter was designed to indicate the number of managed objects being referenced by unmanaged COM code.
</summary>
</member>
<member name="T:Logary.WinPerfCounters._NET CLR Interop">
<summary>
 .NET CLR Interop: Stats for CLR interop.

 This performance counter does not have non-instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Exceptions.Throw To Catch Depth / sec(Logary.WinPerfCounter.Instance)">
<summary>
 Throw To Catch Depth / sec: This counter displays the number of stack frames traversed from the frame that threw the .NET exception to the frame that handled the exception per second. This counter resets to 0 when an exception handler is entered; so nested exceptions would show the handler to handler stack depth. This counter is not an average over time; it displays the difference between the values observed in the last two samples divided by the duration of the sample interval.
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Exceptions.# of Finallys / sec(Logary.WinPerfCounter.Instance)">
<summary>
 # of Finallys / sec: This counter displays the number of finally blocks executed per second. A finally block is guaranteed to be executed regardless of how the try block was exited. Only the finally blocks that are executed for an exception are counted; finally blocks on normal code paths are not counted by this counter. This counter is not an average over time; it displays the difference between the values observed in the last two samples divided by the duration of the sample interval.
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Exceptions.# of Filters / sec(Logary.WinPerfCounter.Instance)">
<summary>
 # of Filters / sec: This counter displays the number of .NET exception filters executed per second. An exception filter evaluates whether an exception should be handled or not. This counter tracks the rate of exception filters evaluated; irrespective of whether the exception was handled or not. This counter is not an average over time; it displays the difference between the values observed in the last two samples divided by the duration of the sample interval.
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Exceptions.# of Exceps Thrown / sec(Logary.WinPerfCounter.Instance)">
<summary>
 # of Exceps Thrown / sec: This counter displays the number of exceptions thrown per second. These include both .NET exceptions and unmanaged exceptions that get converted into .NET exceptions e.g. null pointer reference exception in unmanaged code would get re-thrown in managed code as a .NET System.NullReferenceException; this counter includes both handled and unhandled exceptions. Exceptions should only occur in rare situations and not in the normal control flow of the program; this counter was designed as an indicator of potential performance problems due to large (&gt;100s) rate of exceptions thrown. This counter is not an average over time; it displays the difference between the values observed in the last two samples divided by the duration of the sample interval.
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Exceptions.# of Exceps Thrown(Logary.WinPerfCounter.Instance)">
<summary>
 # of Exceps Thrown: This counter displays the total number of exceptions thrown since the start of the application. These include both .NET exceptions and unmanaged exceptions that get converted into .NET exceptions e.g. null pointer reference exception in unmanaged code would get re-thrown in managed code as a .NET System.NullReferenceException; this counter includes both handled and unhandled exceptions. Exceptions that are re-thrown would get counted again. Exceptions should only occur in rare situations and not in the normal control flow of the program.
</summary>
</member>
<member name="T:Logary.WinPerfCounters._NET CLR Exceptions">
<summary>
 .NET CLR Exceptions: Runtime statistics on CLR exception handling.

 This performance counter does not have non-instance based counters
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Data.SqlClient: Total # failed connects(Logary.WinPerfCounter.Instance)">
<summary>
 SqlClient: Total # failed connects: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Data.SqlClient: Total # failed commands(Logary.WinPerfCounter.Instance)">
<summary>
 SqlClient: Total # failed commands: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Data.SqlClient: Peak # pooled connections(Logary.WinPerfCounter.Instance)">
<summary>
 SqlClient: Peak # pooled connections: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Data.SqlClient: Current # pooled connections(Logary.WinPerfCounter.Instance)">
<summary>
 SqlClient: Current # pooled connections: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Data.SqlClient: Current # pooled and nonpooled connections(Logary.WinPerfCounter.Instance)">
<summary>
 SqlClient: Current # pooled and nonpooled connections: -
</summary>
</member>
<member name="M:Logary.WinPerfCounters._NET CLR Data.SqlClient: Current # connection pools(Logary.WinPerfCounter.Instance)">
<summary>
 SqlClient: Current # connection pools: -
</summary>
</member>
<member name="T:Logary.WinPerfCounters._NET CLR Data">
<summary>
 .NET CLR Data: .Net CLR Data

 This performance counter does not have instance based counters
</summary>
</member>
<member name="T:Logary.WinPerfCounters">
<summary>
 Copyright Henrik Feldt 2014. Part of the Logary source code.
 An autogenerated file with all performance counters found on a Windows 8.1 system
</summary>
</member>
<member name="T:TO_THINK_ABOUT.Meter">
<summary>
 A meter measures the rate of events over time (e.g., &quot;requests per second&quot;).
 In addition to the mean rate, meters also track 1-, 5-, and 15-minute moving
 averages.
</summary>
</member>
<member name="M:TO_THINK_ABOUT.Play.Categorisation.percentBucket'(System.Double)">
<summary>
 Divides a given value first by the divisor, then assigns it a bucket of
 Info, Warn or Error.
</summary>
</member>
<member name="M:TO_THINK_ABOUT.Play.Categorisation.percentBucket(System.Double,System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{Logary.LogLevel})">
<summary>
 Divides a given value first by the divisor, then assigns it a bucket of
 `levels`
</summary>
</member>
<member name="M:TO_THINK_ABOUT.Play.Categorisation.lteBucket``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},``0)">
<summary>
 Finds the bucket that is less than or equal in value to the sample, yielding
 its corresponding label.
</summary>
</member>
<member name="M:TO_THINK_ABOUT.Time.TimeLevel``1(Logary.Logger,Logary.LogLevel,Logary.DP,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,``0})">
<summary>
 Capture a timer metric with a given metric-level and metric-path.
</summary>
</member>
</members>
</doc>
